
fast-usbserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000012b8  0000134c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  00800116  00800116  00001362  2**0
                  ALLOC
  3 .comment      00000027  00000000  00000000  00001362  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00001389  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ad7  00000000  00000000  000013b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a40  00000000  00000000  00003e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b38  00000000  00000000  000048c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00005400  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000139e  00000000  00000000  00005534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fac  00000000  00000000  000068d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000718  00000000  00000000  0000887e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
       6:	00 00       	nop
       8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
       a:	00 00       	nop
       c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
       e:	00 00       	nop
      10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
      12:	00 00       	nop
      14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
      16:	00 00       	nop
      18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
      22:	00 00       	nop
      24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
      26:	00 00       	nop
      28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a0 c6       	rjmp	.+3392   	; 0xd6e <__vector_11>
      2e:	00 00       	nop
      30:	88 c7       	rjmp	.+3856   	; 0xf42 <__vector_12>
      32:	00 00       	nop
      34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
      36:	00 00       	nop
      38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
      3e:	00 00       	nop
      40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
      42:	00 00       	nop
      44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
      46:	00 00       	nop
      48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
      4e:	00 00       	nop
      50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
      52:	00 00       	nop
      54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
      56:	00 00       	nop
      58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c6       	rjmp	.+3268   	; 0xd22 <__vector_23>
      5e:	00 00       	nop
      60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
      62:	00 00       	nop
      64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
      66:	00 00       	nop
      68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
      6e:	00 00       	nop
      70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d 02       	muls	r18, r29
      76:	5b 02       	muls	r21, r27
      78:	dd 01       	movw	r26, r26
      7a:	5b 02       	muls	r21, r27
      7c:	dd 01       	movw	r26, r26
      7e:	a0 02       	muls	r26, r16
      80:	bc 02       	muls	r27, r28
      82:	dd 01       	movw	r26, r26
      84:	09 03       	fmul	r16, r17
      86:	28 03       	fmul	r18, r16

00000088 <__trampolines_end>:
      88:	09 02       	muls	r16, r25
      8a:	3e 00       	.word	0x003e	; ????
      8c:	02 01       	movw	r0, r4
      8e:	00 c0       	rjmp	.+0      	; 0x90 <__trampolines_end+0x8>
      90:	32 09       	sbc	r19, r2
      92:	04 00       	.word	0x0004	; ????
      94:	00 01       	movw	r0, r0
      96:	02 02       	muls	r16, r18
      98:	01 00       	.word	0x0001	; ????
      9a:	05 24       	eor	r0, r5
      9c:	00 01       	movw	r0, r0
      9e:	10 04       	cpc	r1, r0
      a0:	24 02       	muls	r18, r20
      a2:	06 05       	cpc	r16, r6
      a4:	24 06       	cpc	r2, r20
      a6:	00 01       	movw	r0, r0
      a8:	07 05       	cpc	r16, r7
      aa:	82 03       	fmuls	r16, r18
      ac:	08 00       	.word	0x0008	; ????
      ae:	ff 09       	sbc	r31, r15
      b0:	04 01       	movw	r0, r8
      b2:	00 02       	muls	r16, r16
      b4:	0a 00       	.word	0x000a	; ????
      b6:	00 00       	nop
      b8:	07 05       	cpc	r16, r7
      ba:	04 02       	muls	r16, r20
      bc:	18 00       	.word	0x0018	; ????
      be:	01 07       	cpc	r16, r17
      c0:	05 83       	std	Z+5, r16	; 0x05
      c2:	02 40       	sbci	r16, 0x02	; 2
      c4:	00 01       	movw	r0, r0

000000c6 <DeviceDescriptor>:
      c6:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      d6:	dc 01                                               ..

000000d8 <ProductString>:
      d8:	18 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
      e8:	20 00 55 00 6e 00 6f 00 00 00                        .U.n.o...

000000f2 <ManufacturerString>:
      f2:	32 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     2.A.r.d.u.i.n.o.
     102:	20 00 28 00 77 00 77 00 77 00 2e 00 61 00 72 00      .(.w.w.w...a.r.
     112:	64 00 75 00 69 00 6e 00 6f 00 2e 00 63 00 63 00     d.u.i.n.o...c.c.
     122:	29 00 00 00                                         )...

00000126 <LanguageString>:
     126:	04 03 09 04                                         ....

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d2 e0       	ldi	r29, 0x02	; 2
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
     136:	11 e0       	ldi	r17, 0x01	; 1
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	e8 eb       	ldi	r30, 0xB8	; 184
     13e:	f2 e1       	ldi	r31, 0x12	; 18
     140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x10>
     142:	05 90       	lpm	r0, Z+
     144:	0d 92       	st	X+, r0
     146:	a6 31       	cpi	r26, 0x16	; 22
     148:	b1 07       	cpc	r27, r17
     14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0xc>

0000014c <__do_clear_bss>:
     14c:	12 e0       	ldi	r17, 0x02	; 2
     14e:	a6 e1       	ldi	r26, 0x16	; 22
     150:	b1 e0       	ldi	r27, 0x01	; 1
     152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
     154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
     156:	aa 3a       	cpi	r26, 0xAA	; 170
     158:	b1 07       	cpc	r27, r17
     15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
     15c:	33 d7       	rcall	.+3686   	; 0xfc4 <main>
     15e:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <_exit>

00000162 <__bad_interrupt>:
     162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
     164:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     166:	20 91 1d 01 	lds	r18, 0x011D
     16a:	30 91 1e 01 	lds	r19, 0x011E
     16e:	26 17       	cp	r18, r22
     170:	37 07       	cpc	r19, r23
     172:	58 f0       	brcs	.+22     	; 0x18a <Endpoint_Write_Control_Stream_LE+0x26>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     174:	61 15       	cp	r22, r1
     176:	71 05       	cpc	r23, r1
     178:	09 f0       	breq	.+2      	; 0x17c <Endpoint_Write_Control_Stream_LE+0x18>
     17a:	42 c0       	rjmp	.+132    	; 0x200 <Endpoint_Write_Control_Stream_LE+0x9c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     17c:	80 91 e8 00 	lds	r24, 0x00E8
     180:	8e 77       	andi	r24, 0x7E	; 126
     182:	80 93 e8 00 	sts	0x00E8, r24
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	21 15       	cp	r18, r1
     18e:	31 05       	cpc	r19, r1
     190:	29 f5       	brne	.+74     	; 0x1dc <Endpoint_Write_Control_Stream_LE+0x78>
     192:	81 11       	cpse	r24, r1
     194:	0f c0       	rjmp	.+30     	; 0x1b4 <Endpoint_Write_Control_Stream_LE+0x50>
     196:	2e c0       	rjmp	.+92     	; 0x1f4 <Endpoint_Write_Control_Stream_LE+0x90>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     198:	90 91 e8 00 	lds	r25, 0x00E8
	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     19c:	92 fd       	sbrc	r25, 2
     19e:	2a c0       	rjmp	.+84     	; 0x1f4 <Endpoint_Write_Control_Stream_LE+0x90>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     1a0:	9e b3       	in	r25, 0x1e	; 30
     1a2:	99 23       	and	r25, r25
     1a4:	79 f1       	breq	.+94     	; 0x204 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     1a6:	9e b3       	in	r25, 0x1e	; 30
     1a8:	95 30       	cpi	r25, 0x05	; 5
     1aa:	71 f1       	breq	.+92     	; 0x208 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     1ac:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     1b0:	90 fd       	sbrc	r25, 0
     1b2:	af c0       	rjmp	.+350    	; 0x312 <__stack+0x13>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     1b4:	90 91 e8 00 	lds	r25, 0x00E8
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     1b8:	93 ff       	sbrs	r25, 3
     1ba:	ee cf       	rjmp	.-36     	; 0x198 <Endpoint_Write_Control_Stream_LE+0x34>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     1c0:	90 91 e8 00 	lds	r25, 0x00E8

		if (Endpoint_IsOUTReceived())
     1c4:	92 fd       	sbrc	r25, 2
     1c6:	16 c0       	rjmp	.+44     	; 0x1f4 <Endpoint_Write_Control_Stream_LE+0x90>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     1c8:	9e b3       	in	r25, 0x1e	; 30
     1ca:	99 23       	and	r25, r25
     1cc:	d9 f0       	breq	.+54     	; 0x204 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     1ce:	9e b3       	in	r25, 0x1e	; 30
     1d0:	95 30       	cpi	r25, 0x05	; 5
     1d2:	d1 f0       	breq	.+52     	; 0x208 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     1d4:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     1d8:	90 fd       	sbrc	r25, 0
     1da:	18 c0       	rjmp	.+48     	; 0x20c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     1dc:	90 91 e8 00 	lds	r25, 0x00E8
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     1e0:	93 ff       	sbrs	r25, 3
     1e2:	ee cf       	rjmp	.-36     	; 0x1c0 <Endpoint_Write_Control_Stream_LE+0x5c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     1e8:	8e b3       	in	r24, 0x1e	; 30
     1ea:	88 23       	and	r24, r24
     1ec:	59 f0       	breq	.+22     	; 0x204 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     1ee:	8e b3       	in	r24, 0x1e	; 30
     1f0:	85 30       	cpi	r24, 0x05	; 5
     1f2:	51 f0       	breq	.+20     	; 0x208 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     1f4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     1f8:	82 ff       	sbrs	r24, 2
     1fa:	f6 cf       	rjmp	.-20     	; 0x1e8 <Endpoint_Write_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	08 95       	ret
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     200:	9b 01       	movw	r18, r22
     202:	c3 cf       	rjmp	.-122    	; 0x18a <Endpoint_Write_Control_Stream_LE+0x26>

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	08 95       	ret
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     20c:	90 91 f2 00 	lds	r25, 0x00F2
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     210:	98 30       	cpi	r25, 0x08	; 8
     212:	08 f0       	brcs	.+2      	; 0x216 <Endpoint_Write_Control_Stream_LE+0xb2>
     214:	80 c0       	rjmp	.+256    	; 0x316 <__stack+0x17>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     216:	df 01       	movw	r26, r30
     218:	11 96       	adiw	r26, 0x01	; 1
     21a:	80 81       	ld	r24, Z
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     21c:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     220:	b9 01       	movw	r22, r18
     222:	61 50       	subi	r22, 0x01	; 1
     224:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     226:	41 e0       	ldi	r20, 0x01	; 1
     228:	49 0f       	add	r20, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     22a:	61 15       	cp	r22, r1
     22c:	71 05       	cpc	r23, r1
     22e:	09 f4       	brne	.+2      	; 0x232 <Endpoint_Write_Control_Stream_LE+0xce>
     230:	7b c0       	rjmp	.+246    	; 0x328 <__stack+0x29>
     232:	48 30       	cpi	r20, 0x08	; 8
     234:	09 f4       	brne	.+2      	; 0x238 <Endpoint_Write_Control_Stream_LE+0xd4>
     236:	74 c0       	rjmp	.+232    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     238:	df 01       	movw	r26, r30
     23a:	12 96       	adiw	r26, 0x02	; 2
     23c:	81 81       	ldd	r24, Z+1	; 0x01
     23e:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     242:	b9 01       	movw	r22, r18
     244:	62 50       	subi	r22, 0x02	; 2
     246:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     248:	42 e0       	ldi	r20, 0x02	; 2
     24a:	49 0f       	add	r20, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     24c:	61 15       	cp	r22, r1
     24e:	71 05       	cpc	r23, r1
     250:	09 f4       	brne	.+2      	; 0x254 <Endpoint_Write_Control_Stream_LE+0xf0>
     252:	6a c0       	rjmp	.+212    	; 0x328 <__stack+0x29>
     254:	48 30       	cpi	r20, 0x08	; 8
     256:	09 f4       	brne	.+2      	; 0x25a <Endpoint_Write_Control_Stream_LE+0xf6>
     258:	63 c0       	rjmp	.+198    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     25a:	df 01       	movw	r26, r30
     25c:	13 96       	adiw	r26, 0x03	; 3
     25e:	82 81       	ldd	r24, Z+2	; 0x02
     260:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     264:	b9 01       	movw	r22, r18
     266:	63 50       	subi	r22, 0x03	; 3
     268:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     26a:	43 e0       	ldi	r20, 0x03	; 3
     26c:	49 0f       	add	r20, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     26e:	61 15       	cp	r22, r1
     270:	71 05       	cpc	r23, r1
     272:	09 f4       	brne	.+2      	; 0x276 <Endpoint_Write_Control_Stream_LE+0x112>
     274:	59 c0       	rjmp	.+178    	; 0x328 <__stack+0x29>
     276:	48 30       	cpi	r20, 0x08	; 8
     278:	09 f4       	brne	.+2      	; 0x27c <Endpoint_Write_Control_Stream_LE+0x118>
     27a:	52 c0       	rjmp	.+164    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     27c:	df 01       	movw	r26, r30
     27e:	14 96       	adiw	r26, 0x04	; 4
     280:	83 81       	ldd	r24, Z+3	; 0x03
     282:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     286:	b9 01       	movw	r22, r18
     288:	64 50       	subi	r22, 0x04	; 4
     28a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     28c:	44 e0       	ldi	r20, 0x04	; 4
     28e:	49 0f       	add	r20, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     290:	61 15       	cp	r22, r1
     292:	71 05       	cpc	r23, r1
     294:	09 f4       	brne	.+2      	; 0x298 <Endpoint_Write_Control_Stream_LE+0x134>
     296:	48 c0       	rjmp	.+144    	; 0x328 <__stack+0x29>
     298:	48 30       	cpi	r20, 0x08	; 8
     29a:	09 f4       	brne	.+2      	; 0x29e <Endpoint_Write_Control_Stream_LE+0x13a>
     29c:	41 c0       	rjmp	.+130    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     29e:	df 01       	movw	r26, r30
     2a0:	15 96       	adiw	r26, 0x05	; 5
     2a2:	84 81       	ldd	r24, Z+4	; 0x04
     2a4:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     2a8:	b9 01       	movw	r22, r18
     2aa:	65 50       	subi	r22, 0x05	; 5
     2ac:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     2ae:	45 e0       	ldi	r20, 0x05	; 5
     2b0:	49 0f       	add	r20, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     2b2:	61 15       	cp	r22, r1
     2b4:	71 05       	cpc	r23, r1
     2b6:	c1 f1       	breq	.+112    	; 0x328 <__stack+0x29>
     2b8:	48 30       	cpi	r20, 0x08	; 8
     2ba:	91 f1       	breq	.+100    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     2bc:	df 01       	movw	r26, r30
     2be:	16 96       	adiw	r26, 0x06	; 6
     2c0:	85 81       	ldd	r24, Z+5	; 0x05
     2c2:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     2c6:	b9 01       	movw	r22, r18
     2c8:	66 50       	subi	r22, 0x06	; 6
     2ca:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     2cc:	46 e0       	ldi	r20, 0x06	; 6
     2ce:	49 0f       	add	r20, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     2d0:	61 15       	cp	r22, r1
     2d2:	71 05       	cpc	r23, r1
     2d4:	49 f1       	breq	.+82     	; 0x328 <__stack+0x29>
     2d6:	48 30       	cpi	r20, 0x08	; 8
     2d8:	19 f1       	breq	.+70     	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     2da:	bf 01       	movw	r22, r30
     2dc:	69 5f       	subi	r22, 0xF9	; 249
     2de:	7f 4f       	sbci	r23, 0xFF	; 255
     2e0:	86 81       	ldd	r24, Z+6	; 0x06
     2e2:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     2e6:	a9 01       	movw	r20, r18
     2e8:	47 50       	subi	r20, 0x07	; 7
     2ea:	51 09       	sbc	r21, r1
				BytesInEndpoint++;
     2ec:	99 5f       	subi	r25, 0xF9	; 249
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     2ee:	41 15       	cp	r20, r1
     2f0:	51 05       	cpc	r21, r1
     2f2:	31 f1       	breq	.+76     	; 0x340 <__stack+0x41>
     2f4:	97 30       	cpi	r25, 0x07	; 7
     2f6:	01 f5       	brne	.+64     	; 0x338 <__stack+0x39>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     2f8:	87 81       	ldd	r24, Z+7	; 0x07
     2fa:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     2fe:	28 50       	subi	r18, 0x08	; 8
     300:	31 09       	sbc	r19, r1
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     302:	38 96       	adiw	r30, 0x08	; 8
				Length--;
     304:	81 e0       	ldi	r24, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     306:	90 91 e8 00 	lds	r25, 0x00E8
     30a:	9e 77       	andi	r25, 0x7E	; 126
     30c:	90 93 e8 00 	sts	0x00E8, r25
     310:	3d cf       	rjmp	.-390    	; 0x18c <Endpoint_Write_Control_Stream_LE+0x28>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     312:	90 91 f2 00 	lds	r25, 0x00F2
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	98 30       	cpi	r25, 0x08	; 8
     31a:	a9 f3       	breq	.-22     	; 0x306 <__stack+0x7>
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	f3 cf       	rjmp	.-26     	; 0x306 <__stack+0x7>
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     320:	fd 01       	movw	r30, r26
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     322:	9b 01       	movw	r18, r22
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	ef cf       	rjmp	.-34     	; 0x306 <__stack+0x7>
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	48 30       	cpi	r20, 0x08	; 8
     32c:	09 f0       	breq	.+2      	; 0x330 <__stack+0x31>
     32e:	80 e0       	ldi	r24, 0x00	; 0
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     330:	fd 01       	movw	r30, r26
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	e7 cf       	rjmp	.-50     	; 0x306 <__stack+0x7>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     338:	fb 01       	movw	r30, r22
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     33a:	9a 01       	movw	r18, r20
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	e3 cf       	rjmp	.-58     	; 0x306 <__stack+0x7>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	98 30       	cpi	r25, 0x08	; 8
     344:	09 f0       	breq	.+2      	; 0x348 <__stack+0x49>
     346:	80 e0       	ldi	r24, 0x00	; 0
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     348:	fb 01       	movw	r30, r22
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	db cf       	rjmp	.-74     	; 0x306 <__stack+0x7>

00000350 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	aa 97       	sbiw	r28, 0x2a	; 42
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     36e:	30 91 f1 00 	lds	r19, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
     372:	30 93 17 01 	sts	0x0117, r19
     376:	20 91 f1 00 	lds	r18, 0x00F1
     37a:	20 93 18 01 	sts	0x0118, r18
     37e:	80 91 f1 00 	lds	r24, 0x00F1
     382:	80 93 19 01 	sts	0x0119, r24
     386:	80 91 f1 00 	lds	r24, 0x00F1
     38a:	80 93 1a 01 	sts	0x011A, r24
     38e:	80 91 f1 00 	lds	r24, 0x00F1
     392:	80 93 1b 01 	sts	0x011B, r24
     396:	80 91 f1 00 	lds	r24, 0x00F1
     39a:	80 93 1c 01 	sts	0x011C, r24
     39e:	80 91 f1 00 	lds	r24, 0x00F1
     3a2:	80 93 1d 01 	sts	0x011D, r24
     3a6:	80 91 f1 00 	lds	r24, 0x00F1
     3aa:	80 93 1e 01 	sts	0x011E, r24
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
	
	switch (USB_ControlRequest.bRequest)
     3ae:	82 2f       	mov	r24, r18
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	8a 30       	cpi	r24, 0x0A	; 10
     3b4:	91 05       	cpc	r25, r1
     3b6:	08 f4       	brcc	.+2      	; 0x3ba <USB_Device_ProcessControlRequest+0x6a>
     3b8:	4c c0       	rjmp	.+152    	; 0x452 <USB_Device_ProcessControlRequest+0x102>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     3ba:	80 91 e8 00 	lds	r24, 0x00E8

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     3be:	83 ff       	sbrs	r24, 3
     3c0:	2c c0       	rjmp	.+88     	; 0x41a <USB_Device_ProcessControlRequest+0xca>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     3c2:	80 91 00 01 	lds	r24, 0x0100
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	40 91 1b 01 	lds	r20, 0x011B
     3cc:	50 91 1c 01 	lds	r21, 0x011C
     3d0:	48 17       	cp	r20, r24
     3d2:	59 07       	cpc	r21, r25
     3d4:	11 f5       	brne	.+68     	; 0x41a <USB_Device_ProcessControlRequest+0xca>
	  return;

	switch (USB_ControlRequest.bRequest)
     3d6:	21 32       	cpi	r18, 0x21	; 33
     3d8:	09 f4       	brne	.+2      	; 0x3dc <USB_Device_ProcessControlRequest+0x8c>
     3da:	4c c3       	rjmp	.+1688   	; 0xa74 <USB_Device_ProcessControlRequest+0x724>
     3dc:	08 f4       	brcc	.+2      	; 0x3e0 <USB_Device_ProcessControlRequest+0x90>
     3de:	2b c2       	rjmp	.+1110   	; 0x836 <USB_Device_ProcessControlRequest+0x4e6>
     3e0:	22 32       	cpi	r18, 0x22	; 34
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <USB_Device_ProcessControlRequest+0x96>
     3e4:	21 c3       	rjmp	.+1602   	; 0xa28 <USB_Device_ProcessControlRequest+0x6d8>
     3e6:	23 32       	cpi	r18, 0x23	; 35
     3e8:	c1 f4       	brne	.+48     	; 0x41a <USB_Device_ProcessControlRequest+0xca>
				Endpoint_ClearStatusStage();
			}
	
			break;
		case REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     3ea:	31 32       	cpi	r19, 0x21	; 33
     3ec:	b1 f4       	brne	.+44     	; 0x41a <USB_Device_ProcessControlRequest+0xca>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3ee:	80 91 e8 00 	lds	r24, 0x00E8
     3f2:	87 7f       	andi	r24, 0xF7	; 247
     3f4:	80 93 e8 00 	sts	0x00E8, r24
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     3f8:	80 91 17 01 	lds	r24, 0x0117
     3fc:	87 ff       	sbrs	r24, 7
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <USB_Device_ProcessControlRequest+0xb8>
     400:	b2 c2       	rjmp	.+1380   	; 0x966 <USB_Device_ProcessControlRequest+0x616>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     402:	8e b3       	in	r24, 0x1e	; 30
     404:	88 23       	and	r24, r24
     406:	49 f0       	breq	.+18     	; 0x41a <USB_Device_ProcessControlRequest+0xca>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     408:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     40c:	80 ff       	sbrs	r24, 0
     40e:	f9 cf       	rjmp	.-14     	; 0x402 <USB_Device_ProcessControlRequest+0xb2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     410:	80 91 e8 00 	lds	r24, 0x00E8
     414:	8e 77       	andi	r24, 0x7E	; 126
     416:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     41a:	80 91 e8 00 	lds	r24, 0x00E8
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
     41e:	83 ff       	sbrs	r24, 3
     420:	0a c0       	rjmp	.+20     	; 0x436 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     422:	80 91 eb 00 	lds	r24, 0x00EB
     426:	80 62       	ori	r24, 0x20	; 32
     428:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     42c:	80 91 e8 00 	lds	r24, 0x00E8
     430:	87 7f       	andi	r24, 0xF7	; 247
     432:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
     436:	aa 96       	adiw	r28, 0x2a	; 42
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	cf 90       	pop	r12
     450:	08 95       	ret
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
	
	switch (USB_ControlRequest.bRequest)
     452:	fc 01       	movw	r30, r24
     454:	e6 5c       	subi	r30, 0xC6	; 198
     456:	ff 4f       	sbci	r31, 0xFF	; 255
     458:	27 c7       	rjmp	.+3662   	; 0x12a8 <__tablejump2__>
     45a:	30 38       	cpi	r19, 0x80	; 128
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     45c:	09 f4       	brne	.+2      	; 0x460 <USB_Device_ProcessControlRequest+0x110>
     45e:	db c2       	rjmp	.+1462   	; 0xa16 <USB_Device_ProcessControlRequest+0x6c6>
     460:	32 38       	cpi	r19, 0x82	; 130
     462:	09 f0       	breq	.+2      	; 0x466 <USB_Device_ProcessControlRequest+0x116>
     464:	aa cf       	rjmp	.-172    	; 0x3ba <USB_Device_ProcessControlRequest+0x6a>
     466:	80 91 1b 01 	lds	r24, 0x011B
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     46a:	87 70       	andi	r24, 0x07	; 7
     46c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     470:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     474:	95 fb       	bst	r25, 5
     476:	99 27       	eor	r25, r25
     478:	90 f9       	bld	r25, 0
     47a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     47e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     482:	87 7f       	andi	r24, 0xF7	; 247
     484:	80 93 e8 00 	sts	0x00E8, r24
     488:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
     48c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
     490:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     494:	8e 77       	andi	r24, 0x7E	; 126
     496:	80 93 e8 00 	sts	0x00E8, r24
     49a:	80 91 17 01 	lds	r24, 0x0117
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     49e:	87 ff       	sbrs	r24, 7
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <USB_Device_ProcessControlRequest+0x15c>
     4a2:	ab c1       	rjmp	.+854    	; 0x7fa <USB_Device_ProcessControlRequest+0x4aa>
     4a4:	8e b3       	in	r24, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     4a6:	88 23       	and	r24, r24
     4a8:	09 f4       	brne	.+2      	; 0x4ac <USB_Device_ProcessControlRequest+0x15c>
     4aa:	b7 cf       	rjmp	.-146    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     4ac:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     4b0:	80 ff       	sbrs	r24, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     4b2:	f8 cf       	rjmp	.-16     	; 0x4a4 <USB_Device_ProcessControlRequest+0x154>
     4b4:	ad cf       	rjmp	.-166    	; 0x410 <USB_Device_ProcessControlRequest+0xc0>
     4b6:	33 23       	and	r19, r19
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     4b8:	09 f4       	brne	.+2      	; 0x4bc <USB_Device_ProcessControlRequest+0x16c>
     4ba:	a1 c2       	rjmp	.+1346   	; 0x9fe <USB_Device_ProcessControlRequest+0x6ae>
     4bc:	32 30       	cpi	r19, 0x02	; 2
     4be:	09 f0       	breq	.+2      	; 0x4c2 <USB_Device_ProcessControlRequest+0x172>
     4c0:	7c cf       	rjmp	.-264    	; 0x3ba <USB_Device_ProcessControlRequest+0x6a>
     4c2:	80 91 19 01 	lds	r24, 0x0119
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
     4c6:	81 11       	cpse	r24, r1
     4c8:	26 c0       	rjmp	.+76     	; 0x516 <USB_Device_ProcessControlRequest+0x1c6>
     4ca:	80 91 1b 01 	lds	r24, 0x011B
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     4ce:	87 70       	andi	r24, 0x07	; 7
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <USB_Device_ProcessControlRequest+0x184>
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
     4d2:	a3 cf       	rjmp	.-186    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     4d4:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4d8:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     4dc:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
     4de:	9d cf       	rjmp	.-198    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     4e0:	90 91 18 01 	lds	r25, 0x0118
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
     4e4:	93 30       	cpi	r25, 0x03	; 3
     4e6:	09 f4       	brne	.+2      	; 0x4ea <USB_Device_ProcessControlRequest+0x19a>
     4e8:	32 c3       	rjmp	.+1636   	; 0xb4e <USB_Device_ProcessControlRequest+0x7fe>
     4ea:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     4ee:	90 61       	ori	r25, 0x10	; 16
     4f0:	90 93 eb 00 	sts	0x00EB, r25
     4f4:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	a9 01       	movw	r20, r18
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <USB_Device_ProcessControlRequest+0x1b0>
     4fc:	44 0f       	add	r20, r20
     4fe:	55 1f       	adc	r21, r21
     500:	8a 95       	dec	r24
     502:	e2 f7       	brpl	.-8      	; 0x4fc <USB_Device_ProcessControlRequest+0x1ac>
     504:	40 93 ea 00 	sts	0x00EA, r20
     508:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     50c:	80 91 eb 00 	lds	r24, 0x00EB
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     510:	88 60       	ori	r24, 0x08	; 8
     512:	80 93 eb 00 	sts	0x00EB, r24
     516:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     51a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     51e:	87 7f       	andi	r24, 0xF7	; 247
     520:	80 93 e8 00 	sts	0x00E8, r24
     524:	80 91 17 01 	lds	r24, 0x0117
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     528:	87 ff       	sbrs	r24, 7
     52a:	05 c0       	rjmp	.+10     	; 0x536 <USB_Device_ProcessControlRequest+0x1e6>
     52c:	6f c1       	rjmp	.+734    	; 0x80c <USB_Device_ProcessControlRequest+0x4bc>
     52e:	8e b3       	in	r24, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     530:	88 23       	and	r24, r24
     532:	09 f4       	brne	.+2      	; 0x536 <USB_Device_ProcessControlRequest+0x1e6>
     534:	72 cf       	rjmp	.-284    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     536:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     53a:	80 ff       	sbrs	r24, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     53c:	f8 cf       	rjmp	.-16     	; 0x52e <USB_Device_ProcessControlRequest+0x1de>
     53e:	68 cf       	rjmp	.-304    	; 0x410 <USB_Device_ProcessControlRequest+0xc0>
     540:	31 11       	cpse	r19, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     542:	3b cf       	rjmp	.-394    	; 0x3ba <USB_Device_ProcessControlRequest+0x6a>
     544:	90 91 19 01 	lds	r25, 0x0119
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     548:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     54c:	87 7f       	andi	r24, 0xF7	; 247
     54e:	80 93 e8 00 	sts	0x00E8, r24
     552:	80 91 17 01 	lds	r24, 0x0117
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     556:	87 ff       	sbrs	r24, 7
     558:	05 c0       	rjmp	.+10     	; 0x564 <USB_Device_ProcessControlRequest+0x214>
     55a:	41 c1       	rjmp	.+642    	; 0x7de <USB_Device_ProcessControlRequest+0x48e>
     55c:	8e b3       	in	r24, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     55e:	88 23       	and	r24, r24
     560:	09 f4       	brne	.+2      	; 0x564 <USB_Device_ProcessControlRequest+0x214>
     562:	2c c1       	rjmp	.+600    	; 0x7bc <USB_Device_ProcessControlRequest+0x46c>
     564:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     568:	80 ff       	sbrs	r24, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     56a:	f8 cf       	rjmp	.-16     	; 0x55c <USB_Device_ProcessControlRequest+0x20c>
     56c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     570:	8e 77       	andi	r24, 0x7E	; 126
     572:	80 93 e8 00 	sts	0x00E8, r24
     576:	22 c1       	rjmp	.+580    	; 0x7bc <USB_Device_ProcessControlRequest+0x46c>
     578:	80 e8       	ldi	r24, 0x80	; 128
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     57a:	83 0f       	add	r24, r19
     57c:	82 30       	cpi	r24, 0x02	; 2
     57e:	08 f0       	brcs	.+2      	; 0x582 <USB_Device_ProcessControlRequest+0x232>
     580:	1c cf       	rjmp	.-456    	; 0x3ba <USB_Device_ProcessControlRequest+0x6a>
     582:	80 91 19 01 	lds	r24, 0x0119
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t  DescriptorAddressSpace;
	#endif
	
	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     586:	90 91 1a 01 	lds	r25, 0x011A
     58a:	8c 3d       	cpi	r24, 0xDC	; 220
     58c:	53 e0       	ldi	r21, 0x03	; 3
     58e:	95 07       	cpc	r25, r21
     590:	09 f4       	brne	.+2      	; 0x594 <USB_Device_ProcessControlRequest+0x244>
     592:	85 c2       	rjmp	.+1290   	; 0xa9e <USB_Device_ProcessControlRequest+0x74e>
     594:	29 2f       	mov	r18, r25
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     596:	33 27       	eor	r19, r19
     598:	22 30       	cpi	r18, 0x02	; 2
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     59a:	31 05       	cpc	r19, r1
     59c:	09 f4       	brne	.+2      	; 0x5a0 <USB_Device_ProcessControlRequest+0x250>
     59e:	ca c2       	rjmp	.+1428   	; 0xb34 <USB_Device_ProcessControlRequest+0x7e4>
     5a0:	23 30       	cpi	r18, 0x03	; 3
     5a2:	31 05       	cpc	r19, r1
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <USB_Device_ProcessControlRequest+0x258>
     5a6:	b2 c2       	rjmp	.+1380   	; 0xb0c <USB_Device_ProcessControlRequest+0x7bc>
     5a8:	21 30       	cpi	r18, 0x01	; 1
     5aa:	31 05       	cpc	r19, r1
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <USB_Device_ProcessControlRequest+0x260>
     5ae:	35 cf       	rjmp	.-406    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     5b0:	22 e1       	ldi	r18, 0x12	; 18
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	66 ec       	ldi	r22, 0xC6	; 198
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     5bc:	87 7f       	andi	r24, 0xF7	; 247
     5be:	80 93 e8 00 	sts	0x00E8, r24
     5c2:	80 91 1d 01 	lds	r24, 0x011D
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     5c6:	90 91 1e 01 	lds	r25, 0x011E
     5ca:	82 17       	cp	r24, r18
     5cc:	93 07       	cpc	r25, r19
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <USB_Device_ProcessControlRequest+0x282>
     5d0:	9c 01       	movw	r18, r24
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	21 15       	cp	r18, r1
     5d6:	31 05       	cpc	r19, r1
     5d8:	09 f0       	breq	.+2      	; 0x5dc <USB_Device_ProcessControlRequest+0x28c>
     5da:	ff c1       	rjmp	.+1022   	; 0x9da <USB_Device_ProcessControlRequest+0x68a>
     5dc:	81 11       	cpse	r24, r1
     5de:	0f c0       	rjmp	.+30     	; 0x5fe <USB_Device_ProcessControlRequest+0x2ae>
     5e0:	09 c2       	rjmp	.+1042   	; 0x9f4 <USB_Device_ProcessControlRequest+0x6a4>
     5e2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5e6:	82 fd       	sbrc	r24, 2
	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     5e8:	05 c2       	rjmp	.+1034   	; 0x9f4 <USB_Device_ProcessControlRequest+0x6a4>
     5ea:	8e b3       	in	r24, 0x1e	; 30
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     5ec:	88 23       	and	r24, r24
     5ee:	59 f0       	breq	.+22     	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     5f0:	8e b3       	in	r24, 0x1e	; 30
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     5f2:	85 30       	cpi	r24, 0x05	; 5
     5f4:	41 f0       	breq	.+16     	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     5f6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     5fa:	80 fd       	sbrc	r24, 0
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     5fc:	cf c2       	rjmp	.+1438   	; 0xb9c <USB_Device_ProcessControlRequest+0x84c>
     5fe:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     602:	83 ff       	sbrs	r24, 3
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     604:	ee cf       	rjmp	.-36     	; 0x5e2 <USB_Device_ProcessControlRequest+0x292>
     606:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     60a:	8b 77       	andi	r24, 0x7B	; 123
     60c:	80 93 e8 00 	sts	0x00E8, r24
     610:	04 cf       	rjmp	.-504    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     612:	30 38       	cpi	r19, 0x80	; 128
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     614:	09 f0       	breq	.+2      	; 0x618 <USB_Device_ProcessControlRequest+0x2c8>
     616:	d1 ce       	rjmp	.-606    	; 0x3ba <USB_Device_ProcessControlRequest+0x6a>
     618:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     61c:	87 7f       	andi	r24, 0xF7	; 247
     61e:	80 93 e8 00 	sts	0x00E8, r24
     622:	80 91 1f 01 	lds	r24, 0x011F

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
     626:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     62a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     62e:	8e 77       	andi	r24, 0x7E	; 126
     630:	80 93 e8 00 	sts	0x00E8, r24
     634:	80 91 17 01 	lds	r24, 0x0117
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     638:	87 ff       	sbrs	r24, 7
     63a:	05 c0       	rjmp	.+10     	; 0x646 <USB_Device_ProcessControlRequest+0x2f6>
     63c:	8b c1       	rjmp	.+790    	; 0x954 <USB_Device_ProcessControlRequest+0x604>
     63e:	8e b3       	in	r24, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     640:	88 23       	and	r24, r24
     642:	09 f4       	brne	.+2      	; 0x646 <USB_Device_ProcessControlRequest+0x2f6>
     644:	ea ce       	rjmp	.-556    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     646:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     64a:	80 ff       	sbrs	r24, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     64c:	f8 cf       	rjmp	.-16     	; 0x63e <USB_Device_ProcessControlRequest+0x2ee>
     64e:	e0 ce       	rjmp	.-576    	; 0x410 <USB_Device_ProcessControlRequest+0xc0>
     650:	31 11       	cpse	r19, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     652:	b3 ce       	rjmp	.-666    	; 0x3ba <USB_Device_ProcessControlRequest+0x6a>
     654:	80 91 19 01 	lds	r24, 0x0119
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	08 f0       	brcs	.+2      	; 0x65e <USB_Device_ProcessControlRequest+0x30e>
     65c:	de ce       	rjmp	.-580    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     65e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     662:	97 7f       	andi	r25, 0xF7	; 247
     664:	90 93 e8 00 	sts	0x00E8, r25
     668:	80 93 1f 01 	sts	0x011F, r24
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     66c:	90 91 17 01 	lds	r25, 0x0117
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     670:	97 ff       	sbrs	r25, 7
     672:	04 c0       	rjmp	.+8      	; 0x67c <USB_Device_ProcessControlRequest+0x32c>
     674:	d4 c0       	rjmp	.+424    	; 0x81e <USB_Device_ProcessControlRequest+0x4ce>
     676:	9e b3       	in	r25, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     678:	99 23       	and	r25, r25
     67a:	59 f0       	breq	.+22     	; 0x692 <USB_Device_ProcessControlRequest+0x342>
     67c:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     680:	90 ff       	sbrs	r25, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     682:	f9 cf       	rjmp	.-14     	; 0x676 <USB_Device_ProcessControlRequest+0x326>
     684:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     688:	8e 77       	andi	r24, 0x7E	; 126
     68a:	80 93 e8 00 	sts	0x00E8, r24
     68e:	80 91 1f 01 	lds	r24, 0x011F
     692:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
     694:	39 c2       	rjmp	.+1138   	; 0xb08 <USB_Device_ProcessControlRequest+0x7b8>
     696:	83 e0       	ldi	r24, 0x03	; 3
     698:	8e bb       	out	0x1e, r24	; 30
     69a:	89 e0       	ldi	r24, 0x09	; 9
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     69c:	ed e0       	ldi	r30, 0x0D	; 13
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	df 01       	movw	r26, r30
     6a2:	1d 92       	st	X+, r1
     6a4:	8a 95       	dec	r24
     6a6:	e9 f7       	brne	.-6      	; 0x6a2 <USB_Device_ProcessControlRequest+0x352>
     6a8:	40 91 02 01 	lds	r20, 0x0102

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
     6ac:	50 91 03 01 	lds	r21, 0x0103
     6b0:	80 91 04 01 	lds	r24, 0x0104
     6b4:	81 11       	cpse	r24, r1
     6b6:	45 c2       	rjmp	.+1162   	; 0xb42 <USB_Device_ProcessControlRequest+0x7f2>
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	60 91 01 01 	lds	r22, 0x0101
     6be:	49 30       	cpi	r20, 0x09	; 9
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
     6c0:	51 05       	cpc	r21, r1
     6c2:	08 f4       	brcc	.+2      	; 0x6c6 <USB_Device_ProcessControlRequest+0x376>
     6c4:	2a c3       	rjmp	.+1620   	; 0xd1a <USB_Device_ProcessControlRequest+0x9ca>
     6c6:	28 e0       	ldi	r18, 0x08	; 8
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	8f 5f       	subi	r24, 0xFF	; 255
				{
					MaskVal++;
     6ce:	22 0f       	add	r18, r18
					CheckBytes <<= 1;
     6d0:	33 1f       	adc	r19, r19
     6d2:	24 17       	cp	r18, r20
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
     6d4:	35 07       	cpc	r19, r21
     6d6:	d0 f3       	brcs	.-12     	; 0x6cc <USB_Device_ProcessControlRequest+0x37c>
     6d8:	82 95       	swap	r24
				{
					MaskVal++;
					CheckBytes <<= 1;
				}
				
				return (MaskVal << EPSIZE0);
     6da:	80 7f       	andi	r24, 0xF0	; 240
     6dc:	89 2b       	or	r24, r25
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     6de:	60 93 e9 00 	sts	0x00E9, r22
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     6e2:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     6e6:	91 60       	ori	r25, 0x01	; 1
     6e8:	90 93 eb 00 	sts	0x00EB, r25
     6ec:	10 92 ed 00 	sts	0x00ED, r1
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     6f0:	91 e8       	ldi	r25, 0x81	; 129

	UECFG0X = UECFG0XData;
     6f2:	90 93 ec 00 	sts	0x00EC, r25
     6f6:	80 93 ed 00 	sts	0x00ED, r24
	UECFG1X = UECFG1XData;
     6fa:	80 91 ee 00 	lds	r24, 0x00EE
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     6fe:	87 ff       	sbrs	r24, 7
     700:	8c ce       	rjmp	.-744    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     702:	40 91 06 01 	lds	r20, 0x0106
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
     706:	50 91 07 01 	lds	r21, 0x0107
     70a:	80 91 08 01 	lds	r24, 0x0108
     70e:	81 11       	cpse	r24, r1
     710:	16 c2       	rjmp	.+1068   	; 0xb3e <USB_Device_ProcessControlRequest+0x7ee>
     712:	92 e0       	ldi	r25, 0x02	; 2
     714:	60 91 05 01 	lds	r22, 0x0105
     718:	49 30       	cpi	r20, 0x09	; 9
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
     71a:	51 05       	cpc	r21, r1
     71c:	08 f4       	brcc	.+2      	; 0x720 <USB_Device_ProcessControlRequest+0x3d0>
     71e:	fb c2       	rjmp	.+1526   	; 0xd16 <USB_Device_ProcessControlRequest+0x9c6>
     720:	28 e0       	ldi	r18, 0x08	; 8
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	8f 5f       	subi	r24, 0xFF	; 255
				{
					MaskVal++;
     728:	22 0f       	add	r18, r18
					CheckBytes <<= 1;
     72a:	33 1f       	adc	r19, r19
     72c:	24 17       	cp	r18, r20
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
     72e:	35 07       	cpc	r19, r21
     730:	d0 f3       	brcs	.-12     	; 0x726 <USB_Device_ProcessControlRequest+0x3d6>
     732:	82 95       	swap	r24
				{
					MaskVal++;
					CheckBytes <<= 1;
				}
				
				return (MaskVal << EPSIZE0);
     734:	80 7f       	andi	r24, 0xF0	; 240
     736:	89 2b       	or	r24, r25
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     738:	60 93 e9 00 	sts	0x00E9, r22
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     73c:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     740:	91 60       	ori	r25, 0x01	; 1
     742:	90 93 eb 00 	sts	0x00EB, r25
     746:	10 92 ed 00 	sts	0x00ED, r1
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     74a:	90 e8       	ldi	r25, 0x80	; 128

	UECFG0X = UECFG0XData;
     74c:	90 93 ec 00 	sts	0x00EC, r25
     750:	80 93 ed 00 	sts	0x00ED, r24
	UECFG1X = UECFG1XData;
     754:	80 91 ee 00 	lds	r24, 0x00EE
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     758:	87 ff       	sbrs	r24, 7
     75a:	5f ce       	rjmp	.-834    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     75c:	40 91 0a 01 	lds	r20, 0x010A
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
     760:	50 91 0b 01 	lds	r21, 0x010B
     764:	80 91 0c 01 	lds	r24, 0x010C
     768:	81 11       	cpse	r24, r1
     76a:	ed c1       	rjmp	.+986    	; 0xb46 <USB_Device_ProcessControlRequest+0x7f6>
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	60 91 09 01 	lds	r22, 0x0109
     772:	49 30       	cpi	r20, 0x09	; 9
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
     774:	51 05       	cpc	r21, r1
     776:	08 f4       	brcc	.+2      	; 0x77a <USB_Device_ProcessControlRequest+0x42a>
     778:	d2 c2       	rjmp	.+1444   	; 0xd1e <USB_Device_ProcessControlRequest+0x9ce>
     77a:	28 e0       	ldi	r18, 0x08	; 8
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	8f 5f       	subi	r24, 0xFF	; 255
				{
					MaskVal++;
     782:	22 0f       	add	r18, r18
					CheckBytes <<= 1;
     784:	33 1f       	adc	r19, r19
     786:	24 17       	cp	r18, r20
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
     788:	35 07       	cpc	r19, r21
     78a:	d0 f3       	brcs	.-12     	; 0x780 <USB_Device_ProcessControlRequest+0x430>
     78c:	82 95       	swap	r24
				{
					MaskVal++;
					CheckBytes <<= 1;
				}
				
				return (MaskVal << EPSIZE0);
     78e:	80 7f       	andi	r24, 0xF0	; 240
     790:	89 2b       	or	r24, r25
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     792:	60 93 e9 00 	sts	0x00E9, r22
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     796:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     79a:	91 60       	ori	r25, 0x01	; 1
     79c:	90 93 eb 00 	sts	0x00EB, r25
     7a0:	10 92 ed 00 	sts	0x00ED, r1
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     7a4:	91 ec       	ldi	r25, 0xC1	; 193

	UECFG0X = UECFG0XData;
     7a6:	90 93 ec 00 	sts	0x00EC, r25
     7aa:	80 93 ed 00 	sts	0x00ED, r24
	UECFG1X = UECFG1XData;
     7ae:	80 91 ee 00 	lds	r24, 0x00EE
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     7b2:	33 ce       	rjmp	.-922    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     7b4:	8e b3       	in	r24, 0x1e	; 30
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     7b6:	88 23       	and	r24, r24
     7b8:	09 f4       	brne	.+2      	; 0x7bc <USB_Device_ProcessControlRequest+0x46c>
     7ba:	2f ce       	rjmp	.-930    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     7bc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     7c0:	80 ff       	sbrs	r24, 0

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
     7c2:	f8 cf       	rjmp	.-16     	; 0x7b4 <USB_Device_ProcessControlRequest+0x464>
     7c4:	89 2f       	mov	r24, r25
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     7c6:	8f 77       	andi	r24, 0x7F	; 127
     7c8:	09 f0       	breq	.+2      	; 0x7cc <USB_Device_ProcessControlRequest+0x47c>
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     7ca:	67 c1       	rjmp	.+718    	; 0xa9a <USB_Device_ProcessControlRequest+0x74a>
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	9e bb       	out	0x1e, r25	; 30
     7d0:	80 68       	ori	r24, 0x80	; 128
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
     7d2:	80 93 e3 00 	sts	0x00E3, r24
     7d6:	21 ce       	rjmp	.-958    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     7d8:	8e b3       	in	r24, 0x1e	; 30
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7da:	88 23       	and	r24, r24
     7dc:	79 f3       	breq	.-34     	; 0x7bc <USB_Device_ProcessControlRequest+0x46c>
     7de:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7e2:	82 ff       	sbrs	r24, 2

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     7e4:	f9 cf       	rjmp	.-14     	; 0x7d8 <USB_Device_ProcessControlRequest+0x488>
     7e6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7ea:	8b 77       	andi	r24, 0x7B	; 123
     7ec:	80 93 e8 00 	sts	0x00E8, r24
     7f0:	e5 cf       	rjmp	.-54     	; 0x7bc <USB_Device_ProcessControlRequest+0x46c>
     7f2:	8e b3       	in	r24, 0x1e	; 30
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7f4:	88 23       	and	r24, r24
     7f6:	09 f4       	brne	.+2      	; 0x7fa <USB_Device_ProcessControlRequest+0x4aa>
     7f8:	10 ce       	rjmp	.-992    	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     7fa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7fe:	82 ff       	sbrs	r24, 2

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     800:	f8 cf       	rjmp	.-16     	; 0x7f2 <USB_Device_ProcessControlRequest+0x4a2>
     802:	01 cf       	rjmp	.-510    	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     804:	8e b3       	in	r24, 0x1e	; 30
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     806:	88 23       	and	r24, r24
     808:	09 f4       	brne	.+2      	; 0x80c <USB_Device_ProcessControlRequest+0x4bc>
     80a:	07 ce       	rjmp	.-1010   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     80c:	80 91 e8 00 	lds	r24, 0x00E8
     810:	82 ff       	sbrs	r24, 2

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     812:	f8 cf       	rjmp	.-16     	; 0x804 <USB_Device_ProcessControlRequest+0x4b4>
     814:	f8 ce       	rjmp	.-528    	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     816:	9e b3       	in	r25, 0x1e	; 30
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     818:	99 23       	and	r25, r25
     81a:	09 f4       	brne	.+2      	; 0x81e <USB_Device_ProcessControlRequest+0x4ce>
     81c:	3a cf       	rjmp	.-396    	; 0x692 <USB_Device_ProcessControlRequest+0x342>
     81e:	90 91 e8 00 	lds	r25, 0x00E8
     822:	92 ff       	sbrs	r25, 2

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     824:	f8 cf       	rjmp	.-16     	; 0x816 <USB_Device_ProcessControlRequest+0x4c6>
     826:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     82a:	8b 77       	andi	r24, 0x7B	; 123
     82c:	80 93 e8 00 	sts	0x00E8, r24
     830:	80 91 1f 01 	lds	r24, 0x011F
     834:	2e cf       	rjmp	.-420    	; 0x692 <USB_Device_ProcessControlRequest+0x342>
     836:	20 32       	cpi	r18, 0x20	; 32
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
     838:	09 f0       	breq	.+2      	; 0x83c <USB_Device_ProcessControlRequest+0x4ec>
     83a:	ef cd       	rjmp	.-1058   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     83c:	31 32       	cpi	r19, 0x21	; 33
				Endpoint_ClearOUT();
			}
			
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     83e:	09 f0       	breq	.+2      	; 0x842 <USB_Device_ProcessControlRequest+0x4f2>
     840:	ec cd       	rjmp	.-1064   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     842:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     846:	87 7f       	andi	r24, 0xF7	; 247
     848:	80 93 e8 00 	sts	0x00E8, r24
     84c:	4f e0       	ldi	r20, 0x0F	; 15
     84e:	51 e0       	ldi	r21, 0x01	; 1
     850:	27 e0       	ldi	r18, 0x07	; 7
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	0a c0       	rjmp	.+20     	; 0x86a <USB_Device_ProcessControlRequest+0x51a>
     856:	8e b3       	in	r24, 0x1e	; 30
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
     858:	88 23       	and	r24, r24
     85a:	59 f0       	breq	.+22     	; 0x872 <USB_Device_ProcessControlRequest+0x522>
     85c:	8e b3       	in	r24, 0x1e	; 30
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     85e:	85 30       	cpi	r24, 0x05	; 5
     860:	41 f0       	breq	.+16     	; 0x872 <USB_Device_ProcessControlRequest+0x522>
     862:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     866:	82 fd       	sbrc	r24, 2
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
     868:	8d c0       	rjmp	.+282    	; 0x984 <USB_Device_ProcessControlRequest+0x634>
     86a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     86e:	83 ff       	sbrs	r24, 3
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
     870:	f2 cf       	rjmp	.-28     	; 0x856 <USB_Device_ProcessControlRequest+0x506>
     872:	80 91 14 01 	lds	r24, 0x0114
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	09 f4       	brne	.+2      	; 0x87c <USB_Device_ProcessControlRequest+0x52c>
     87a:	26 c2       	rjmp	.+1100   	; 0xcc8 <USB_Device_ProcessControlRequest+0x978>
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	09 f4       	brne	.+2      	; 0x882 <USB_Device_ProcessControlRequest+0x532>
     880:	7e c1       	rjmp	.+764    	; 0xb7e <USB_Device_ProcessControlRequest+0x82e>
     882:	66 e0       	ldi	r22, 0x06	; 6
     884:	54 e0       	ldi	r21, 0x04	; 4
     886:	12 e0       	ldi	r17, 0x02	; 2
     888:	8e e0       	ldi	r24, 0x0E	; 14
     88a:	9c e0       	ldi	r25, 0x0C	; 12
     88c:	3a e0       	ldi	r19, 0x0A	; 10
     88e:	28 e0       	ldi	r18, 0x08	; 8
     890:	40 e0       	ldi	r20, 0x00	; 0
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;
     892:	70 91 13 01 	lds	r23, 0x0113
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     896:	72 30       	cpi	r23, 0x02	; 2
     898:	09 f4       	brne	.+2      	; 0x89c <USB_Device_ProcessControlRequest+0x54c>
     89a:	6f c1       	rjmp	.+734    	; 0xb7a <USB_Device_ProcessControlRequest+0x82a>
     89c:	86 2f       	mov	r24, r22
     89e:	95 2f       	mov	r25, r21
     8a0:	24 2f       	mov	r18, r20
     8a2:	30 91 15 01 	lds	r19, 0x0115
	  ConfigMask |= (1 << USBS1);

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     8a6:	37 30       	cpi	r19, 0x07	; 7
     8a8:	09 f4       	brne	.+2      	; 0x8ac <USB_Device_ProcessControlRequest+0x55c>
     8aa:	65 c1       	rjmp	.+714    	; 0xb76 <USB_Device_ProcessControlRequest+0x826>
     8ac:	38 30       	cpi	r19, 0x08	; 8
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <USB_Device_ProcessControlRequest+0x562>
     8b0:	60 c1       	rjmp	.+704    	; 0xb72 <USB_Device_ProcessControlRequest+0x822>
     8b2:	36 30       	cpi	r19, 0x06	; 6
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <USB_Device_ProcessControlRequest+0x568>
     8b6:	12 2f       	mov	r17, r18
     8b8:	10 92 c9 00 	sts	0x00C9, r1
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     8bc:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1A = 0;
     8c0:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C = 0;
     8c4:	c0 90 0f 01 	lds	r12, 0x010F

	if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS > 115200) {
     8c8:	d0 90 10 01 	lds	r13, 0x0110
     8cc:	e0 90 11 01 	lds	r14, 0x0111
     8d0:	f0 90 12 01 	lds	r15, 0x0112
     8d4:	b1 e0       	ldi	r27, 0x01	; 1
     8d6:	cb 16       	cp	r12, r27
     8d8:	b2 ec       	ldi	r27, 0xC2	; 194
     8da:	db 06       	cpc	r13, r27
     8dc:	b1 e0       	ldi	r27, 0x01	; 1
     8de:	eb 06       	cpc	r14, r27
     8e0:	f1 04       	cpc	r15, r1
     8e2:	08 f4       	brcc	.+2      	; 0x8e6 <USB_Device_ProcessControlRequest+0x596>
     8e4:	58 c1       	rjmp	.+688    	; 0xb96 <USB_Device_ProcessControlRequest+0x846>
     8e6:	84 e0       	ldi	r24, 0x04	; 4
		/* Optimize for throughput. */
		TCCR0B = (1 << CS02);
     8e8:	85 bd       	out	0x25, r24	; 37
     8ea:	c1 14       	cp	r12, r1
		/* Optimize for response. */
		TCCR0B = (1 << CS01) | (1 << CS00);
	}

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     8ec:	e1 ee       	ldi	r30, 0xE1	; 225
     8ee:	de 06       	cpc	r13, r30
     8f0:	e1 04       	cpc	r14, r1
     8f2:	f1 04       	cpc	r15, r1
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <USB_Device_ProcessControlRequest+0x5a8>
     8f6:	4c c1       	rjmp	.+664    	; 0xb90 <USB_Device_ProcessControlRequest+0x840>
     8f8:	d7 01       	movw	r26, r14
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);	
     8fa:	c6 01       	movw	r24, r12
     8fc:	b6 95       	lsr	r27
     8fe:	a7 95       	ror	r26
     900:	97 95       	ror	r25
     902:	87 95       	ror	r24
     904:	bc 01       	movw	r22, r24
     906:	cd 01       	movw	r24, r26
     908:	60 58       	subi	r22, 0x80	; 128
     90a:	7b 47       	sbci	r23, 0x7B	; 123
     90c:	81 4e       	sbci	r24, 0xE1	; 225
     90e:	9f 4f       	sbci	r25, 0xFF	; 255
     910:	a7 01       	movw	r20, r14
     912:	96 01       	movw	r18, r12
     914:	a7 d4       	rcall	.+2382   	; 0x1264 <__udivmodsi4>
     916:	21 50       	subi	r18, 0x01	; 1
     918:	31 09       	sbc	r19, r1
		/* Optimize for response. */
		TCCR0B = (1 << CS01) | (1 << CS00);
	}

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     91a:	30 93 cd 00 	sts	0x00CD, r19
     91e:	20 93 cc 00 	sts	0x00CC, r18
     922:	10 93 ca 00 	sts	0x00CA, r17
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);	

	UCSR1C = ConfigMask;
     926:	c1 14       	cp	r12, r1
     928:	f1 ee       	ldi	r31, 0xE1	; 225
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
     92a:	df 06       	cpc	r13, r31
     92c:	e1 04       	cpc	r14, r1
     92e:	f1 04       	cpc	r15, r1
     930:	09 f4       	brne	.+2      	; 0x934 <USB_Device_ProcessControlRequest+0x5e4>
     932:	d3 c1       	rjmp	.+934    	; 0xcda <USB_Device_ProcessControlRequest+0x98a>
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	80 93 c8 00 	sts	0x00C8, r24
     93a:	88 e9       	ldi	r24, 0x98	; 152
     93c:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     940:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     944:	8e 77       	andi	r24, 0x7E	; 126
     946:	80 93 e8 00 	sts	0x00E8, r24
     94a:	67 cd       	rjmp	.-1330   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     94c:	8e b3       	in	r24, 0x1e	; 30
     94e:	88 23       	and	r24, r24
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     950:	09 f4       	brne	.+2      	; 0x954 <USB_Device_ProcessControlRequest+0x604>
     952:	63 cd       	rjmp	.-1338   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     954:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     958:	82 ff       	sbrs	r24, 2
     95a:	f8 cf       	rjmp	.-16     	; 0x94c <USB_Device_ProcessControlRequest+0x5fc>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     95c:	54 ce       	rjmp	.-856    	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     95e:	8e b3       	in	r24, 0x1e	; 30
     960:	88 23       	and	r24, r24
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     962:	09 f4       	brne	.+2      	; 0x966 <USB_Device_ProcessControlRequest+0x616>
     964:	5a cd       	rjmp	.-1356   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     966:	80 91 e8 00 	lds	r24, 0x00E8
     96a:	82 ff       	sbrs	r24, 2
     96c:	f8 cf       	rjmp	.-16     	; 0x95e <USB_Device_ProcessControlRequest+0x60e>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     96e:	4b ce       	rjmp	.-874    	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     970:	4f 5f       	subi	r20, 0xFF	; 255
     972:	5f 4f       	sbci	r21, 0xFF	; 255
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     974:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     978:	fa 01       	movw	r30, r20
     97a:	31 97       	sbiw	r30, 0x01	; 1
     97c:	80 83       	st	Z, r24
     97e:	21 50       	subi	r18, 0x01	; 1
     980:	31 09       	sbc	r19, r1
				Length--;
     982:	21 f0       	breq	.+8      	; 0x98c <USB_Device_ProcessControlRequest+0x63c>
     984:	80 91 f2 00 	lds	r24, 0x00F2
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     988:	81 11       	cpse	r24, r1
     98a:	f2 cf       	rjmp	.-28     	; 0x970 <USB_Device_ProcessControlRequest+0x620>
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     98c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     990:	8b 77       	andi	r24, 0x7B	; 123
     992:	80 93 e8 00 	sts	0x00E8, r24
     996:	21 15       	cp	r18, r1
     998:	31 05       	cpc	r19, r1
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
     99a:	09 f0       	breq	.+2      	; 0x99e <USB_Device_ProcessControlRequest+0x64e>
     99c:	66 cf       	rjmp	.-308    	; 0x86a <USB_Device_ProcessControlRequest+0x51a>
     99e:	08 c0       	rjmp	.+16     	; 0x9b0 <USB_Device_ProcessControlRequest+0x660>
     9a0:	8e b3       	in	r24, 0x1e	; 30
     9a2:	88 23       	and	r24, r24
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <USB_Device_ProcessControlRequest+0x658>
     9a6:	65 cf       	rjmp	.-310    	; 0x872 <USB_Device_ProcessControlRequest+0x522>
     9a8:	8e b3       	in	r24, 0x1e	; 30
     9aa:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <USB_Device_ProcessControlRequest+0x660>
     9ae:	61 cf       	rjmp	.-318    	; 0x872 <USB_Device_ProcessControlRequest+0x522>
     9b0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     9b4:	80 ff       	sbrs	r24, 0
     9b6:	f4 cf       	rjmp	.-24     	; 0x9a0 <USB_Device_ProcessControlRequest+0x650>
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
     9b8:	5c cf       	rjmp	.-328    	; 0x872 <USB_Device_ProcessControlRequest+0x522>
     9ba:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9be:	82 fd       	sbrc	r24, 2
     9c0:	19 c0       	rjmp	.+50     	; 0x9f4 <USB_Device_ProcessControlRequest+0x6a4>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     9c2:	8e b3       	in	r24, 0x1e	; 30
     9c4:	88 23       	and	r24, r24
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     9c6:	09 f4       	brne	.+2      	; 0x9ca <USB_Device_ProcessControlRequest+0x67a>
     9c8:	1e ce       	rjmp	.-964    	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     9ca:	8e b3       	in	r24, 0x1e	; 30
     9cc:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <USB_Device_ProcessControlRequest+0x682>
     9d0:	1a ce       	rjmp	.-972    	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     9d2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     9d6:	80 fd       	sbrc	r24, 0
     9d8:	f2 c0       	rjmp	.+484    	; 0xbbe <USB_Device_ProcessControlRequest+0x86e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     9da:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9de:	83 ff       	sbrs	r24, 3
     9e0:	ec cf       	rjmp	.-40     	; 0x9ba <USB_Device_ProcessControlRequest+0x66a>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     9e2:	11 ce       	rjmp	.-990    	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     9e4:	8e b3       	in	r24, 0x1e	; 30
     9e6:	88 23       	and	r24, r24
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     9e8:	09 f4       	brne	.+2      	; 0x9ec <USB_Device_ProcessControlRequest+0x69c>
     9ea:	0d ce       	rjmp	.-998    	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     9ec:	8e b3       	in	r24, 0x1e	; 30
     9ee:	85 30       	cpi	r24, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <USB_Device_ProcessControlRequest+0x6a4>
     9f2:	09 ce       	rjmp	.-1006   	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     9f4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9f8:	82 ff       	sbrs	r24, 2
     9fa:	f4 cf       	rjmp	.-24     	; 0x9e4 <USB_Device_ProcessControlRequest+0x694>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     9fc:	04 ce       	rjmp	.-1016   	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     9fe:	80 91 19 01 	lds	r24, 0x0119
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	09 f0       	breq	.+2      	; 0xa08 <USB_Device_ProcessControlRequest+0x6b8>
     a06:	09 cd       	rjmp	.-1518   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	23 30       	cpi	r18, 0x03	; 3
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a0c:	09 f0       	breq	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0x6c0>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	80 93 20 01 	sts	0x0120, r24
     a14:	80 cd       	rjmp	.-1280   	; 0x516 <USB_Device_ProcessControlRequest+0x1c6>
     a16:	90 91 21 01 	lds	r25, 0x0121
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     a1a:	80 91 20 01 	lds	r24, 0x0120
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
	#endif

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
			if (USB_RemoteWakeupEnabled)
     a1e:	88 23       	and	r24, r24
     a20:	09 f4       	brne	.+2      	; 0xa24 <USB_Device_ProcessControlRequest+0x6d4>
     a22:	2d cd       	rjmp	.-1446   	; 0x47e <USB_Device_ProcessControlRequest+0x12e>
     a24:	92 60       	ori	r25, 0x02	; 2
     a26:	2b cd       	rjmp	.-1450   	; 0x47e <USB_Device_ProcessControlRequest+0x12e>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a28:	31 32       	cpi	r19, 0x21	; 33
     a2a:	09 f0       	breq	.+2      	; 0xa2e <USB_Device_ProcessControlRequest+0x6de>
				Endpoint_ClearIN();
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     a2c:	f6 cc       	rjmp	.-1556   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     a2e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a32:	87 7f       	andi	r24, 0xF7	; 247
     a34:	80 93 e8 00 	sts	0x00E8, r24
     a38:	80 91 19 01 	lds	r24, 0x0119
			{				
				Endpoint_ClearSETUP();
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     a3c:	80 93 0d 01 	sts	0x010D, r24
     a40:	80 fd       	sbrc	r24, 0
     a42:	83 c0       	rjmp	.+262    	; 0xb4a <USB_Device_ProcessControlRequest+0x7fa>
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);

	if (CurrentDTRState)
     a44:	5f 9a       	sbi	0x0b, 7	; 11
     a46:	80 91 17 01 	lds	r24, 0x0117
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     a4a:	87 ff       	sbrs	r24, 7
     a4c:	05 c0       	rjmp	.+10     	; 0xa58 <USB_Device_ProcessControlRequest+0x708>
     a4e:	0d c0       	rjmp	.+26     	; 0xa6a <USB_Device_ProcessControlRequest+0x71a>
     a50:	8e b3       	in	r24, 0x1e	; 30
     a52:	88 23       	and	r24, r24
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a54:	09 f4       	brne	.+2      	; 0xa58 <USB_Device_ProcessControlRequest+0x708>
     a56:	e1 cc       	rjmp	.-1598   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     a58:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     a5c:	80 ff       	sbrs	r24, 0
     a5e:	f8 cf       	rjmp	.-16     	; 0xa50 <USB_Device_ProcessControlRequest+0x700>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     a60:	d7 cc       	rjmp	.-1618   	; 0x410 <USB_Device_ProcessControlRequest+0xc0>
     a62:	8e b3       	in	r24, 0x1e	; 30
     a64:	88 23       	and	r24, r24
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a66:	09 f4       	brne	.+2      	; 0xa6a <USB_Device_ProcessControlRequest+0x71a>
     a68:	d8 cc       	rjmp	.-1616   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     a6a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a6e:	82 ff       	sbrs	r24, 2
     a70:	f8 cf       	rjmp	.-16     	; 0xa62 <USB_Device_ProcessControlRequest+0x712>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     a72:	c9 cd       	rjmp	.-1134   	; 0x606 <USB_Device_ProcessControlRequest+0x2b6>
     a74:	31 3a       	cpi	r19, 0xA1	; 161
     a76:	09 f0       	breq	.+2      	; 0xa7a <USB_Device_ProcessControlRequest+0x72a>
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a78:	d0 cc       	rjmp	.-1632   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     a7a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a7e:	87 7f       	andi	r24, 0xF7	; 247
     a80:	80 93 e8 00 	sts	0x00E8, r24
     a84:	67 e0       	ldi	r22, 0x07	; 7
     a86:	70 e0       	ldi	r23, 0x00	; 0
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     a88:	8f e0       	ldi	r24, 0x0F	; 15
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	6b db       	rcall	.-2346   	; 0x164 <Endpoint_Write_Control_Stream_LE>
     a8e:	80 91 e8 00 	lds	r24, 0x00E8
     a92:	8b 77       	andi	r24, 0x7B	; 123
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a94:	80 93 e8 00 	sts	0x00E8, r24
     a98:	c0 cc       	rjmp	.-1664   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	98 ce       	rjmp	.-720    	; 0x7ce <USB_Device_ProcessControlRequest+0x47e>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     aa0:	8a 83       	std	Y+2, r24	; 0x02
     aa2:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		int16_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     aa4:	89 83       	std	Y+1, r24	; 0x01
     aa6:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
     aa8:	f8 94       	cli
     aaa:	de 01       	movw	r26, r28
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     aac:	13 96       	adiw	r26, 0x03	; 3
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	2e e0       	ldi	r18, 0x0E	; 14
     ab2:	31 e2       	ldi	r19, 0x21	; 33
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <USB_Device_ProcessControlRequest+0x774>
     ab6:	e9 5c       	subi	r30, 0xC9	; 201
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	ed 93       	st	X+, r30

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static char USB_Device_NibbleToASCII(uint8_t Nibble)
{
	Nibble = ((Nibble & 0x0F) + '0');
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
     abc:	fd 93       	st	X+, r31
			{
				SerialByte >>= 4;
				SigReadAddress++;
			}
			
			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
     abe:	9f 5f       	subi	r25, 0xFF	; 255
     ac0:	94 31       	cpi	r25, 0x14	; 20
     ac2:	89 f0       	breq	.+34     	; 0xae6 <USB_Device_ProcessControlRequest+0x796>
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
     ac4:	e2 2f       	mov	r30, r18
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	30 93 57 00 	sts	0x0057, r19
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     acc:	e4 91       	lpm	r30, Z
     ace:	90 ff       	sbrs	r25, 0
     ad0:	03 c0       	rjmp	.+6      	; 0xad8 <USB_Device_ProcessControlRequest+0x788>
     ad2:	e2 95       	swap	r30
			
			if (SerialCharNum & 0x01)
     ad4:	ef 70       	andi	r30, 0x0F	; 15
     ad6:	2f 5f       	subi	r18, 0xFF	; 255
			{
				SerialByte >>= 4;
     ad8:	ef 70       	andi	r30, 0x0F	; 15
     ada:	80 e3       	ldi	r24, 0x30	; 48
				SigReadAddress++;
     adc:	8e 0f       	add	r24, r30
}

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static char USB_Device_NibbleToASCII(uint8_t Nibble)
{
	Nibble = ((Nibble & 0x0F) + '0');
     ade:	8a 33       	cpi	r24, 0x3A	; 58
     ae0:	50 f7       	brcc	.-44     	; 0xab6 <USB_Device_ProcessControlRequest+0x766>
     ae2:	e8 2f       	mov	r30, r24
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
     ae4:	e9 cf       	rjmp	.-46     	; 0xab8 <USB_Device_ProcessControlRequest+0x768>
     ae6:	4f bf       	out	0x3f, r20	; 63
     ae8:	80 91 e8 00 	lds	r24, 0x00E8
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     aec:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     aee:	80 93 e8 00 	sts	0x00E8, r24
     af2:	6a e2       	ldi	r22, 0x2A	; 42
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	ce 01       	movw	r24, r28
		}
	}
	
	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	34 db       	rcall	.-2456   	; 0x164 <Endpoint_Write_Control_Stream_LE>
     afc:	80 91 e8 00 	lds	r24, 0x00E8
     b00:	8b 77       	andi	r24, 0x7B	; 123
     b02:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b06:	89 cc       	rjmp	.-1774   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     b08:	84 e0       	ldi	r24, 0x04	; 4
     b0a:	c6 cd       	rjmp	.-1140   	; 0x698 <USB_Device_ProcessControlRequest+0x348>
     b0c:	99 27       	eor	r25, r25
     b0e:	81 30       	cpi	r24, 0x01	; 1

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;

	Endpoint_ClearStatusStage();

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
     b10:	91 05       	cpc	r25, r1
     b12:	49 f1       	breq	.+82     	; 0xb66 <USB_Device_ProcessControlRequest+0x816>
     b14:	82 30       	cpi	r24, 0x02	; 2
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
     b16:	91 05       	cpc	r25, r1
     b18:	01 f1       	breq	.+64     	; 0xb5a <USB_Device_ProcessControlRequest+0x80a>
     b1a:	89 2b       	or	r24, r25
     b1c:	09 f0       	breq	.+2      	; 0xb20 <USB_Device_ProcessControlRequest+0x7d0>
     b1e:	7d cc       	rjmp	.-1798   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
     b20:	e6 e2       	ldi	r30, 0x26	; 38
     b22:	f1 e0       	ldi	r31, 0x01	; 1
     b24:	24 91       	lpm	r18, Z
     b26:	30 e0       	ldi	r19, 0x00	; 0
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     b28:	bf 01       	movw	r22, r30
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	09 f4       	brne	.+2      	; 0xb32 <USB_Device_ProcessControlRequest+0x7e2>
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
			{
				case 0x00: 
					Address = (void*)&LanguageString;
     b30:	74 cc       	rjmp	.-1816   	; 0x41a <USB_Device_ProcessControlRequest+0xca>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b32:	42 cd       	rjmp	.-1404   	; 0x5b8 <USB_Device_ProcessControlRequest+0x268>
     b34:	2e e3       	ldi	r18, 0x3E	; 62
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	68 e8       	ldi	r22, 0x88	; 136
     b3a:	70 e0       	ldi	r23, 0x00	; 0
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     b3c:	3d cd       	rjmp	.-1414   	; 0x5b8 <USB_Device_ProcessControlRequest+0x268>
     b3e:	96 e0       	ldi	r25, 0x06	; 6
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
     b40:	e9 cd       	rjmp	.-1070   	; 0x714 <USB_Device_ProcessControlRequest+0x3c4>
     b42:	96 e0       	ldi	r25, 0x06	; 6
     b44:	ba cd       	rjmp	.-1164   	; 0x6ba <USB_Device_ProcessControlRequest+0x36a>
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
     b46:	96 e0       	ldi	r25, 0x06	; 6
     b48:	12 ce       	rjmp	.-988    	; 0x76e <USB_Device_ProcessControlRequest+0x41e>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
     b4a:	5f 98       	cbi	0x0b, 7	; 11
     b4c:	7c cf       	rjmp	.-264    	; 0xa46 <USB_Device_ProcessControlRequest+0x6f6>
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
     b4e:	80 91 eb 00 	lds	r24, 0x00EB
	  AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
     b52:	80 62       	ori	r24, 0x20	; 32
     b54:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b58:	de cc       	rjmp	.-1604   	; 0x516 <USB_Device_ProcessControlRequest+0x1c6>
     b5a:	e8 ed       	ldi	r30, 0xD8	; 216
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	24 91       	lpm	r18, Z
     b60:	30 e0       	ldi	r19, 0x00	; 0
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     b62:	bf 01       	movw	r22, r30
     b64:	e2 cf       	rjmp	.-60     	; 0xb2a <USB_Device_ProcessControlRequest+0x7da>
     b66:	e2 ef       	ldi	r30, 0xF2	; 242
     b68:	f0 e0       	ldi	r31, 0x00	; 0
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
     b6a:	24 91       	lpm	r18, Z
     b6c:	30 e0       	ldi	r19, 0x00	; 0
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     b6e:	bf 01       	movw	r22, r30
     b70:	dc cf       	rjmp	.-72     	; 0xb2a <USB_Device_ProcessControlRequest+0x7da>
     b72:	18 2f       	mov	r17, r24
     b74:	a1 ce       	rjmp	.-702    	; 0x8b8 <USB_Device_ProcessControlRequest+0x568>
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
     b76:	19 2f       	mov	r17, r25
     b78:	9f ce       	rjmp	.-706    	; 0x8b8 <USB_Device_ProcessControlRequest+0x568>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     b7a:	13 2f       	mov	r17, r19
     b7c:	92 ce       	rjmp	.-732    	; 0x8a2 <USB_Device_ProcessControlRequest+0x552>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
     b7e:	66 e2       	ldi	r22, 0x26	; 38
     b80:	54 e2       	ldi	r21, 0x24	; 36
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     b82:	12 e2       	ldi	r17, 0x22	; 34
     b84:	8e e2       	ldi	r24, 0x2E	; 46
     b86:	9c e2       	ldi	r25, 0x2C	; 44
     b88:	3a e2       	ldi	r19, 0x2A	; 42
     b8a:	28 e2       	ldi	r18, 0x28	; 40
     b8c:	40 e2       	ldi	r20, 0x20	; 32
     b8e:	81 ce       	rjmp	.-766    	; 0x892 <USB_Device_ProcessControlRequest+0x542>
     b90:	20 e1       	ldi	r18, 0x10	; 16
     b92:	30 e0       	ldi	r19, 0x00	; 0
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));
			break;
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
     b94:	c2 ce       	rjmp	.-636    	; 0x91a <USB_Device_ProcessControlRequest+0x5ca>
     b96:	83 e0       	ldi	r24, 0x03	; 3
		/* Optimize for response. */
		TCCR0B = (1 << CS01) | (1 << CS00);
	}

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     b98:	85 bd       	out	0x25, r24	; 37
     b9a:	a7 ce       	rjmp	.-690    	; 0x8ea <USB_Device_ProcessControlRequest+0x59a>
     b9c:	90 91 f2 00 	lds	r25, 0x00F2
	if (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS > 115200) {
		/* Optimize for throughput. */
		TCCR0B = (1 << CS02);
	} else {
		/* Optimize for response. */
		TCCR0B = (1 << CS01) | (1 << CS00);
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	98 30       	cpi	r25, 0x08	; 8
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     ba4:	09 f0       	breq	.+2      	; 0xba8 <USB_Device_ProcessControlRequest+0x858>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ab 01       	movw	r20, r22
     bae:	90 91 e8 00 	lds	r25, 0x00E8
     bb2:	9e 77       	andi	r25, 0x7E	; 126
     bb4:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bb8:	ba 01       	movw	r22, r20
     bba:	9d 01       	movw	r18, r26
     bbc:	0b cd       	rjmp	.-1514   	; 0x5d4 <USB_Device_ProcessControlRequest+0x284>
     bbe:	90 91 f2 00 	lds	r25, 0x00F2
     bc2:	98 30       	cpi	r25, 0x08	; 8
     bc4:	08 f0       	brcs	.+2      	; 0xbc8 <USB_Device_ProcessControlRequest+0x878>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     bc6:	a0 c0       	rjmp	.+320    	; 0xd08 <USB_Device_ProcessControlRequest+0x9b8>
     bc8:	ab 01       	movw	r20, r22
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     bca:	4f 5f       	subi	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	fb 01       	movw	r30, r22
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     bd0:	84 91       	lpm	r24, Z
     bd2:	80 93 f1 00 	sts	0x00F1, r24
     bd6:	d9 01       	movw	r26, r18
     bd8:	11 97       	sbiw	r26, 0x01	; 1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     bda:	e1 e0       	ldi	r30, 0x01	; 1
     bdc:	e9 0f       	add	r30, r25
				Length--;
     bde:	10 97       	sbiw	r26, 0x00	; 0
     be0:	09 f4       	brne	.+2      	; 0xbe4 <USB_Device_ProcessControlRequest+0x894>
				BytesInEndpoint++;
     be2:	8e c0       	rjmp	.+284    	; 0xd00 <USB_Device_ProcessControlRequest+0x9b0>
     be4:	e8 30       	cpi	r30, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     be6:	09 f4       	brne	.+2      	; 0xbea <USB_Device_ProcessControlRequest+0x89a>
     be8:	89 c0       	rjmp	.+274    	; 0xcfc <USB_Device_ProcessControlRequest+0x9ac>
     bea:	7b 01       	movw	r14, r22
     bec:	f2 e0       	ldi	r31, 0x02	; 2
     bee:	ef 0e       	add	r14, r31
     bf0:	f1 1c       	adc	r15, r1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     bf2:	fa 01       	movw	r30, r20
     bf4:	44 91       	lpm	r20, Z
     bf6:	40 93 f1 00 	sts	0x00F1, r20
     bfa:	d9 01       	movw	r26, r18
     bfc:	12 97       	sbiw	r26, 0x02	; 2
     bfe:	42 e0       	ldi	r20, 0x02	; 2
     c00:	49 0f       	add	r20, r25
				Length--;
     c02:	10 97       	sbiw	r26, 0x00	; 0
     c04:	09 f4       	brne	.+2      	; 0xc08 <USB_Device_ProcessControlRequest+0x8b8>
				BytesInEndpoint++;
     c06:	74 c0       	rjmp	.+232    	; 0xcf0 <USB_Device_ProcessControlRequest+0x9a0>
     c08:	48 30       	cpi	r20, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     c0a:	09 f4       	brne	.+2      	; 0xc0e <USB_Device_ProcessControlRequest+0x8be>
     c0c:	6e c0       	rjmp	.+220    	; 0xcea <USB_Device_ProcessControlRequest+0x99a>
     c0e:	ab 01       	movw	r20, r22
     c10:	4d 5f       	subi	r20, 0xFD	; 253
     c12:	5f 4f       	sbci	r21, 0xFF	; 255
     c14:	f7 01       	movw	r30, r14
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c16:	e4 90       	lpm	r14, Z
     c18:	e0 92 f1 00 	sts	0x00F1, r14
     c1c:	d9 01       	movw	r26, r18
     c1e:	13 97       	sbiw	r26, 0x03	; 3
     c20:	e3 e0       	ldi	r30, 0x03	; 3
     c22:	e9 0f       	add	r30, r25
				Length--;
     c24:	10 97       	sbiw	r26, 0x00	; 0
     c26:	09 f4       	brne	.+2      	; 0xc2a <USB_Device_ProcessControlRequest+0x8da>
				BytesInEndpoint++;
     c28:	6b c0       	rjmp	.+214    	; 0xd00 <USB_Device_ProcessControlRequest+0x9b0>
     c2a:	e8 30       	cpi	r30, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     c2c:	09 f4       	brne	.+2      	; 0xc30 <USB_Device_ProcessControlRequest+0x8e0>
     c2e:	66 c0       	rjmp	.+204    	; 0xcfc <USB_Device_ProcessControlRequest+0x9ac>
     c30:	7b 01       	movw	r14, r22
     c32:	f4 e0       	ldi	r31, 0x04	; 4
     c34:	ef 0e       	add	r14, r31
     c36:	f1 1c       	adc	r15, r1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c38:	fa 01       	movw	r30, r20
     c3a:	44 91       	lpm	r20, Z
     c3c:	40 93 f1 00 	sts	0x00F1, r20
     c40:	d9 01       	movw	r26, r18
     c42:	14 97       	sbiw	r26, 0x04	; 4
     c44:	44 e0       	ldi	r20, 0x04	; 4
     c46:	49 0f       	add	r20, r25
				Length--;
     c48:	10 97       	sbiw	r26, 0x00	; 0
     c4a:	09 f4       	brne	.+2      	; 0xc4e <USB_Device_ProcessControlRequest+0x8fe>
				BytesInEndpoint++;
     c4c:	51 c0       	rjmp	.+162    	; 0xcf0 <USB_Device_ProcessControlRequest+0x9a0>
     c4e:	48 30       	cpi	r20, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     c50:	09 f4       	brne	.+2      	; 0xc54 <USB_Device_ProcessControlRequest+0x904>
     c52:	4b c0       	rjmp	.+150    	; 0xcea <USB_Device_ProcessControlRequest+0x99a>
     c54:	ab 01       	movw	r20, r22
     c56:	4b 5f       	subi	r20, 0xFB	; 251
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	f7 01       	movw	r30, r14
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c5c:	e4 90       	lpm	r14, Z
     c5e:	e0 92 f1 00 	sts	0x00F1, r14
     c62:	d9 01       	movw	r26, r18
     c64:	15 97       	sbiw	r26, 0x05	; 5
     c66:	e5 e0       	ldi	r30, 0x05	; 5
     c68:	e9 0f       	add	r30, r25
				Length--;
     c6a:	10 97       	sbiw	r26, 0x00	; 0
     c6c:	09 f4       	brne	.+2      	; 0xc70 <USB_Device_ProcessControlRequest+0x920>
				BytesInEndpoint++;
     c6e:	48 c0       	rjmp	.+144    	; 0xd00 <USB_Device_ProcessControlRequest+0x9b0>
     c70:	e8 30       	cpi	r30, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     c72:	09 f4       	brne	.+2      	; 0xc76 <USB_Device_ProcessControlRequest+0x926>
     c74:	43 c0       	rjmp	.+134    	; 0xcfc <USB_Device_ProcessControlRequest+0x9ac>
     c76:	7b 01       	movw	r14, r22
     c78:	f6 e0       	ldi	r31, 0x06	; 6
     c7a:	ef 0e       	add	r14, r31
     c7c:	f1 1c       	adc	r15, r1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c7e:	fa 01       	movw	r30, r20
     c80:	44 91       	lpm	r20, Z
     c82:	40 93 f1 00 	sts	0x00F1, r20
     c86:	d9 01       	movw	r26, r18
     c88:	16 97       	sbiw	r26, 0x06	; 6
     c8a:	46 e0       	ldi	r20, 0x06	; 6
     c8c:	49 0f       	add	r20, r25
				Length--;
     c8e:	10 97       	sbiw	r26, 0x00	; 0
     c90:	79 f1       	breq	.+94     	; 0xcf0 <USB_Device_ProcessControlRequest+0x9a0>
				BytesInEndpoint++;
     c92:	48 30       	cpi	r20, 0x08	; 8
     c94:	51 f1       	breq	.+84     	; 0xcea <USB_Device_ProcessControlRequest+0x99a>
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     c96:	ab 01       	movw	r20, r22
     c98:	49 5f       	subi	r20, 0xF9	; 249
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	f7 01       	movw	r30, r14
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c9e:	e4 90       	lpm	r14, Z
     ca0:	e0 92 f1 00 	sts	0x00F1, r14
     ca4:	d9 01       	movw	r26, r18
     ca6:	17 97       	sbiw	r26, 0x07	; 7
     ca8:	99 5f       	subi	r25, 0xF9	; 249
     caa:	10 97       	sbiw	r26, 0x00	; 0
				Length--;
     cac:	c1 f0       	breq	.+48     	; 0xcde <USB_Device_ProcessControlRequest+0x98e>
     cae:	97 30       	cpi	r25, 0x07	; 7
				BytesInEndpoint++;
     cb0:	29 f5       	brne	.+74     	; 0xcfc <USB_Device_ProcessControlRequest+0x9ac>
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     cb2:	68 5f       	subi	r22, 0xF8	; 248
     cb4:	7f 4f       	sbci	r23, 0xFF	; 255
     cb6:	fa 01       	movw	r30, r20
     cb8:	44 91       	lpm	r20, Z
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     cba:	40 93 f1 00 	sts	0x00F1, r20
     cbe:	d9 01       	movw	r26, r18
     cc0:	18 97       	sbiw	r26, 0x08	; 8
     cc2:	ab 01       	movw	r20, r22
     cc4:	81 e0       	ldi	r24, 0x01	; 1
				Length--;
     cc6:	73 cf       	rjmp	.-282    	; 0xbae <USB_Device_ProcessControlRequest+0x85e>
     cc8:	66 e3       	ldi	r22, 0x36	; 54
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     cca:	54 e3       	ldi	r21, 0x34	; 52
				Length--;
     ccc:	12 e3       	ldi	r17, 0x32	; 50
     cce:	8e e3       	ldi	r24, 0x3E	; 62
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     cd0:	9c e3       	ldi	r25, 0x3C	; 60
     cd2:	3a e3       	ldi	r19, 0x3A	; 58
     cd4:	28 e3       	ldi	r18, 0x38	; 56
     cd6:	40 e3       	ldi	r20, 0x30	; 48
     cd8:	dc cd       	rjmp	.-1096   	; 0x892 <USB_Device_ProcessControlRequest+0x542>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	2c ce       	rjmp	.-936    	; 0x936 <USB_Device_ProcessControlRequest+0x5e6>
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	98 30       	cpi	r25, 0x08	; 8
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);	

	UCSR1C = ConfigMask;
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
     ce2:	09 f4       	brne	.+2      	; 0xce6 <USB_Device_ProcessControlRequest+0x996>
     ce4:	64 cf       	rjmp	.-312    	; 0xbae <USB_Device_ProcessControlRequest+0x85e>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	62 cf       	rjmp	.-316    	; 0xbae <USB_Device_ProcessControlRequest+0x85e>
     cea:	a7 01       	movw	r20, r14
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	5f cf       	rjmp	.-322    	; 0xbae <USB_Device_ProcessControlRequest+0x85e>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     cf2:	48 30       	cpi	r20, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <USB_Device_ProcessControlRequest+0x9a8>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	a7 01       	movw	r20, r14
     cfa:	59 cf       	rjmp	.-334    	; 0xbae <USB_Device_ProcessControlRequest+0x85e>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	57 cf       	rjmp	.-338    	; 0xbae <USB_Device_ProcessControlRequest+0x85e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	e8 30       	cpi	r30, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     d04:	81 f7       	brne	.-32     	; 0xce6 <USB_Device_ProcessControlRequest+0x996>
     d06:	53 cf       	rjmp	.-346    	; 0xbae <USB_Device_ProcessControlRequest+0x85e>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	98 30       	cpi	r25, 0x08	; 8
     d0c:	09 f0       	breq	.+2      	; 0xd10 <USB_Device_ProcessControlRequest+0x9c0>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	d9 01       	movw	r26, r18
     d12:	ab 01       	movw	r20, r22
     d14:	4c cf       	rjmp	.-360    	; 0xbae <USB_Device_ProcessControlRequest+0x85e>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	0c cd       	rjmp	.-1512   	; 0x732 <USB_Device_ProcessControlRequest+0x3e2>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	dd cc       	rjmp	.-1606   	; 0x6d8 <USB_Device_ProcessControlRequest+0x388>

		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	35 cd       	rjmp	.-1430   	; 0x78c <USB_Device_ProcessControlRequest+0x43c>

00000d22 <__vector_23>:
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     d2a:	11 24       	eor	r1, r1
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
     d34:	90 91 ce 00 	lds	r25, 0x00CE
     d38:	8e b3       	in	r24, 0x1e	; 30
     d3a:	84 30       	cpi	r24, 0x04	; 4
	uint8_t d = UDR1;
     d3c:	79 f4       	brne	.+30     	; 0xd5c <__vector_23+0x3a>
     d3e:	80 91 22 01 	lds	r24, 0x0122
	if (USB_DeviceState != DEVICE_STATE_Configured) return;
     d42:	e8 2f       	mov	r30, r24
     d44:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t tmp = USARTtoUSB_wrp;
     d46:	e8 55       	subi	r30, 0x58	; 88
     d48:	fe 4f       	sbci	r31, 0xFE	; 254
	USARTtoUSB_buf[tmp] = d;
     d4a:	90 83       	st	Z, r25
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	80 93 22 01 	sts	0x0122, r24
     d52:	80 91 a9 02 	lds	r24, 0x02A9
	tmp++;
	tmp &= (USART2USB_BUFLEN-1);
	USARTtoUSB_wrp = tmp;
     d56:	8f 5f       	subi	r24, 0xFF	; 255
     d58:	80 93 a9 02 	sts	0x02A9, r24
	USARTtoUSB_cnt++;
     d5c:	ff 91       	pop	r31
     d5e:	ef 91       	pop	r30
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
}
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <__vector_11>:
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK __attribute__((flatten)) )
{
     d76:	11 24       	eor	r1, r1
     d78:	8f 93       	push	r24
     d7a:	9f 93       	push	r25
     d7c:	80 91 e1 00 	lds	r24, 0x00E1
     d80:	80 ff       	sbrs	r24, 0
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <__vector_11+0x1e>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
     d84:	80 91 e2 00 	lds	r24, 0x00E2
     d88:	80 fd       	sbrc	r24, 0
     d8a:	4e c0       	rjmp	.+156    	; 0xe28 <__vector_11+0xba>
     d8c:	80 91 e1 00 	lds	r24, 0x00E1
     d90:	84 ff       	sbrs	r24, 4
     d92:	27 c0       	rjmp	.+78     	; 0xde2 <__vector_11+0x74>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
     d94:	80 91 e2 00 	lds	r24, 0x00E2
     d98:	84 ff       	sbrs	r24, 4
     d9a:	23 c0       	rjmp	.+70     	; 0xde2 <__vector_11+0x74>
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	89 bd       	out	0x29, r24	; 41
     da0:	89 b5       	in	r24, 0x29	; 41
     da2:	82 60       	ori	r24, 0x02	; 2
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     da4:	89 bd       	out	0x29, r24	; 41
     da6:	09 b4       	in	r0, 0x29	; 41
				PLLCSR |= (1 << PLLE);
     da8:	00 fe       	sbrs	r0, 0
     daa:	fd cf       	rjmp	.-6      	; 0xda6 <__vector_11+0x38>
     dac:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     db0:	8f 7d       	andi	r24, 0xDF	; 223
     db2:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     db6:	80 91 e1 00 	lds	r24, 0x00E1
     dba:	8f 7e       	andi	r24, 0xEF	; 239
     dbc:	80 93 e1 00 	sts	0x00E1, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
     dc0:	80 91 e2 00 	lds	r24, 0x00E2
     dc4:	8f 7e       	andi	r24, 0xEF	; 239
     dc6:	80 93 e2 00 	sts	0x00E2, r24

		USB_INT_Disable(USB_INT_WAKEUP);
     dca:	80 91 e2 00 	lds	r24, 0x00E2
     dce:	81 60       	ori	r24, 0x01	; 1
     dd0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
     dd4:	80 91 1f 01 	lds	r24, 0x011F
     dd8:	88 23       	and	r24, r24
     dda:	09 f4       	brne	.+2      	; 0xdde <__vector_11+0x70>
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ddc:	af c0       	rjmp	.+350    	; 0xf3c <__vector_11+0x1ce>
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	8e bb       	out	0x1e, r24	; 30
     de2:	80 91 e1 00 	lds	r24, 0x00E1
     de6:	83 ff       	sbrs	r24, 3
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <__vector_11+0x84>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     dea:	80 91 e2 00 	lds	r24, 0x00E2
     dee:	83 fd       	sbrc	r24, 3
     df0:	32 c0       	rjmp	.+100    	; 0xe56 <__vector_11+0xe8>
     df2:	80 91 e1 00 	lds	r24, 0x00E1
     df6:	82 ff       	sbrs	r24, 2
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <__vector_11+0x94>
		#endif

		EVENT_USB_Device_Reset();
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     dfa:	80 91 e2 00 	lds	r24, 0x00E2
     dfe:	82 fd       	sbrc	r24, 2
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <__vector_11+0xa2>
     e02:	9f 91       	pop	r25
     e04:	8f 91       	pop	r24
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti
     e10:	80 91 e1 00 	lds	r24, 0x00E1
     e14:	8b 7f       	andi	r24, 0xFB	; 251
     e16:	80 93 e1 00 	sts	0x00E1, r24
		EVENT_USB_Device_Reset();
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
	{
		USB_INT_Clear(USB_INT_SOFI);
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti
     e28:	80 91 e1 00 	lds	r24, 0x00E1
     e2c:	8e 7f       	andi	r24, 0xFE	; 254
     e2e:	80 93 e1 00 	sts	0x00E1, r24
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
	{
		USB_INT_Clear(USB_INT_SUSPEND);
     e32:	80 91 e2 00 	lds	r24, 0x00E2
     e36:	8e 7f       	andi	r24, 0xFE	; 254
     e38:	80 93 e2 00 	sts	0x00E2, r24

		USB_INT_Disable(USB_INT_SUSPEND);
     e3c:	80 91 e2 00 	lds	r24, 0x00E2
     e40:	80 61       	ori	r24, 0x10	; 16
     e42:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
     e46:	80 91 d8 00 	lds	r24, 0x00D8
     e4a:	80 62       	ori	r24, 0x20	; 32
     e4c:	80 93 d8 00 	sts	0x00D8, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     e50:	19 bc       	out	0x29, r1	; 41
     e52:	1e ba       	out	0x1e, r1	; 30
     e54:	9b cf       	rjmp	.-202    	; 0xd8c <__vector_11+0x1e>
     e56:	80 91 e1 00 	lds	r24, 0x00E1
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     e5a:	87 7f       	andi	r24, 0xF7	; 247
     e5c:	80 93 e1 00 	sts	0x00E1, r24
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
	{
		USB_INT_Clear(USB_INT_EORSTI);
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	8e bb       	out	0x1e, r24	; 30
     e64:	10 92 1f 01 	sts	0x011F, r1

		USB_DeviceState         = DEVICE_STATE_Default;
     e68:	90 91 e1 00 	lds	r25, 0x00E1
		USB_ConfigurationNumber = 0;
     e6c:	9e 7f       	andi	r25, 0xFE	; 254
     e6e:	90 93 e1 00 	sts	0x00E1, r25

		USB_INT_Clear(USB_INT_SUSPEND);
     e72:	90 91 e2 00 	lds	r25, 0x00E2
     e76:	9e 7f       	andi	r25, 0xFE	; 254
     e78:	90 93 e2 00 	sts	0x00E2, r25
		USB_INT_Disable(USB_INT_SUSPEND);
     e7c:	90 91 e2 00 	lds	r25, 0x00E2
     e80:	90 61       	ori	r25, 0x10	; 16
     e82:	90 93 e2 00 	sts	0x00E2, r25
		USB_INT_Enable(USB_INT_WAKEUP);
     e86:	10 92 f4 00 	sts	0x00F4, r1
     e8a:	10 92 e9 00 	sts	0x00E9, r1
	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
     e8e:	10 92 f0 00 	sts	0x00F0, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e92:	10 92 e8 00 	sts	0x00E8, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     e96:	10 92 ed 00 	sts	0x00ED, r1
		UEINTX  = 0;
     e9a:	90 91 eb 00 	lds	r25, 0x00EB
		UECFG1X = 0;
     e9e:	9e 7f       	andi	r25, 0xFE	; 254
     ea0:	90 93 eb 00 	sts	0x00EB, r25
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	90 93 e9 00 	sts	0x00E9, r25
     eaa:	10 92 f0 00 	sts	0x00F0, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     eae:	10 92 e8 00 	sts	0x00E8, r1
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     eb2:	10 92 ed 00 	sts	0x00ED, r1
		UEINTX  = 0;
     eb6:	90 91 eb 00 	lds	r25, 0x00EB
		UECFG1X = 0;
     eba:	9e 7f       	andi	r25, 0xFE	; 254
     ebc:	90 93 eb 00 	sts	0x00EB, r25
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     ec0:	80 93 e9 00 	sts	0x00E9, r24
     ec4:	10 92 f0 00 	sts	0x00F0, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ec8:	10 92 e8 00 	sts	0x00E8, r1
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     ecc:	10 92 ed 00 	sts	0x00ED, r1
		UEINTX  = 0;
     ed0:	90 91 eb 00 	lds	r25, 0x00EB
		UECFG1X = 0;
     ed4:	9e 7f       	andi	r25, 0xFE	; 254
     ed6:	90 93 eb 00 	sts	0x00EB, r25
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     eda:	93 e0       	ldi	r25, 0x03	; 3
     edc:	90 93 e9 00 	sts	0x00E9, r25
     ee0:	10 92 f0 00 	sts	0x00F0, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ee4:	10 92 e8 00 	sts	0x00E8, r1
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     ee8:	10 92 ed 00 	sts	0x00ED, r1
		UEINTX  = 0;
     eec:	90 91 eb 00 	lds	r25, 0x00EB
		UECFG1X = 0;
     ef0:	9e 7f       	andi	r25, 0xFE	; 254
     ef2:	90 93 eb 00 	sts	0x00EB, r25
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     ef6:	94 e0       	ldi	r25, 0x04	; 4
     ef8:	90 93 e9 00 	sts	0x00E9, r25
     efc:	10 92 f0 00 	sts	0x00F0, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f00:	10 92 e8 00 	sts	0x00E8, r1
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     f04:	10 92 ed 00 	sts	0x00ED, r1
		UEINTX  = 0;
     f08:	90 91 eb 00 	lds	r25, 0x00EB
		UECFG1X = 0;
     f0c:	9e 7f       	andi	r25, 0xFE	; 254
     f0e:	90 93 eb 00 	sts	0x00EB, r25
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     f12:	10 92 e9 00 	sts	0x00E9, r1
     f16:	90 91 eb 00 	lds	r25, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f1a:	91 60       	ori	r25, 0x01	; 1
     f1c:	90 93 eb 00 	sts	0x00EB, r25
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     f20:	10 92 ed 00 	sts	0x00ED, r1
     f24:	10 92 ec 00 	sts	0x00EC, r1
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     f28:	80 93 ed 00 	sts	0x00ED, r24

	UECFG0X = UECFG0XData;
     f2c:	80 91 ee 00 	lds	r24, 0x00EE
	UECFG1X = UECFG1XData;
     f30:	80 91 f0 00 	lds	r24, 0x00F0
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     f34:	88 60       	ori	r24, 0x08	; 8
     f36:	80 93 f0 00 	sts	0x00F0, r24
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
     f3a:	5b cf       	rjmp	.-330    	; 0xdf2 <__vector_11+0x84>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	8e bb       	out	0x1e, r24	; 30
     f40:	50 cf       	rjmp	.-352    	; 0xde2 <__vector_11+0x74>

00000f42 <__vector_12>:
     f42:	1f 92       	push	r1

		USB_INT_Disable(USB_INT_WAKEUP);
		USB_INT_Enable(USB_INT_SUSPEND);
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f44:	0f 92       	push	r0
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	0f 92       	push	r0
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK )
{
     f4a:	11 24       	eor	r1, r1
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	ef 93       	push	r30
     f6c:	ff 93       	push	r31
     f6e:	c9 ee       	ldi	r28, 0xE9	; 233
     f70:	d0 e0       	ldi	r29, 0x00	; 0
     f72:	88 81       	ld	r24, Y
     f74:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     f76:	f8 2e       	mov	r15, r24
     f78:	18 82       	st	Y, r1
     f7a:	00 ef       	ldi	r16, 0xF0	; 240
     f7c:	10 e0       	ldi	r17, 0x00	; 0
     f7e:	f8 01       	movw	r30, r16
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f80:	80 81       	ld	r24, Z
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint(); 

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
     f82:	87 7f       	andi	r24, 0xF7	; 247
     f84:	80 83       	st	Z, r24
     f86:	78 94       	sei
     f88:	e3 d9       	rcall	.-3130   	; 0x350 <USB_Device_ProcessControlRequest>
     f8a:	f8 94       	cli
     f8c:	18 82       	st	Y, r1

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
     f8e:	f8 01       	movw	r30, r16

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
     f90:	80 81       	ld	r24, Z
     f92:	88 60       	ori	r24, 0x08	; 8
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
     f94:	80 83       	st	Z, r24
     f96:	f8 82       	st	Y, r15
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	bf 91       	pop	r27
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	0f 90       	pop	r0
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	0f 90       	pop	r0
     fc0:	1f 90       	pop	r1
     fc2:	18 95       	reti

00000fc4 <main>:
     fc4:	84 b7       	in	r24, 0x34	; 52
     fc6:	87 7f       	andi	r24, 0xF7	; 247
     fc8:	84 bf       	out	0x34, r24	; 52
     fca:	88 e1       	ldi	r24, 0x18	; 24
     fcc:	0f b6       	in	r0, 0x3f	; 63
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
	wdt_disable();
     fce:	f8 94       	cli
     fd0:	80 93 60 00 	sts	0x0060, r24
     fd4:	10 92 60 00 	sts	0x0060, r1
     fd8:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     fda:	27 e6       	ldi	r18, 0x67	; 103
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	30 93 cd 00 	sts	0x00CD, r19
     fe2:	20 93 cc 00 	sts	0x00CC, r18

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     fe6:	96 e0       	ldi	r25, 0x06	; 6
     fe8:	90 93 ca 00 	sts	0x00CA, r25
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     fec:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     ff0:	80 93 c9 00 	sts	0x00C9, r24
				
				DDRD  |= (1 << 3);
     ff4:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     ff6:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     ff8:	8a b1       	in	r24, 0x0a	; 10
     ffa:	80 63       	ori	r24, 0x30	; 48
     ffc:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
     ffe:	8b b1       	in	r24, 0x0b	; 11
    1000:	80 63       	ori	r24, 0x30	; 48
    1002:	8b b9       	out	0x0b, r24	; 11
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1004:	10 92 e2 00 	sts	0x00E2, r1
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    1008:	10 92 e1 00 	sts	0x00E1, r1
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
    100c:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
    100e:	10 92 1f 01 	sts	0x011F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
    1012:	10 92 20 01 	sts	0x0120, r1
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
    1016:	10 92 21 01 	sts	0x0121, r1
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    101a:	84 e0       	ldi	r24, 0x04	; 4
    101c:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    101e:	89 b5       	in	r24, 0x29	; 41
    1020:	82 60       	ori	r24, 0x02	; 2
    1022:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1024:	09 b4       	in	r0, 0x29	; 41
    1026:	00 fe       	sbrs	r0, 0
    1028:	fd cf       	rjmp	.-6      	; 0x1024 <main+0x60>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    102a:	80 91 d8 00 	lds	r24, 0x00D8
				
				USBCON = (Temp & ~(1 << USBE));
    102e:	98 2f       	mov	r25, r24
    1030:	9f 77       	andi	r25, 0x7F	; 127
    1032:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
    1036:	80 68       	ori	r24, 0x80	; 128
    1038:	80 93 d8 00 	sts	0x00D8, r24
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
    103c:	80 91 63 00 	lds	r24, 0x0063
    1040:	8e 7f       	andi	r24, 0xFE	; 254
    1042:	80 93 63 00 	sts	0x0063, r24
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1046:	80 91 d8 00 	lds	r24, 0x00D8
    104a:	8f 7d       	andi	r24, 0xDF	; 223
    104c:	80 93 d8 00 	sts	0x00D8, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1050:	80 91 e0 00 	lds	r24, 0x00E0
    1054:	8e 7f       	andi	r24, 0xFE	; 254
    1056:	80 93 e0 00 	sts	0x00E0, r24
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
    105a:	80 91 e1 00 	lds	r24, 0x00E1
    105e:	8e 7f       	andi	r24, 0xFE	; 254
    1060:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPEND);
    1064:	80 91 e2 00 	lds	r24, 0x00E2
    1068:	81 60       	ori	r24, 0x01	; 1
    106a:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Clear(USB_INT_EORSTI);
    106e:	80 91 e1 00 	lds	r24, 0x00E1
    1072:	87 7f       	andi	r24, 0xF7	; 247
    1074:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_EORSTI);
    1078:	80 91 e2 00 	lds	r24, 0x00E2
    107c:	88 60       	ori	r24, 0x08	; 8
    107e:	80 93 e2 00 	sts	0x00E2, r24

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	80 93 16 01 	sts	0x0116, r24
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS01) | (1 << CS00);
    1088:	83 e0       	ldi	r24, 0x03	; 3
    108a:	85 bd       	out	0x25, r24	; 37

	/* Pull target /RESET line high */
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
    108c:	5f 9a       	sbi	0x0b, 7	; 11
	AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
    108e:	57 9a       	sbi	0x0a, 7	; 10
int main(void)
{
	uint8_t USBtoUSART_cnt = 0;
	SetupHardware();

	sei();
    1090:	78 94       	sei
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	uint8_t USBtoUSART_cnt = 0;
    1092:	d0 e0       	ldi	r29, 0x00	; 0
					rdp++;
					rdp &= (USB2USART_BUFLEN-1);
					USBtoUSART_rdp = rdp;
					USBtoUSART_cnt--;
				  	LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
    1094:	03 e0       	ldi	r16, 0x03	; 3
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		if ( ((cnt >= USART2USB_NEAR_FULL) || (timer_ovrflw && cnt)) &&
			(CDC_Device_SendByte_Prep(&VirtualSerial_CDC_Interface) == 0) )
		{

			uint8_t txcnt = CDC_IN_EPSIZE - Endpoint_BytesInEndpoint();
    1096:	10 e4       	ldi	r17, 0x40	; 64

	sei();

	for (;;)
	{
		uint8_t timer_ovrflw = TIFR0 & _BV(TOV0);
    1098:	35 b3       	in	r19, 0x15	; 21
    109a:	31 70       	andi	r19, 0x01	; 1
		/* I'd like to get rid of these counters... */
		uint8_t cnt = USARTtoUSB_cnt;
    109c:	80 91 a9 02 	lds	r24, 0x02A9
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		if ( ((cnt >= USART2USB_NEAR_FULL) || (timer_ovrflw && cnt)) &&
    10a0:	80 34       	cpi	r24, 0x40	; 64
    10a2:	20 f4       	brcc	.+8      	; 0x10ac <main+0xe8>
    10a4:	33 23       	and	r19, r19
    10a6:	31 f0       	breq	.+12     	; 0x10b4 <main+0xf0>
    10a8:	88 23       	and	r24, r24
    10aa:	21 f0       	breq	.+8      	; 0x10b4 <main+0xf0>
}

/* This about writing data to endpoint. User will take care of the writing if needed. */
uint8_t CDC_Device_SendByte_Prep(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    10ac:	9e b3       	in	r25, 0x1e	; 30
    10ae:	94 30       	cpi	r25, 0x04	; 4
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <main+0xf0>
    10b2:	4d c0       	rjmp	.+154    	; 0x114e <main+0x18a>
			sei();
			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
		} else {
			/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
			if (USBtoUSART_cnt < (USB2USART_BUFLEN-1)) {
    10b4:	df 37       	cpi	r29, 0x7F	; 127
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <main+0xf6>
    10b8:	67 c0       	rjmp	.+206    	; 0x1188 <main+0x1c4>
				  USBtoUSART_cnt++;
				}
			}
			/* Make This less important than the above thing. */
			if (USBtoUSART_cnt) {
				if (UCSR1A & (1 << UDRE1)) {
    10ba:	80 91 c8 00 	lds	r24, 0x00C8
    10be:	85 ff       	sbrs	r24, 5
    10c0:	11 c0       	rjmp	.+34     	; 0x10e4 <main+0x120>
					uint8_t rdp = USBtoUSART_rdp;
    10c2:	80 91 23 01 	lds	r24, 0x0123
					UDR1 = USBtoUSART_buf[rdp];
    10c6:	e8 2f       	mov	r30, r24
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	ec 5d       	subi	r30, 0xDC	; 220
    10cc:	fe 4f       	sbci	r31, 0xFE	; 254
    10ce:	90 81       	ld	r25, Z
    10d0:	90 93 ce 00 	sts	0x00CE, r25
					rdp++;
    10d4:	8f 5f       	subi	r24, 0xFF	; 255
					rdp &= (USB2USART_BUFLEN-1);
    10d6:	8f 77       	andi	r24, 0x7F	; 127
					USBtoUSART_rdp = rdp;
    10d8:	80 93 23 01 	sts	0x0123, r24
					USBtoUSART_cnt--;
    10dc:	d1 50       	subi	r29, 0x01	; 1
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
    10de:	5c 98       	cbi	0x0b, 4	; 11
				  	LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
    10e0:	00 93 a6 01 	sts	0x01A6, r16
				}
			}
		}
		if (timer_ovrflw) {
    10e4:	33 23       	and	r19, r19
    10e6:	c9 f0       	breq	.+50     	; 0x111a <main+0x156>
			TIFR0 |= (1 << TOV0);
    10e8:	a8 9a       	sbi	0x15, 0	; 21
			/* Turn off TX LED(s) once the TX pulse period has elapsed */
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
    10ea:	80 91 a5 01 	lds	r24, 0x01A5
    10ee:	88 23       	and	r24, r24
    10f0:	41 f0       	breq	.+16     	; 0x1102 <main+0x13e>
    10f2:	80 91 a5 01 	lds	r24, 0x01A5
    10f6:	81 50       	subi	r24, 0x01	; 1
    10f8:	80 93 a5 01 	sts	0x01A5, r24
    10fc:	81 11       	cpse	r24, r1
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <main+0x13e>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
    1100:	5d 9a       	sbi	0x0b, 5	; 11
			  LEDs_TurnOffLEDs(LEDMASK_TX);

			/* Turn off RX LED(s) once the RX pulse period has elapsed */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
    1102:	80 91 a6 01 	lds	r24, 0x01A6
    1106:	88 23       	and	r24, r24
    1108:	41 f0       	breq	.+16     	; 0x111a <main+0x156>
    110a:	80 91 a6 01 	lds	r24, 0x01A6
    110e:	81 50       	subi	r24, 0x01	; 1
    1110:	80 93 a6 01 	sts	0x01A6, r24
    1114:	81 11       	cpse	r24, r1
    1116:	01 c0       	rjmp	.+2      	; 0x111a <main+0x156>
    1118:	5c 9a       	sbi	0x0b, 4	; 11
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    111a:	8e b3       	in	r24, 0x1e	; 30
    111c:	88 23       	and	r24, r24
    111e:	09 f4       	brne	.+2      	; 0x1122 <main+0x15e>
    1120:	bb cf       	rjmp	.-138    	; 0x1098 <main+0xd4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1122:	c0 91 e9 00 	lds	r28, 0x00E9
    1126:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1128:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    112c:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1130:	83 fd       	sbrc	r24, 3
    1132:	45 c0       	rjmp	.+138    	; 0x11be <main+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1134:	c0 93 e9 00 	sts	0x00E9, r28

	sei();

	for (;;)
	{
		uint8_t timer_ovrflw = TIFR0 & _BV(TOV0);
    1138:	35 b3       	in	r19, 0x15	; 21
    113a:	31 70       	andi	r19, 0x01	; 1
		/* I'd like to get rid of these counters... */
		uint8_t cnt = USARTtoUSB_cnt;
    113c:	80 91 a9 02 	lds	r24, 0x02A9
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		if ( ((cnt >= USART2USB_NEAR_FULL) || (timer_ovrflw && cnt)) &&
    1140:	80 34       	cpi	r24, 0x40	; 64
    1142:	08 f4       	brcc	.+2      	; 0x1146 <main+0x182>
    1144:	af cf       	rjmp	.-162    	; 0x10a4 <main+0xe0>
    1146:	9e b3       	in	r25, 0x1e	; 30
    1148:	94 30       	cpi	r25, 0x04	; 4
    114a:	09 f0       	breq	.+2      	; 0x114e <main+0x18a>
    114c:	b3 cf       	rjmp	.-154    	; 0x10b4 <main+0xf0>
    114e:	40 91 0f 01 	lds	r20, 0x010F
    1152:	50 91 10 01 	lds	r21, 0x0110
    1156:	60 91 11 01 	lds	r22, 0x0111
    115a:	70 91 12 01 	lds	r23, 0x0112
    115e:	45 2b       	or	r20, r21
    1160:	46 2b       	or	r20, r22
    1162:	47 2b       	or	r20, r23
    1164:	09 f4       	brne	.+2      	; 0x1168 <main+0x1a4>
    1166:	a6 cf       	rjmp	.-180    	; 0x10b4 <main+0xf0>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    1168:	90 91 01 01 	lds	r25, 0x0101
    116c:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1170:	90 91 e8 00 	lds	r25, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    1174:	95 fd       	sbrc	r25, 5
    1176:	4b c0       	rjmp	.+150    	; 0x120e <main+0x24a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1178:	80 91 e8 00 	lds	r24, 0x00E8
    117c:	8e 77       	andi	r24, 0x7E	; 126
    117e:	80 93 e8 00 	sts	0x00E8, r24
			sei();
			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
		} else {
			/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
			if (USBtoUSART_cnt < (USB2USART_BUFLEN-1)) {
    1182:	df 37       	cpi	r29, 0x7F	; 127
    1184:	08 f0       	brcs	.+2      	; 0x1188 <main+0x1c4>
    1186:	99 cf       	rjmp	.-206    	; 0x10ba <main+0xf6>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1188:	8e b3       	in	r24, 0x1e	; 30
    118a:	84 30       	cpi	r24, 0x04	; 4
    118c:	a1 f4       	brne	.+40     	; 0x11b6 <main+0x1f2>
    118e:	80 91 0f 01 	lds	r24, 0x010F
    1192:	90 91 10 01 	lds	r25, 0x0110
    1196:	a0 91 11 01 	lds	r26, 0x0111
    119a:	b0 91 12 01 	lds	r27, 0x0112
    119e:	89 2b       	or	r24, r25
    11a0:	8a 2b       	or	r24, r26
    11a2:	8b 2b       	or	r24, r27
    11a4:	41 f0       	breq	.+16     	; 0x11b6 <main+0x1f2>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    11a6:	80 91 05 01 	lds	r24, 0x0105
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    11aa:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11ae:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsOUTReceived())
    11b2:	82 fd       	sbrc	r24, 2
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <main+0x1fe>
				  USBtoUSART_wrp = wrp;
				  USBtoUSART_cnt++;
				}
			}
			/* Make This less important than the above thing. */
			if (USBtoUSART_cnt) {
    11b6:	dd 23       	and	r29, r29
    11b8:	09 f4       	brne	.+2      	; 0x11bc <main+0x1f8>
    11ba:	94 cf       	rjmp	.-216    	; 0x10e4 <main+0x120>
    11bc:	7e cf       	rjmp	.-260    	; 0x10ba <main+0xf6>
		  USB_Device_ProcessControlRequest();
    11be:	c8 d8       	rcall	.-3696   	; 0x350 <USB_Device_ProcessControlRequest>
    11c0:	b9 cf       	rjmp	.-142    	; 0x1134 <main+0x170>
    11c2:	80 91 f2 00 	lds	r24, 0x00F2
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    11c6:	88 23       	and	r24, r24
	{
		if (Endpoint_BytesInEndpoint())
    11c8:	c1 f0       	breq	.+48     	; 0x11fa <main+0x236>
    11ca:	90 91 f1 00 	lds	r25, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    11ce:	80 91 f2 00 	lds	r24, 0x00F2
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    11d2:	81 11       	cpse	r24, r1
		  ReceivedByte = Endpoint_Read_Byte();
	
		if (!(Endpoint_BytesInEndpoint()))
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <main+0x21c>
    11d6:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11da:	8b 77       	andi	r24, 0x7B	; 123
    11dc:	80 93 e8 00 	sts	0x00E8, r24
    11e0:	80 91 a4 01 	lds	r24, 0x01A4
			if (USBtoUSART_cnt < (USB2USART_BUFLEN-1)) {
				int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);

				/* Read byte from the USB OUT endpoint into the USART transmit buffer */
				if (!(ReceivedByte < 0)) {
				  uint8_t wrp = USBtoUSART_wrp;
    11e4:	e8 2f       	mov	r30, r24
				  USBtoUSART_buf[wrp] = ReceivedByte;
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	ec 5d       	subi	r30, 0xDC	; 220
    11ea:	fe 4f       	sbci	r31, 0xFE	; 254
    11ec:	90 83       	st	Z, r25
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
				  wrp++;
    11f0:	8f 77       	andi	r24, 0x7F	; 127
				  wrp &= (USB2USART_BUFLEN-1);
    11f2:	80 93 a4 01 	sts	0x01A4, r24
				  USBtoUSART_wrp = wrp;
    11f6:	df 5f       	subi	r29, 0xFF	; 255
				  USBtoUSART_cnt++;
    11f8:	60 cf       	rjmp	.-320    	; 0x10ba <main+0xf6>
    11fa:	80 91 f2 00 	lds	r24, 0x00F2
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    11fe:	81 11       	cpse	r24, r1
    1200:	da cf       	rjmp	.-76     	; 0x11b6 <main+0x1f2>
    1202:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1206:	8b 77       	andi	r24, 0x7B	; 123
    1208:	80 93 e8 00 	sts	0x00E8, r24
    120c:	d4 cf       	rjmp	.-88     	; 0x11b6 <main+0x1f2>
    120e:	90 91 f2 00 	lds	r25, 0x00F2
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1212:	41 2f       	mov	r20, r17
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		if ( ((cnt >= USART2USB_NEAR_FULL) || (timer_ovrflw && cnt)) &&
			(CDC_Device_SendByte_Prep(&VirtualSerial_CDC_Interface) == 0) )
		{

			uint8_t txcnt = CDC_IN_EPSIZE - Endpoint_BytesInEndpoint();
    1214:	49 1b       	sub	r20, r25
    1216:	84 17       	cp	r24, r20
			if (txcnt > cnt) txcnt = cnt;
    1218:	08 f5       	brcc	.+66     	; 0x125c <main+0x298>
    121a:	28 2f       	mov	r18, r24
    121c:	48 2f       	mov	r20, r24

	for (;;)
	{
		uint8_t timer_ovrflw = TIFR0 & _BV(TOV0);
		/* I'd like to get rid of these counters... */
		uint8_t cnt = USARTtoUSB_cnt;
    121e:	80 91 a8 02 	lds	r24, 0x02A8
		{

			uint8_t txcnt = CDC_IN_EPSIZE - Endpoint_BytesInEndpoint();
			if (txcnt > cnt) txcnt = cnt;
			if (cnt > txcnt) cnt = txcnt;
			uint8_t tmp = USARTtoUSB_rdp;
    1222:	28 0f       	add	r18, r24
    1224:	e8 2f       	mov	r30, r24
			do {
				uint8_t d = USARTtoUSB_buf[tmp];
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	e8 55       	subi	r30, 0x58	; 88
    122a:	fe 4f       	sbci	r31, 0xFE	; 254
    122c:	90 81       	ld	r25, Z
    122e:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1232:	8f 5f       	subi	r24, 0xFF	; 255
                                Endpoint_Write_Byte(d);
			        tmp++;
    1234:	82 13       	cpse	r24, r18
			        tmp &= (USART2USB_BUFLEN-1);
			} while (--txcnt);
    1236:	f6 cf       	rjmp	.-20     	; 0x1224 <main+0x260>
    1238:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    123c:	9e 77       	andi	r25, 0x7E	; 126
    123e:	90 93 e8 00 	sts	0x00E8, r25
    1242:	80 93 a8 02 	sts	0x02A8, r24
	                Endpoint_ClearIN();
			USARTtoUSB_rdp = tmp;
    1246:	f8 94       	cli
			cli();
    1248:	80 91 a9 02 	lds	r24, 0x02A9
			/* This will be logically OK, even if more bytes arrived during TX,
			 * because we sent txcnto bytes, so removed that much from the buffer. */
			USARTtoUSB_cnt -= cnt;
    124c:	84 1b       	sub	r24, r20
    124e:	80 93 a9 02 	sts	0x02A9, r24
    1252:	78 94       	sei
			sei();
    1254:	5d 98       	cbi	0x0b, 5	; 11
				PORTD |= LEDS_ALL_LEDS;
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
    1256:	00 93 a5 01 	sts	0x01A5, r16
			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
    125a:	44 cf       	rjmp	.-376    	; 0x10e4 <main+0x120>
    125c:	24 2f       	mov	r18, r20
			(CDC_Device_SendByte_Prep(&VirtualSerial_CDC_Interface) == 0) )
		{

			uint8_t txcnt = CDC_IN_EPSIZE - Endpoint_BytesInEndpoint();
			if (txcnt > cnt) txcnt = cnt;
			if (cnt > txcnt) cnt = txcnt;
    125e:	48 17       	cp	r20, r24
    1260:	f0 f2       	brcs	.-68     	; 0x121e <main+0x25a>
    1262:	dc cf       	rjmp	.-72     	; 0x121c <main+0x258>

00001264 <__udivmodsi4>:
    1264:	a1 e2       	ldi	r26, 0x21	; 33
    1266:	1a 2e       	mov	r1, r26
    1268:	aa 1b       	sub	r26, r26
    126a:	bb 1b       	sub	r27, r27
    126c:	fd 01       	movw	r30, r26
    126e:	0d c0       	rjmp	.+26     	; 0x128a <__udivmodsi4_ep>

00001270 <__udivmodsi4_loop>:
    1270:	aa 1f       	adc	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	ee 1f       	adc	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	a2 17       	cp	r26, r18
    127a:	b3 07       	cpc	r27, r19
    127c:	e4 07       	cpc	r30, r20
    127e:	f5 07       	cpc	r31, r21
    1280:	20 f0       	brcs	.+8      	; 0x128a <__udivmodsi4_ep>
    1282:	a2 1b       	sub	r26, r18
    1284:	b3 0b       	sbc	r27, r19
    1286:	e4 0b       	sbc	r30, r20
    1288:	f5 0b       	sbc	r31, r21

0000128a <__udivmodsi4_ep>:
    128a:	66 1f       	adc	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	88 1f       	adc	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	1a 94       	dec	r1
    1294:	69 f7       	brne	.-38     	; 0x1270 <__udivmodsi4_loop>
    1296:	60 95       	com	r22
    1298:	70 95       	com	r23
    129a:	80 95       	com	r24
    129c:	90 95       	com	r25
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	bd 01       	movw	r22, r26
    12a4:	cf 01       	movw	r24, r30
    12a6:	08 95       	ret

000012a8 <__tablejump2__>:
    12a8:	ee 0f       	add	r30, r30
    12aa:	ff 1f       	adc	r31, r31
    12ac:	05 90       	lpm	r0, Z+
    12ae:	f4 91       	lpm	r31, Z
    12b0:	e0 2d       	mov	r30, r0
    12b2:	09 94       	ijmp

000012b4 <_exit>:
    12b4:	f8 94       	cli

000012b6 <__stop_program>:
    12b6:	ff cf       	rjmp	.-2      	; 0x12b6 <__stop_program>
