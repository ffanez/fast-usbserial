
fast-usbserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  00001280  00001314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00800216  00800216  0000132a  2**0
                  ALLOC
  3 .comment      0000001a  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001388  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b3c  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4f  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d99  00000000  00000000  000049db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000098  00000000  00000000  00005774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001314  00000000  00000000  0000580c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c9e  00000000  00000000  00006b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a60  00000000  00000000  000087be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
       6:	00 00       	nop
       8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
       a:	00 00       	nop
       c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
       e:	00 00       	nop
      10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
      12:	00 00       	nop
      14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
      16:	00 00       	nop
      18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
      22:	00 00       	nop
      24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
      26:	00 00       	nop
      28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b5 c1       	rjmp	.+874    	; 0x398 <__vector_11>
      2e:	00 00       	nop
      30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
      32:	00 00       	nop
      34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
      36:	00 00       	nop
      38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
      3e:	00 00       	nop
      40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
      42:	00 00       	nop
      44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
      46:	00 00       	nop
      48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
      4e:	00 00       	nop
      50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
      52:	00 00       	nop
      54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
      56:	00 00       	nop
      58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	79 c1       	rjmp	.+754    	; 0x350 <__vector_23>
      5e:	00 00       	nop
      60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
      62:	00 00       	nop
      64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
      66:	00 00       	nop
      68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
      6e:	00 00       	nop
      70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
      72:	00 00       	nop
      74:	dc 05       	cpc	r29, r12
      76:	92 05       	cpc	r25, r2
      78:	04 04       	cpc	r0, r4
      7a:	92 05       	cpc	r25, r2
      7c:	04 04       	cpc	r0, r4
      7e:	62 05       	cpc	r22, r2
      80:	41 05       	cpc	r20, r1
      82:	04 04       	cpc	r0, r4
      84:	1d 05       	cpc	r17, r13
      86:	68 04       	cpc	r6, r8

00000088 <__trampolines_end>:
      88:	09 02       	muls	r16, r25
      8a:	3e 00       	.word	0x003e	; ????
      8c:	02 01       	movw	r0, r4
      8e:	00 c0       	rjmp	.+0      	; 0x90 <__trampolines_end+0x8>
      90:	32 09       	sbc	r19, r2
      92:	04 00       	.word	0x0004	; ????
      94:	00 01       	movw	r0, r0
      96:	02 02       	muls	r16, r18
      98:	01 00       	.word	0x0001	; ????
      9a:	05 24       	eor	r0, r5
      9c:	00 01       	movw	r0, r0
      9e:	10 04       	cpc	r1, r0
      a0:	24 02       	muls	r18, r20
      a2:	06 05       	cpc	r16, r6
      a4:	24 06       	cpc	r2, r20
      a6:	00 01       	movw	r0, r0
      a8:	07 05       	cpc	r16, r7
      aa:	82 03       	fmuls	r16, r18
      ac:	08 00       	.word	0x0008	; ????
      ae:	ff 09       	sbc	r31, r15
      b0:	04 01       	movw	r0, r8
      b2:	00 02       	muls	r16, r16
      b4:	0a 00       	.word	0x000a	; ????
      b6:	00 00       	nop
      b8:	07 05       	cpc	r16, r7
      ba:	04 02       	muls	r16, r20
      bc:	18 00       	.word	0x0018	; ????
      be:	01 07       	cpc	r16, r17
      c0:	05 83       	std	Z+5, r16	; 0x05
      c2:	02 40       	sbci	r16, 0x02	; 2
      c4:	00 01       	movw	r0, r0

000000c6 <DeviceDescriptor>:
      c6:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      d6:	dc 01                                               ..

000000d8 <ProductString>:
      d8:	18 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
      e8:	20 00 55 00 6e 00 6f 00 00 00                        .U.n.o...

000000f2 <ManufacturerString>:
      f2:	32 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     2.A.r.d.u.i.n.o.
     102:	20 00 28 00 77 00 77 00 77 00 2e 00 61 00 72 00      .(.w.w.w...a.r.
     112:	64 00 75 00 69 00 6e 00 6f 00 2e 00 63 00 63 00     d.u.i.n.o...c.c.
     122:	29 00 00 00                                         )...

00000126 <LanguageString>:
     126:	04 03 09 04                                         ....

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d2 e0       	ldi	r29, 0x02	; 2
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
.L__do_copy_data_start:
	cpi	r26, lo8(__data_end)
	cpc	r27, r17
	brne	.L__do_copy_data_loop
#elif !defined(__AVR_HAVE_ELPMX__) && !defined(__AVR_HAVE_ELPM__)
	ldi	r17, hi8(__data_end)
     136:	12 e0       	ldi	r17, 0x02	; 2
	ldi	r26, lo8(__data_start)
     138:	a0 e0       	ldi	r26, 0x00	; 0
	ldi	r27, hi8(__data_start)
     13a:	b2 e0       	ldi	r27, 0x02	; 2
	ldi	r30, lo8(__data_load_start)
     13c:	e0 e8       	ldi	r30, 0x80	; 128
	ldi	r31, hi8(__data_load_start)
     13e:	f2 e1       	ldi	r31, 0x12	; 18
	rjmp	.L__do_copy_data_start
     140:	02 c0       	rjmp	.+4      	; 0x146 <__do_copy_data+0x10>
.L__do_copy_data_loop:
#if defined (__AVR_HAVE_LPMX__)
	lpm	r0, Z+
     142:	05 90       	lpm	r0, Z+
#else
	lpm
	adiw	r30, 1
#endif
	st	X+, r0
     144:	0d 92       	st	X+, r0
.L__do_copy_data_start:
	cpi	r26, lo8(__data_end)
     146:	a6 31       	cpi	r26, 0x16	; 22
	cpc	r27, r17
     148:	b1 07       	cpc	r27, r17
	brne	.L__do_copy_data_loop
     14a:	d9 f7       	brne	.-10     	; 0x142 <__do_copy_data+0xc>

0000014c <__do_clear_bss>:
/* __do_clear_bss is only necessary if there is anything in .bss section.  */

#ifdef L_clear_bss
	.section .init4,"ax",@progbits
DEFUN __do_clear_bss
	ldi	r18, hi8(__bss_end)
     14c:	22 e0       	ldi	r18, 0x02	; 2
	ldi	r26, lo8(__bss_start)
     14e:	a6 e1       	ldi	r26, 0x16	; 22
	ldi	r27, hi8(__bss_start)
     150:	b2 e0       	ldi	r27, 0x02	; 2
	rjmp	.do_clear_bss_start
     152:	01 c0       	rjmp	.+2      	; 0x156 <.do_clear_bss_start>

00000154 <.do_clear_bss_loop>:
.do_clear_bss_loop:
	st	X+, __zero_reg__
     154:	1d 92       	st	X+, r1

00000156 <.do_clear_bss_start>:
.do_clear_bss_start:
	cpi	r26, lo8(__bss_end)
     156:	a7 36       	cpi	r26, 0x67	; 103
	cpc	r27, r18
     158:	b2 07       	cpc	r27, r18
	brne	.do_clear_bss_loop
     15a:	e1 f7       	brne	.-8      	; 0x154 <.do_clear_bss_loop>
     15c:	02 d2       	rcall	.+1028   	; 0x562 <main>
     15e:	0c 94 3e 09 	jmp	0x127c	; 0x127c <_exit>

00000162 <__bad_interrupt>:
     162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
     164:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     166:	20 91 1d 02 	lds	r18, 0x021D
     16a:	30 91 1e 02 	lds	r19, 0x021E
     16e:	26 17       	cp	r18, r22
     170:	37 07       	cpc	r19, r23
     172:	58 f0       	brcs	.+22     	; 0x18a <Endpoint_Write_Control_Stream_LE+0x26>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     174:	61 15       	cp	r22, r1
     176:	71 05       	cpc	r23, r1
     178:	09 f0       	breq	.+2      	; 0x17c <Endpoint_Write_Control_Stream_LE+0x18>
     17a:	42 c0       	rjmp	.+132    	; 0x200 <Endpoint_Write_Control_Stream_LE+0x9c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     17c:	80 91 e8 00 	lds	r24, 0x00E8
     180:	8e 77       	andi	r24, 0x7E	; 126
     182:	80 93 e8 00 	sts	0x00E8, r24
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	21 15       	cp	r18, r1
     18e:	31 05       	cpc	r19, r1
     190:	29 f5       	brne	.+74     	; 0x1dc <Endpoint_Write_Control_Stream_LE+0x78>
     192:	81 11       	cpse	r24, r1
     194:	0f c0       	rjmp	.+30     	; 0x1b4 <Endpoint_Write_Control_Stream_LE+0x50>
     196:	2e c0       	rjmp	.+92     	; 0x1f4 <Endpoint_Write_Control_Stream_LE+0x90>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     198:	90 91 e8 00 	lds	r25, 0x00E8
	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     19c:	92 fd       	sbrc	r25, 2
     19e:	2a c0       	rjmp	.+84     	; 0x1f4 <Endpoint_Write_Control_Stream_LE+0x90>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     1a0:	9e b3       	in	r25, 0x1e	; 30
     1a2:	99 23       	and	r25, r25
     1a4:	79 f1       	breq	.+94     	; 0x204 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     1a6:	9e b3       	in	r25, 0x1e	; 30
     1a8:	95 30       	cpi	r25, 0x05	; 5
     1aa:	71 f1       	breq	.+92     	; 0x208 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     1ac:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     1b0:	90 fd       	sbrc	r25, 0
     1b2:	af c0       	rjmp	.+350    	; 0x312 <__stack+0x13>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     1b4:	90 91 e8 00 	lds	r25, 0x00E8
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     1b8:	93 ff       	sbrs	r25, 3
     1ba:	ee cf       	rjmp	.-36     	; 0x198 <Endpoint_Write_Control_Stream_LE+0x34>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     1c0:	90 91 e8 00 	lds	r25, 0x00E8

		if (Endpoint_IsOUTReceived())
     1c4:	92 fd       	sbrc	r25, 2
     1c6:	16 c0       	rjmp	.+44     	; 0x1f4 <Endpoint_Write_Control_Stream_LE+0x90>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     1c8:	9e b3       	in	r25, 0x1e	; 30
     1ca:	99 23       	and	r25, r25
     1cc:	d9 f0       	breq	.+54     	; 0x204 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     1ce:	9e b3       	in	r25, 0x1e	; 30
     1d0:	95 30       	cpi	r25, 0x05	; 5
     1d2:	d1 f0       	breq	.+52     	; 0x208 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     1d4:	90 91 e8 00 	lds	r25, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     1d8:	90 fd       	sbrc	r25, 0
     1da:	18 c0       	rjmp	.+48     	; 0x20c <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     1dc:	90 91 e8 00 	lds	r25, 0x00E8
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     1e0:	93 ff       	sbrs	r25, 3
     1e2:	ee cf       	rjmp	.-36     	; 0x1c0 <Endpoint_Write_Control_Stream_LE+0x5c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     1e8:	8e b3       	in	r24, 0x1e	; 30
     1ea:	88 23       	and	r24, r24
     1ec:	59 f0       	breq	.+22     	; 0x204 <Endpoint_Write_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     1ee:	8e b3       	in	r24, 0x1e	; 30
     1f0:	85 30       	cpi	r24, 0x05	; 5
     1f2:	51 f0       	breq	.+20     	; 0x208 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     1f4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     1f8:	82 ff       	sbrs	r24, 2
     1fa:	f6 cf       	rjmp	.-20     	; 0x1e8 <Endpoint_Write_Control_Stream_LE+0x84>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	08 95       	ret
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     200:	9b 01       	movw	r18, r22
     202:	c3 cf       	rjmp	.-122    	; 0x18a <Endpoint_Write_Control_Stream_LE+0x26>

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	08 95       	ret
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     20c:	90 91 f2 00 	lds	r25, 0x00F2
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     210:	98 30       	cpi	r25, 0x08	; 8
     212:	08 f0       	brcs	.+2      	; 0x216 <Endpoint_Write_Control_Stream_LE+0xb2>
     214:	80 c0       	rjmp	.+256    	; 0x316 <__stack+0x17>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     216:	df 01       	movw	r26, r30
     218:	11 96       	adiw	r26, 0x01	; 1
     21a:	80 81       	ld	r24, Z
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     21c:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     220:	a9 01       	movw	r20, r18
     222:	41 50       	subi	r20, 0x01	; 1
     224:	51 09       	sbc	r21, r1
				BytesInEndpoint++;
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	69 0f       	add	r22, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     22a:	41 15       	cp	r20, r1
     22c:	51 05       	cpc	r21, r1
     22e:	09 f4       	brne	.+2      	; 0x232 <Endpoint_Write_Control_Stream_LE+0xce>
     230:	7b c0       	rjmp	.+246    	; 0x328 <__stack+0x29>
     232:	68 30       	cpi	r22, 0x08	; 8
     234:	09 f4       	brne	.+2      	; 0x238 <Endpoint_Write_Control_Stream_LE+0xd4>
     236:	74 c0       	rjmp	.+232    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     238:	df 01       	movw	r26, r30
     23a:	12 96       	adiw	r26, 0x02	; 2
     23c:	81 81       	ldd	r24, Z+1	; 0x01
     23e:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     242:	a9 01       	movw	r20, r18
     244:	42 50       	subi	r20, 0x02	; 2
     246:	51 09       	sbc	r21, r1
				BytesInEndpoint++;
     248:	62 e0       	ldi	r22, 0x02	; 2
     24a:	69 0f       	add	r22, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     24c:	41 15       	cp	r20, r1
     24e:	51 05       	cpc	r21, r1
     250:	09 f4       	brne	.+2      	; 0x254 <Endpoint_Write_Control_Stream_LE+0xf0>
     252:	6a c0       	rjmp	.+212    	; 0x328 <__stack+0x29>
     254:	68 30       	cpi	r22, 0x08	; 8
     256:	09 f4       	brne	.+2      	; 0x25a <Endpoint_Write_Control_Stream_LE+0xf6>
     258:	63 c0       	rjmp	.+198    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     25a:	df 01       	movw	r26, r30
     25c:	13 96       	adiw	r26, 0x03	; 3
     25e:	82 81       	ldd	r24, Z+2	; 0x02
     260:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     264:	a9 01       	movw	r20, r18
     266:	43 50       	subi	r20, 0x03	; 3
     268:	51 09       	sbc	r21, r1
				BytesInEndpoint++;
     26a:	63 e0       	ldi	r22, 0x03	; 3
     26c:	69 0f       	add	r22, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     26e:	41 15       	cp	r20, r1
     270:	51 05       	cpc	r21, r1
     272:	09 f4       	brne	.+2      	; 0x276 <Endpoint_Write_Control_Stream_LE+0x112>
     274:	59 c0       	rjmp	.+178    	; 0x328 <__stack+0x29>
     276:	68 30       	cpi	r22, 0x08	; 8
     278:	09 f4       	brne	.+2      	; 0x27c <Endpoint_Write_Control_Stream_LE+0x118>
     27a:	52 c0       	rjmp	.+164    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     27c:	df 01       	movw	r26, r30
     27e:	14 96       	adiw	r26, 0x04	; 4
     280:	83 81       	ldd	r24, Z+3	; 0x03
     282:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     286:	a9 01       	movw	r20, r18
     288:	44 50       	subi	r20, 0x04	; 4
     28a:	51 09       	sbc	r21, r1
				BytesInEndpoint++;
     28c:	64 e0       	ldi	r22, 0x04	; 4
     28e:	69 0f       	add	r22, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     290:	41 15       	cp	r20, r1
     292:	51 05       	cpc	r21, r1
     294:	09 f4       	brne	.+2      	; 0x298 <Endpoint_Write_Control_Stream_LE+0x134>
     296:	48 c0       	rjmp	.+144    	; 0x328 <__stack+0x29>
     298:	68 30       	cpi	r22, 0x08	; 8
     29a:	09 f4       	brne	.+2      	; 0x29e <Endpoint_Write_Control_Stream_LE+0x13a>
     29c:	41 c0       	rjmp	.+130    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     29e:	df 01       	movw	r26, r30
     2a0:	15 96       	adiw	r26, 0x05	; 5
     2a2:	84 81       	ldd	r24, Z+4	; 0x04
     2a4:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     2a8:	a9 01       	movw	r20, r18
     2aa:	45 50       	subi	r20, 0x05	; 5
     2ac:	51 09       	sbc	r21, r1
				BytesInEndpoint++;
     2ae:	65 e0       	ldi	r22, 0x05	; 5
     2b0:	69 0f       	add	r22, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     2b2:	41 15       	cp	r20, r1
     2b4:	51 05       	cpc	r21, r1
     2b6:	c1 f1       	breq	.+112    	; 0x328 <__stack+0x29>
     2b8:	68 30       	cpi	r22, 0x08	; 8
     2ba:	91 f1       	breq	.+100    	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     2bc:	df 01       	movw	r26, r30
     2be:	16 96       	adiw	r26, 0x06	; 6
     2c0:	85 81       	ldd	r24, Z+5	; 0x05
     2c2:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     2c6:	a9 01       	movw	r20, r18
     2c8:	46 50       	subi	r20, 0x06	; 6
     2ca:	51 09       	sbc	r21, r1
				BytesInEndpoint++;
     2cc:	66 e0       	ldi	r22, 0x06	; 6
     2ce:	69 0f       	add	r22, r25
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     2d0:	41 15       	cp	r20, r1
     2d2:	51 05       	cpc	r21, r1
     2d4:	49 f1       	breq	.+82     	; 0x328 <__stack+0x29>
     2d6:	68 30       	cpi	r22, 0x08	; 8
     2d8:	19 f1       	breq	.+70     	; 0x320 <__stack+0x21>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     2da:	bf 01       	movw	r22, r30
     2dc:	69 5f       	subi	r22, 0xF9	; 249
     2de:	7f 4f       	sbci	r23, 0xFF	; 255
     2e0:	86 81       	ldd	r24, Z+6	; 0x06
     2e2:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     2e6:	a9 01       	movw	r20, r18
     2e8:	47 50       	subi	r20, 0x07	; 7
     2ea:	51 09       	sbc	r21, r1
				BytesInEndpoint++;
     2ec:	99 5f       	subi	r25, 0xF9	; 249
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     2ee:	41 15       	cp	r20, r1
     2f0:	51 05       	cpc	r21, r1
     2f2:	31 f1       	breq	.+76     	; 0x340 <__stack+0x41>
     2f4:	97 30       	cpi	r25, 0x07	; 7
     2f6:	01 f5       	brne	.+64     	; 0x338 <__stack+0x39>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     2f8:	87 81       	ldd	r24, Z+7	; 0x07
     2fa:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
     2fe:	28 50       	subi	r18, 0x08	; 8
     300:	31 09       	sbc	r19, r1
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     302:	38 96       	adiw	r30, 0x08	; 8
				Length--;
     304:	81 e0       	ldi	r24, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     306:	90 91 e8 00 	lds	r25, 0x00E8
     30a:	9e 77       	andi	r25, 0x7E	; 126
     30c:	90 93 e8 00 	sts	0x00E8, r25
     310:	3d cf       	rjmp	.-390    	; 0x18c <Endpoint_Write_Control_Stream_LE+0x28>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     312:	90 91 f2 00 	lds	r25, 0x00F2
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	98 30       	cpi	r25, 0x08	; 8
     31a:	a9 f3       	breq	.-22     	; 0x306 <__stack+0x7>
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	f3 cf       	rjmp	.-26     	; 0x306 <__stack+0x7>
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     320:	fd 01       	movw	r30, r26
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     322:	9a 01       	movw	r18, r20
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	ef cf       	rjmp	.-34     	; 0x306 <__stack+0x7>
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	68 30       	cpi	r22, 0x08	; 8
     32c:	09 f0       	breq	.+2      	; 0x330 <__stack+0x31>
     32e:	80 e0       	ldi	r24, 0x00	; 0
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     330:	fd 01       	movw	r30, r26
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	e7 cf       	rjmp	.-50     	; 0x306 <__stack+0x7>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     338:	fb 01       	movw	r30, r22
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     33a:	9a 01       	movw	r18, r20
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	e3 cf       	rjmp	.-58     	; 0x306 <__stack+0x7>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	98 30       	cpi	r25, 0x08	; 8
     344:	09 f0       	breq	.+2      	; 0x348 <__stack+0x49>
     346:	80 e0       	ldi	r24, 0x00	; 0
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     348:	fb 01       	movw	r30, r22
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	db cf       	rjmp	.-74     	; 0x306 <__stack+0x7>

00000350 <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     350:	1f 92       	push	r1
     352:	0f 92       	push	r0
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	0f 92       	push	r0
     358:	11 24       	eor	r1, r1
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	ef 93       	push	r30
     360:	ff 93       	push	r31
	uint8_t d = UDR1;
     362:	90 91 ce 00 	lds	r25, 0x00CE
	if (USB_DeviceState != DEVICE_STATE_Configured) return;
     366:	8e b3       	in	r24, 0x1e	; 30
     368:	84 30       	cpi	r24, 0x04	; 4
     36a:	69 f4       	brne	.+26     	; 0x386 <__vector_23+0x36>
	uint16_t tmp = USART2USB_BUFADDR;
	tmp |= USARTtoUSB_wrp;
     36c:	e0 91 20 02 	lds	r30, 0x0220
     370:	f0 e0       	ldi	r31, 0x00	; 0
	*((uint8_t*)tmp) = d;
     372:	f1 60       	ori	r31, 0x01	; 1
     374:	91 93       	st	Z+, r25
	tmp++;
	USARTtoUSB_wrp = tmp & 0xFF;
     376:	e0 93 20 02 	sts	0x0220, r30
	USARTtoUSB_cnt++;
     37a:	80 91 66 02 	lds	r24, 0x0266
     37e:	8f 5f       	subi	r24, 0xFF	; 255
     380:	80 93 66 02 	sts	0x0266, r24
	TCNT0 = 0;
     384:	16 bc       	out	0x26, r1	; 38
}
     386:	ff 91       	pop	r31
     388:	ef 91       	pop	r30
     38a:	9f 91       	pop	r25
     38c:	8f 91       	pop	r24
     38e:	0f 90       	pop	r0
     390:	0f be       	out	0x3f, r0	; 63
     392:	0f 90       	pop	r0
     394:	1f 90       	pop	r1
     396:	18 95       	reti

00000398 <__vector_11>:
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK __attribute__((flatten)) )
{
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	8f 93       	push	r24
     3a4:	9f 93       	push	r25
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
     3a6:	80 91 e1 00 	lds	r24, 0x00E1
     3aa:	80 ff       	sbrs	r24, 0
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <__vector_11+0x1e>
     3ae:	80 91 e2 00 	lds	r24, 0x00E2
     3b2:	80 fd       	sbrc	r24, 0
     3b4:	4e c0       	rjmp	.+156    	; 0x452 <__vector_11+0xba>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
     3b6:	80 91 e1 00 	lds	r24, 0x00E1
     3ba:	84 ff       	sbrs	r24, 4
     3bc:	27 c0       	rjmp	.+78     	; 0x40c <__vector_11+0x74>
     3be:	80 91 e2 00 	lds	r24, 0x00E2
     3c2:	84 ff       	sbrs	r24, 4
     3c4:	23 c0       	rjmp	.+70     	; 0x40c <__vector_11+0x74>
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     3ca:	89 b5       	in	r24, 0x29	; 41
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     3d0:	09 b4       	in	r0, 0x29	; 41
     3d2:	00 fe       	sbrs	r0, 0
     3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <__vector_11+0x38>
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     3d6:	80 91 d8 00 	lds	r24, 0x00D8
     3da:	8f 7d       	andi	r24, 0xDF	; 223
     3dc:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
     3e0:	80 91 e1 00 	lds	r24, 0x00E1
     3e4:	8f 7e       	andi	r24, 0xEF	; 239
     3e6:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
     3ea:	80 91 e2 00 	lds	r24, 0x00E2
     3ee:	8f 7e       	andi	r24, 0xEF	; 239
     3f0:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
     3f4:	80 91 e2 00 	lds	r24, 0x00E2
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	80 93 e2 00 	sts	0x00E2, r24
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     3fe:	80 91 1f 02 	lds	r24, 0x021F
     402:	88 23       	and	r24, r24
     404:	09 f4       	brne	.+2      	; 0x408 <__vector_11+0x70>
     406:	aa c0       	rjmp	.+340    	; 0x55c <__vector_11+0x1c4>
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	8e bb       	out	0x1e, r24	; 30
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     40c:	80 91 e1 00 	lds	r24, 0x00E1
     410:	83 ff       	sbrs	r24, 3
     412:	04 c0       	rjmp	.+8      	; 0x41c <__vector_11+0x84>
     414:	80 91 e2 00 	lds	r24, 0x00E2
     418:	83 fd       	sbrc	r24, 3
     41a:	32 c0       	rjmp	.+100    	; 0x480 <__vector_11+0xe8>
		#endif

		EVENT_USB_Device_Reset();
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     41c:	80 91 e1 00 	lds	r24, 0x00E1
     420:	82 ff       	sbrs	r24, 2
     422:	04 c0       	rjmp	.+8      	; 0x42c <__vector_11+0x94>
     424:	80 91 e2 00 	lds	r24, 0x00E2
     428:	82 fd       	sbrc	r24, 2
     42a:	07 c0       	rjmp	.+14     	; 0x43a <__vector_11+0xa2>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
     42c:	9f 91       	pop	r25
     42e:	8f 91       	pop	r24
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti
		EVENT_USB_Device_Reset();
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
	{
		USB_INT_Clear(USB_INT_SOFI);
     43a:	80 91 e1 00 	lds	r24, 0x00E1
     43e:	8b 7f       	andi	r24, 0xFB	; 251
     440:	80 93 e1 00 	sts	0x00E1, r24
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
     444:	9f 91       	pop	r25
     446:	8f 91       	pop	r24
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
	{
		USB_INT_Clear(USB_INT_SUSPEND);
     452:	80 91 e1 00 	lds	r24, 0x00E1
     456:	8e 7f       	andi	r24, 0xFE	; 254
     458:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
     45c:	80 91 e2 00 	lds	r24, 0x00E2
     460:	8e 7f       	andi	r24, 0xFE	; 254
     462:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
     466:	80 91 e2 00 	lds	r24, 0x00E2
     46a:	80 61       	ori	r24, 0x10	; 16
     46c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     470:	80 91 d8 00 	lds	r24, 0x00D8
     474:	80 62       	ori	r24, 0x20	; 32
     476:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     47a:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     47c:	1e ba       	out	0x1e, r1	; 30
     47e:	9b cf       	rjmp	.-202    	; 0x3b6 <__vector_11+0x1e>
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
	{
		USB_INT_Clear(USB_INT_EORSTI);
     480:	80 91 e1 00 	lds	r24, 0x00E1
     484:	87 7f       	andi	r24, 0xF7	; 247
     486:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
     48e:	10 92 1f 02 	sts	0x021F, r1

		USB_INT_Clear(USB_INT_SUSPEND);
     492:	90 91 e1 00 	lds	r25, 0x00E1
     496:	9e 7f       	andi	r25, 0xFE	; 254
     498:	90 93 e1 00 	sts	0x00E1, r25
		USB_INT_Disable(USB_INT_SUSPEND);
     49c:	90 91 e2 00 	lds	r25, 0x00E2
     4a0:	9e 7f       	andi	r25, 0xFE	; 254
     4a2:	90 93 e2 00 	sts	0x00E2, r25
		USB_INT_Enable(USB_INT_WAKEUP);
     4a6:	90 91 e2 00 	lds	r25, 0x00E2
     4aa:	90 61       	ori	r25, 0x10	; 16
     4ac:	90 93 e2 00 	sts	0x00E2, r25
	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
     4b0:	10 92 f4 00 	sts	0x00F4, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4b4:	10 92 e9 00 	sts	0x00E9, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     4b8:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
     4bc:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
     4c0:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     4c4:	90 91 eb 00 	lds	r25, 0x00EB
     4c8:	9e 7f       	andi	r25, 0xFE	; 254
     4ca:	90 93 eb 00 	sts	0x00EB, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	90 93 e9 00 	sts	0x00E9, r25
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     4d4:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
     4d8:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
     4dc:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     4e0:	90 91 eb 00 	lds	r25, 0x00EB
     4e4:	9e 7f       	andi	r25, 0xFE	; 254
     4e6:	90 93 eb 00 	sts	0x00EB, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     4ea:	80 93 e9 00 	sts	0x00E9, r24
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     4ee:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
     4f2:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
     4f6:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     4fa:	90 91 eb 00 	lds	r25, 0x00EB
     4fe:	9e 7f       	andi	r25, 0xFE	; 254
     500:	90 93 eb 00 	sts	0x00EB, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     504:	93 e0       	ldi	r25, 0x03	; 3
     506:	90 93 e9 00 	sts	0x00E9, r25
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     50a:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
     50e:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
     512:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     516:	90 91 eb 00 	lds	r25, 0x00EB
     51a:	9e 7f       	andi	r25, 0xFE	; 254
     51c:	90 93 eb 00 	sts	0x00EB, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     520:	94 e0       	ldi	r25, 0x04	; 4
     522:	90 93 e9 00 	sts	0x00E9, r25
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     526:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
     52a:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
     52e:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     532:	90 91 eb 00 	lds	r25, 0x00EB
     536:	9e 7f       	andi	r25, 0xFE	; 254
     538:	90 93 eb 00 	sts	0x00EB, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     53c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     540:	90 91 eb 00 	lds	r25, 0x00EB
     544:	91 60       	ori	r25, 0x01	; 1
     546:	90 93 eb 00 	sts	0x00EB, r25
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     54a:	10 92 ed 00 	sts	0x00ED, r1

	UECFG0X = UECFG0XData;
     54e:	10 92 ec 00 	sts	0x00EC, r1
	UECFG1X = UECFG1XData;
     552:	80 93 ed 00 	sts	0x00ED, r24
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     556:	80 91 ee 00 	lds	r24, 0x00EE
     55a:	60 cf       	rjmp	.-320    	; 0x41c <__vector_11+0x84>

		USB_INT_Disable(USB_INT_WAKEUP);
		USB_INT_Enable(USB_INT_SUSPEND);
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	8e bb       	out	0x1e, r24	; 30
     560:	55 cf       	rjmp	.-342    	; 0x40c <__vector_11+0x74>

00000562 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	aa 97       	sbiw	r28, 0x2a	; 42
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     576:	84 b7       	in	r24, 0x34	; 52
     578:	87 7f       	andi	r24, 0xF7	; 247
     57a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	a8 95       	wdr
     582:	80 91 60 00 	lds	r24, 0x0060
     586:	88 61       	ori	r24, 0x18	; 24
     588:	80 93 60 00 	sts	0x0060, r24
     58c:	10 92 60 00 	sts	0x0060, r1
     590:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     592:	87 e6       	ldi	r24, 0x67	; 103
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	90 93 cd 00 	sts	0x00CD, r25
     59a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     5a4:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     5a8:	88 e1       	ldi	r24, 0x18	; 24
     5aa:	80 93 c9 00 	sts	0x00C9, r24
				
				DDRD  |= (1 << 3);
     5ae:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     5b0:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     5b2:	8a b1       	in	r24, 0x0a	; 10
     5b4:	80 63       	ori	r24, 0x30	; 48
     5b6:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
     5b8:	8b b1       	in	r24, 0x0b	; 11
     5ba:	80 63       	ori	r24, 0x30	; 48
     5bc:	8b b9       	out	0x0b, r24	; 11
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     5be:	10 92 e2 00 	sts	0x00E2, r1
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     5c2:	10 92 e1 00 	sts	0x00E1, r1
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
     5c6:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
     5c8:	10 92 1f 02 	sts	0x021F, r1
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     5cc:	84 e0       	ldi	r24, 0x04	; 4
     5ce:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     5d0:	89 b5       	in	r24, 0x29	; 41
     5d2:	82 60       	ori	r24, 0x02	; 2
     5d4:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     5d6:	09 b4       	in	r0, 0x29	; 41
     5d8:	00 fe       	sbrs	r0, 0
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <main+0x74>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     5dc:	80 91 d8 00 	lds	r24, 0x00D8
				
				USBCON = (Temp & ~(1 << USBE));
     5e0:	98 2f       	mov	r25, r24
     5e2:	9f 77       	andi	r25, 0x7F	; 127
     5e4:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     5e8:	80 68       	ori	r24, 0x80	; 128
     5ea:	80 93 d8 00 	sts	0x00D8, r24
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
     5ee:	80 91 63 00 	lds	r24, 0x0063
     5f2:	8e 7f       	andi	r24, 0xFE	; 254
     5f4:	80 93 63 00 	sts	0x0063, r24
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     5f8:	80 91 d8 00 	lds	r24, 0x00D8
     5fc:	8f 7d       	andi	r24, 0xDF	; 223
     5fe:	80 93 d8 00 	sts	0x00D8, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     602:	80 91 e0 00 	lds	r24, 0x00E0
     606:	8e 7f       	andi	r24, 0xFE	; 254
     608:	80 93 e0 00 	sts	0x00E0, r24
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
     60c:	80 91 e1 00 	lds	r24, 0x00E1
     610:	8e 7f       	andi	r24, 0xFE	; 254
     612:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPEND);
     616:	80 91 e2 00 	lds	r24, 0x00E2
     61a:	81 60       	ori	r24, 0x01	; 1
     61c:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Clear(USB_INT_EORSTI);
     620:	80 91 e1 00 	lds	r24, 0x00E1
     624:	87 7f       	andi	r24, 0xF7	; 247
     626:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_EORSTI);
     62a:	80 91 e2 00 	lds	r24, 0x00E2
     62e:	88 60       	ori	r24, 0x08	; 8
     630:	80 93 e2 00 	sts	0x00E2, r24

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	80 93 16 02 	sts	0x0216, r24
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS01) | (1 << CS00);
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	85 bd       	out	0x25, r24	; 37

	/* Pull target /RESET line high */
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
     63e:	5f 9a       	sbi	0x0b, 7	; 11
	AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
     640:	57 9a       	sbi	0x0a, 7	; 10
int main(void)
{
	uint8_t USBtoUSART_cnt = 0;
	SetupHardware();

	sei();
     642:	78 94       	sei
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	uint8_t USBtoUSART_cnt = 0;
     644:	10 e0       	ldi	r17, 0x00	; 0
     646:	46 e2       	ldi	r20, 0x26	; 38
     648:	24 2e       	mov	r2, r20
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	34 2e       	mov	r3, r20
     64e:	52 ef       	ldi	r21, 0xF2	; 242
     650:	45 2e       	mov	r4, r21
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	55 2e       	mov	r5, r21
     656:	68 ed       	ldi	r22, 0xD8	; 216
     658:	66 2e       	mov	r6, r22
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	76 2e       	mov	r7, r22
     65e:	7d e0       	ldi	r23, 0x0D	; 13
     660:	c7 2e       	mov	r12, r23
     662:	72 e0       	ldi	r23, 0x02	; 2
     664:	d7 2e       	mov	r13, r23
     666:	ff 24       	eor	r15, r15
     668:	f3 94       	inc	r15

	sei();

	for (;;)
	{
		uint8_t timer_ovrflw = TIFR0 & _BV(TOV0);
     66a:	85 b3       	in	r24, 0x15	; 21
		if (timer_ovrflw) TIFR0 = _BV(TOV0);
     66c:	28 2f       	mov	r18, r24
     66e:	21 70       	andi	r18, 0x01	; 1
     670:	80 ff       	sbrs	r24, 0
     672:	4c c0       	rjmp	.+152    	; 0x70c <main+0x1aa>
     674:	f5 ba       	out	0x15, r15	; 21
		/* I'd like to get rid of these counters... */
		uint8_t cnt = USARTtoUSB_cnt;
     676:	90 91 66 02 	lds	r25, 0x0266
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		if ( ((cnt >= USART2USB_NEAR_FULL) || (timer_ovrflw && cnt)) &&
     67a:	99 23       	and	r25, r25
     67c:	21 f0       	breq	.+8      	; 0x686 <main+0x124>
}

/* This about writing data to endpoint. User will take care of the writing if needed. */
uint8_t CDC_Device_SendByte_Prep(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     67e:	8e b3       	in	r24, 0x1e	; 30
     680:	84 30       	cpi	r24, 0x04	; 4
     682:	09 f4       	brne	.+2      	; 0x686 <main+0x124>
     684:	4c c0       	rjmp	.+152    	; 0x71e <main+0x1bc>
#endif
		} else {
			/* My guess is that this branch will be run regularly, even during full output, because
			   USB hosts are poor at servicing devices... thus moved the control IF service here too. */
			/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
			if (USBtoUSART_cnt < (USB2USART_BUFLEN-1)) {
     686:	1f 33       	cpi	r17, 0x3F	; 63
     688:	08 f4       	brcc	.+2      	; 0x68c <main+0x12a>
     68a:	66 c0       	rjmp	.+204    	; 0x758 <main+0x1f6>
				  USBtoUSART_cnt++;
				}
			}
			/* Make This less important than the above thing. */
			if (USBtoUSART_cnt) {
				if (UCSR1A & (1 << UDRE1)) {
     68c:	80 91 c8 00 	lds	r24, 0x00C8
     690:	85 ff       	sbrs	r24, 5
     692:	12 c0       	rjmp	.+36     	; 0x6b8 <main+0x156>
					uint8_t rdp = USBtoUSART_rdp;
     694:	80 91 21 02 	lds	r24, 0x0221
					UDR1 = USBtoUSART_buf[rdp];
     698:	e8 2f       	mov	r30, r24
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	ee 5d       	subi	r30, 0xDE	; 222
     69e:	fd 4f       	sbci	r31, 0xFD	; 253
     6a0:	90 81       	ld	r25, Z
     6a2:	90 93 ce 00 	sts	0x00CE, r25
					rdp++;
     6a6:	8f 5f       	subi	r24, 0xFF	; 255
					rdp &= (USB2USART_BUFLEN-1);
					USBtoUSART_rdp = rdp;
     6a8:	8f 73       	andi	r24, 0x3F	; 63
     6aa:	80 93 21 02 	sts	0x0221, r24
					USBtoUSART_cnt--;
     6ae:	11 50       	subi	r17, 0x01	; 1
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
     6b0:	5c 98       	cbi	0x0b, 4	; 11
				  	LEDs_TurnOnLEDs(LEDMASK_RX);
					PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	80 93 64 02 	sts	0x0264, r24
				}
			}
			if (timer_ovrflw) {
     6b8:	22 23       	and	r18, r18
     6ba:	a1 f0       	breq	.+40     	; 0x6e4 <main+0x182>
				/* Turn off TX LED(s) once the TX pulse period has elapsed */
				if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
     6bc:	80 91 63 02 	lds	r24, 0x0263
     6c0:	88 23       	and	r24, r24
     6c2:	31 f0       	breq	.+12     	; 0x6d0 <main+0x16e>
     6c4:	81 50       	subi	r24, 0x01	; 1
     6c6:	80 93 63 02 	sts	0x0263, r24
     6ca:	81 11       	cpse	r24, r1
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <main+0x16e>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
     6ce:	5d 9a       	sbi	0x0b, 5	; 11
				  LEDs_TurnOffLEDs(LEDMASK_TX);
				if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
     6d0:	80 91 64 02 	lds	r24, 0x0264
     6d4:	88 23       	and	r24, r24
     6d6:	31 f0       	breq	.+12     	; 0x6e4 <main+0x182>
     6d8:	81 50       	subi	r24, 0x01	; 1
     6da:	80 93 64 02 	sts	0x0264, r24
     6de:	81 11       	cpse	r24, r1
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <main+0x182>
     6e2:	5c 9a       	sbi	0x0b, 4	; 11
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     6e4:	8e b3       	in	r24, 0x1e	; 30
     6e6:	88 23       	and	r24, r24
     6e8:	09 f4       	brne	.+2      	; 0x6ec <main+0x18a>
     6ea:	bf cf       	rjmp	.-130    	; 0x66a <main+0x108>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     6ec:	00 91 e9 00 	lds	r16, 0x00E9
     6f0:	07 70       	andi	r16, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     6f2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     6f6:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     6fa:	83 fd       	sbrc	r24, 3
     6fc:	5f c0       	rjmp	.+190    	; 0x7bc <main+0x25a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     6fe:	00 93 e9 00 	sts	0x00E9, r16

	sei();

	for (;;)
	{
		uint8_t timer_ovrflw = TIFR0 & _BV(TOV0);
     702:	85 b3       	in	r24, 0x15	; 21
		if (timer_ovrflw) TIFR0 = _BV(TOV0);
     704:	28 2f       	mov	r18, r24
     706:	21 70       	andi	r18, 0x01	; 1
     708:	80 fd       	sbrc	r24, 0
     70a:	b4 cf       	rjmp	.-152    	; 0x674 <main+0x112>
		/* I'd like to get rid of these counters... */
		uint8_t cnt = USARTtoUSB_cnt;
     70c:	90 91 66 02 	lds	r25, 0x0266
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		if ( ((cnt >= USART2USB_NEAR_FULL) || (timer_ovrflw && cnt)) &&
     710:	90 34       	cpi	r25, 0x40	; 64
     712:	08 f4       	brcc	.+2      	; 0x716 <main+0x1b4>
     714:	b8 cf       	rjmp	.-144    	; 0x686 <main+0x124>
     716:	8e b3       	in	r24, 0x1e	; 30
     718:	84 30       	cpi	r24, 0x04	; 4
     71a:	09 f0       	breq	.+2      	; 0x71e <main+0x1bc>
     71c:	b4 cf       	rjmp	.-152    	; 0x686 <main+0x124>
     71e:	40 91 0f 02 	lds	r20, 0x020F
     722:	50 91 10 02 	lds	r21, 0x0210
     726:	60 91 11 02 	lds	r22, 0x0211
     72a:	70 91 12 02 	lds	r23, 0x0212
     72e:	45 2b       	or	r20, r21
     730:	46 2b       	or	r20, r22
     732:	47 2b       	or	r20, r23
     734:	09 f4       	brne	.+2      	; 0x738 <main+0x1d6>
     736:	a7 cf       	rjmp	.-178    	; 0x686 <main+0x124>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     738:	80 91 01 02 	lds	r24, 0x0201
     73c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     740:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
     744:	85 fd       	sbrc	r24, 5
     746:	7e c0       	rjmp	.+252    	; 0x844 <main+0x2e2>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     748:	80 91 e8 00 	lds	r24, 0x00E8
     74c:	8e 77       	andi	r24, 0x7E	; 126
     74e:	80 93 e8 00 	sts	0x00E8, r24
#endif
		} else {
			/* My guess is that this branch will be run regularly, even during full output, because
			   USB hosts are poor at servicing devices... thus moved the control IF service here too. */
			/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
			if (USBtoUSART_cnt < (USB2USART_BUFLEN-1)) {
     752:	1f 33       	cpi	r17, 0x3F	; 63
     754:	08 f0       	brcs	.+2      	; 0x758 <main+0x1f6>
     756:	9a cf       	rjmp	.-204    	; 0x68c <main+0x12a>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     758:	8e b3       	in	r24, 0x1e	; 30
     75a:	84 30       	cpi	r24, 0x04	; 4
     75c:	09 f0       	breq	.+2      	; 0x760 <main+0x1fe>
     75e:	b0 c0       	rjmp	.+352    	; 0x8c0 <main+0x35e>
     760:	80 91 0f 02 	lds	r24, 0x020F
     764:	90 91 10 02 	lds	r25, 0x0210
     768:	a0 91 11 02 	lds	r26, 0x0211
     76c:	b0 91 12 02 	lds	r27, 0x0212
     770:	89 2b       	or	r24, r25
     772:	8a 2b       	or	r24, r26
     774:	8b 2b       	or	r24, r27
     776:	09 f4       	brne	.+2      	; 0x77a <main+0x218>
     778:	a3 c0       	rjmp	.+326    	; 0x8c0 <main+0x35e>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
     77a:	80 91 05 02 	lds	r24, 0x0205
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     77e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     782:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsOUTReceived())
     786:	82 ff       	sbrs	r24, 2
     788:	9b c0       	rjmp	.+310    	; 0x8c0 <main+0x35e>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     78a:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     78e:	88 23       	and	r24, r24
     790:	09 f4       	brne	.+2      	; 0x794 <main+0x232>
     792:	8d c0       	rjmp	.+282    	; 0x8ae <main+0x34c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     794:	90 91 f1 00 	lds	r25, 0x00F1
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     798:	80 91 f2 00 	lds	r24, 0x00F2
		  ReceivedByte = Endpoint_Read_Byte();
	
		if (!(Endpoint_BytesInEndpoint()))
     79c:	88 23       	and	r24, r24
     79e:	09 f4       	brne	.+2      	; 0x7a2 <main+0x240>
     7a0:	8a c2       	rjmp	.+1300   	; 0xcb6 <main+0x754>
				int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);

				/* Read byte from the USB OUT endpoint into the USART transmit buffer */
				if (!(ReceivedByte < 0)) {
				  uint8_t wrp = USBtoUSART_wrp;
     7a2:	80 91 62 02 	lds	r24, 0x0262
				  USBtoUSART_buf[wrp] = ReceivedByte;
     7a6:	e8 2f       	mov	r30, r24
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	ee 5d       	subi	r30, 0xDE	; 222
     7ac:	fd 4f       	sbci	r31, 0xFD	; 253
     7ae:	90 83       	st	Z, r25
				  wrp++;
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
				  wrp &= (USB2USART_BUFLEN-1);
				  USBtoUSART_wrp = wrp;
     7b2:	8f 73       	andi	r24, 0x3F	; 63
     7b4:	80 93 62 02 	sts	0x0262, r24
				  USBtoUSART_cnt++;
     7b8:	1f 5f       	subi	r17, 0xFF	; 255
     7ba:	68 cf       	rjmp	.-304    	; 0x68c <main+0x12a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     7bc:	30 91 f1 00 	lds	r19, 0x00F1
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
     7c0:	30 93 17 02 	sts	0x0217, r19
     7c4:	20 91 f1 00 	lds	r18, 0x00F1
     7c8:	20 93 18 02 	sts	0x0218, r18
     7cc:	80 91 f1 00 	lds	r24, 0x00F1
     7d0:	80 93 19 02 	sts	0x0219, r24
     7d4:	80 91 f1 00 	lds	r24, 0x00F1
     7d8:	80 93 1a 02 	sts	0x021A, r24
     7dc:	80 91 f1 00 	lds	r24, 0x00F1
     7e0:	80 93 1b 02 	sts	0x021B, r24
     7e4:	80 91 f1 00 	lds	r24, 0x00F1
     7e8:	80 93 1c 02 	sts	0x021C, r24
     7ec:	80 91 f1 00 	lds	r24, 0x00F1
     7f0:	80 93 1d 02 	sts	0x021D, r24
     7f4:	80 91 f1 00 	lds	r24, 0x00F1
     7f8:	80 93 1e 02 	sts	0x021E, r24
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
	
	switch (USB_ControlRequest.bRequest)
     7fc:	82 2f       	mov	r24, r18
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	8a 30       	cpi	r24, 0x0A	; 10
     802:	91 05       	cpc	r25, r1
     804:	08 f4       	brcc	.+2      	; 0x808 <main+0x2a6>
     806:	60 c0       	rjmp	.+192    	; 0x8c8 <main+0x366>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     808:	80 91 e8 00 	lds	r24, 0x00E8

}

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     80c:	83 ff       	sbrs	r24, 3
     80e:	0b c0       	rjmp	.+22     	; 0x826 <main+0x2c4>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     810:	80 91 00 02 	lds	r24, 0x0200
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	40 91 1b 02 	lds	r20, 0x021B
     81a:	50 91 1c 02 	lds	r21, 0x021C
     81e:	48 17       	cp	r20, r24
     820:	59 07       	cpc	r21, r25
     822:	09 f4       	brne	.+2      	; 0x826 <main+0x2c4>
     824:	4e c2       	rjmp	.+1180   	; 0xcc2 <main+0x760>
     826:	80 91 e8 00 	lds	r24, 0x00E8
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
     82a:	83 ff       	sbrs	r24, 3
     82c:	68 cf       	rjmp	.-304    	; 0x6fe <main+0x19c>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     82e:	80 91 eb 00 	lds	r24, 0x00EB
     832:	80 62       	ori	r24, 0x20	; 32
     834:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     838:	80 91 e8 00 	lds	r24, 0x00E8
     83c:	87 7f       	andi	r24, 0xF7	; 247
     83e:	80 93 e8 00 	sts	0x00E8, r24
     842:	5d cf       	rjmp	.-326    	; 0x6fe <main+0x19c>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     844:	80 91 f2 00 	lds	r24, 0x00F2
		uint8_t cnt = USARTtoUSB_cnt;
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		if ( ((cnt >= USART2USB_NEAR_FULL) || (timer_ovrflw && cnt)) &&
			(CDC_Device_SendByte_Prep(&VirtualSerial_CDC_Interface) == 0) ) {

			uint8_t txcnt = CDC_IN_EPSIZE - Endpoint_BytesInEndpoint();
     848:	20 e4       	ldi	r18, 0x40	; 64
     84a:	28 1b       	sub	r18, r24
			if (txcnt > cnt) txcnt = cnt;
     84c:	92 17       	cp	r25, r18
     84e:	58 f5       	brcc	.+86     	; 0x8a6 <main+0x344>
     850:	89 2f       	mov	r24, r25
     852:	29 2f       	mov	r18, r25
			if (cnt > txcnt) cnt = txcnt;
			uint16_t tmp = USART2USB_BUFADDR;
			tmp |= USARTtoUSB_rdp;
     854:	e0 91 65 02 	lds	r30, 0x0265
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	f1 60       	ori	r31, 0x01	; 1
			do {
				uint8_t d = *((uint8_t*)tmp);
     85c:	91 91       	ld	r25, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     85e:	90 93 f1 00 	sts	0x00F1, r25
                                Endpoint_Write_Byte(d);
                                tmp = (USART2USB_BUFADDR & 0xFF00) | ((tmp+1)&0xFF);
     862:	ff 27       	eor	r31, r31
     864:	f1 60       	ori	r31, 0x01	; 1
			} while (--txcnt);
     866:	81 50       	subi	r24, 0x01	; 1
     868:	c9 f7       	brne	.-14     	; 0x85c <main+0x2fa>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     86a:	80 91 e8 00 	lds	r24, 0x00E8
     86e:	8e 77       	andi	r24, 0x7E	; 126
     870:	80 93 e8 00 	sts	0x00E8, r24
	                Endpoint_ClearIN();
			USARTtoUSB_rdp = tmp & 0xFF;
     874:	e0 93 65 02 	sts	0x0265, r30
			cli();
     878:	f8 94       	cli
			/* This will be logically OK, even if more bytes arrived during TX,
			 * because we sent cnt bytes, so removed that much from the buffer. */
			USARTtoUSB_cnt -= cnt;
     87a:	80 91 66 02 	lds	r24, 0x0266
     87e:	82 1b       	sub	r24, r18
     880:	80 93 66 02 	sts	0x0266, r24
			sei();
     884:	78 94       	sei
				PORTD |= LEDS_ALL_LEDS;
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
     886:	5d 98       	cbi	0x0b, 5	; 11
			LEDs_TurnOnLEDs(LEDMASK_TX);
			PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     888:	83 e0       	ldi	r24, 0x03	; 3
     88a:	80 93 63 02 	sts	0x0263, r24

#if 1
			/* This prevents TX from forgetting to turn off RX led. */
			/* The RX led period will be saddened though */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
     88e:	80 91 64 02 	lds	r24, 0x0264
     892:	88 23       	and	r24, r24
     894:	09 f4       	brne	.+2      	; 0x898 <main+0x336>
     896:	e9 ce       	rjmp	.-558    	; 0x66a <main+0x108>
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	80 93 64 02 	sts	0x0264, r24
     89e:	81 11       	cpse	r24, r1
     8a0:	e4 ce       	rjmp	.-568    	; 0x66a <main+0x108>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
     8a2:	5c 9a       	sbi	0x0b, 4	; 11
     8a4:	e2 ce       	rjmp	.-572    	; 0x66a <main+0x108>
		if ( ((cnt >= USART2USB_NEAR_FULL) || (timer_ovrflw && cnt)) &&
			(CDC_Device_SendByte_Prep(&VirtualSerial_CDC_Interface) == 0) ) {

			uint8_t txcnt = CDC_IN_EPSIZE - Endpoint_BytesInEndpoint();
			if (txcnt > cnt) txcnt = cnt;
			if (cnt > txcnt) cnt = txcnt;
     8a6:	82 2f       	mov	r24, r18
     8a8:	29 17       	cp	r18, r25
     8aa:	a0 f2       	brcs	.-88     	; 0x854 <main+0x2f2>
     8ac:	d2 cf       	rjmp	.-92     	; 0x852 <main+0x2f0>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     8ae:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_Byte();
	
		if (!(Endpoint_BytesInEndpoint()))
     8b2:	81 11       	cpse	r24, r1
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <main+0x35e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8b6:	80 91 e8 00 	lds	r24, 0x00E8
     8ba:	8b 77       	andi	r24, 0x7B	; 123
     8bc:	80 93 e8 00 	sts	0x00E8, r24
				  USBtoUSART_wrp = wrp;
				  USBtoUSART_cnt++;
				}
			}
			/* Make This less important than the above thing. */
			if (USBtoUSART_cnt) {
     8c0:	11 23       	and	r17, r17
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <main+0x364>
     8c4:	f9 ce       	rjmp	.-526    	; 0x6b8 <main+0x156>
     8c6:	e2 ce       	rjmp	.-572    	; 0x68c <main+0x12a>
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
	
	switch (USB_ControlRequest.bRequest)
     8c8:	fc 01       	movw	r30, r24
     8ca:	e6 5c       	subi	r30, 0xC6	; 198
     8cc:	ff 4f       	sbci	r31, 0xFF	; 255
     8ce:	d0 c4       	rjmp	.+2464   	; 0x1270 <__tablejump2__>
     8d0:	31 11       	cpse	r19, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     8d2:	9a cf       	rjmp	.-204    	; 0x808 <main+0x2a6>
     8d4:	80 91 19 02 	lds	r24, 0x0219
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     8d8:	90 91 1a 02 	lds	r25, 0x021A
     8dc:	99 27       	eor	r25, r25
     8de:	02 97       	sbiw	r24, 0x02	; 2
     8e0:	0c f0       	brlt	.+2      	; 0x8e4 <main+0x382>
     8e2:	a1 cf       	rjmp	.-190    	; 0x826 <main+0x2c4>
     8e4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8e8:	87 7f       	andi	r24, 0xF7	; 247
     8ea:	80 93 e8 00 	sts	0x00E8, r24
     8ee:	80 91 19 02 	lds	r24, 0x0219
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     8f2:	80 93 1f 02 	sts	0x021F, r24
     8f6:	90 91 17 02 	lds	r25, 0x0217
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     8fa:	97 ff       	sbrs	r25, 7
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <main+0x3a4>
     8fe:	cb c1       	rjmp	.+918    	; 0xc96 <main+0x734>
     900:	9e b3       	in	r25, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     902:	99 23       	and	r25, r25
     904:	59 f0       	breq	.+22     	; 0x91c <main+0x3ba>
     906:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     90a:	90 ff       	sbrs	r25, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     90c:	f9 cf       	rjmp	.-14     	; 0x900 <main+0x39e>
     90e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     912:	8e 77       	andi	r24, 0x7E	; 126
     914:	80 93 e8 00 	sts	0x00E8, r24
     918:	80 91 1f 02 	lds	r24, 0x021F
     91c:	81 11       	cpse	r24, r1

	Endpoint_ClearStatusStage();

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
     91e:	c9 c1       	rjmp	.+914    	; 0xcb2 <main+0x750>
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	8e bb       	out	0x1e, r24	; 30
     924:	89 e0       	ldi	r24, 0x09	; 9
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     926:	f6 01       	movw	r30, r12
     928:	11 92       	st	Z+, r1
     92a:	8a 95       	dec	r24
     92c:	e9 f7       	brne	.-6      	; 0x928 <main+0x3c6>
     92e:	20 91 02 02 	lds	r18, 0x0202

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
     932:	30 91 03 02 	lds	r19, 0x0203
     936:	80 91 04 02 	lds	r24, 0x0204
     93a:	88 23       	and	r24, r24
     93c:	09 f4       	brne	.+2      	; 0x940 <main+0x3de>
     93e:	3d c3       	rjmp	.+1658   	; 0xfba <main+0xa58>
     940:	96 e0       	ldi	r25, 0x06	; 6
     942:	60 91 01 02 	lds	r22, 0x0201
     946:	29 30       	cpi	r18, 0x09	; 9
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     948:	31 05       	cpc	r19, r1
     94a:	60 f0       	brcs	.+24     	; 0x964 <main+0x402>
     94c:	48 e0       	ldi	r20, 0x08	; 8
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	8f 5f       	subi	r24, 0xFF	; 255
				{
					MaskVal++;
     954:	44 0f       	add	r20, r20
					CheckBytes <<= 1;
     956:	55 1f       	adc	r21, r21
     958:	42 17       	cp	r20, r18
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     95a:	53 07       	cpc	r21, r19
     95c:	d0 f3       	brcs	.-12     	; 0x952 <main+0x3f0>
     95e:	82 95       	swap	r24
     960:	80 7f       	andi	r24, 0xF0	; 240
     962:	98 2b       	or	r25, r24
     964:	60 93 e9 00 	sts	0x00E9, r22
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     968:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     96c:	81 60       	ori	r24, 0x01	; 1
     96e:	80 93 eb 00 	sts	0x00EB, r24
     972:	10 92 ed 00 	sts	0x00ED, r1
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     976:	81 e8       	ldi	r24, 0x81	; 129

	UECFG0X = UECFG0XData;
     978:	80 93 ec 00 	sts	0x00EC, r24
     97c:	90 93 ed 00 	sts	0x00ED, r25
	UECFG1X = UECFG1XData;
     980:	80 91 ee 00 	lds	r24, 0x00EE
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     984:	87 ff       	sbrs	r24, 7
     986:	4f cf       	rjmp	.-354    	; 0x826 <main+0x2c4>
     988:	80 91 08 02 	lds	r24, 0x0208
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
     98c:	88 23       	and	r24, r24
     98e:	09 f4       	brne	.+2      	; 0x992 <main+0x430>
     990:	16 c3       	rjmp	.+1580   	; 0xfbe <main+0xa5c>
     992:	96 e0       	ldi	r25, 0x06	; 6
     994:	40 91 06 02 	lds	r20, 0x0206
     998:	50 91 07 02 	lds	r21, 0x0207
     99c:	60 91 05 02 	lds	r22, 0x0205
     9a0:	49 30       	cpi	r20, 0x09	; 9
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     9a2:	51 05       	cpc	r21, r1
     9a4:	60 f0       	brcs	.+24     	; 0x9be <main+0x45c>
     9a6:	28 e0       	ldi	r18, 0x08	; 8
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	8f 5f       	subi	r24, 0xFF	; 255
				{
					MaskVal++;
     9ae:	22 0f       	add	r18, r18
					CheckBytes <<= 1;
     9b0:	33 1f       	adc	r19, r19
     9b2:	24 17       	cp	r18, r20
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     9b4:	35 07       	cpc	r19, r21
     9b6:	d0 f3       	brcs	.-12     	; 0x9ac <main+0x44a>
     9b8:	82 95       	swap	r24
     9ba:	80 7f       	andi	r24, 0xF0	; 240
     9bc:	98 2b       	or	r25, r24
     9be:	60 93 e9 00 	sts	0x00E9, r22
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     9c2:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     9c6:	81 60       	ori	r24, 0x01	; 1
     9c8:	80 93 eb 00 	sts	0x00EB, r24
     9cc:	10 92 ed 00 	sts	0x00ED, r1
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     9d0:	80 e8       	ldi	r24, 0x80	; 128

	UECFG0X = UECFG0XData;
     9d2:	80 93 ec 00 	sts	0x00EC, r24
     9d6:	90 93 ed 00 	sts	0x00ED, r25
	UECFG1X = UECFG1XData;
     9da:	80 91 ee 00 	lds	r24, 0x00EE
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     9de:	87 ff       	sbrs	r24, 7
     9e0:	22 cf       	rjmp	.-444    	; 0x826 <main+0x2c4>
     9e2:	80 91 0c 02 	lds	r24, 0x020C
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
     9e6:	88 23       	and	r24, r24
     9e8:	09 f4       	brne	.+2      	; 0x9ec <main+0x48a>
     9ea:	eb c2       	rjmp	.+1494   	; 0xfc2 <main+0xa60>
     9ec:	96 e0       	ldi	r25, 0x06	; 6
     9ee:	40 91 0a 02 	lds	r20, 0x020A
     9f2:	50 91 0b 02 	lds	r21, 0x020B
     9f6:	60 91 09 02 	lds	r22, 0x0209
     9fa:	49 30       	cpi	r20, 0x09	; 9
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     9fc:	51 05       	cpc	r21, r1
     9fe:	60 f0       	brcs	.+24     	; 0xa18 <main+0x4b6>
     a00:	28 e0       	ldi	r18, 0x08	; 8
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	8f 5f       	subi	r24, 0xFF	; 255
				{
					MaskVal++;
     a08:	22 0f       	add	r18, r18
					CheckBytes <<= 1;
     a0a:	33 1f       	adc	r19, r19
     a0c:	24 17       	cp	r18, r20
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     a0e:	35 07       	cpc	r19, r21
     a10:	d0 f3       	brcs	.-12     	; 0xa06 <main+0x4a4>
     a12:	82 95       	swap	r24
     a14:	80 7f       	andi	r24, 0xF0	; 240
     a16:	98 2b       	or	r25, r24
     a18:	60 93 e9 00 	sts	0x00E9, r22
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a1c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	80 93 eb 00 	sts	0x00EB, r24
     a26:	10 92 ed 00 	sts	0x00ED, r1
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     a2a:	81 ec       	ldi	r24, 0xC1	; 193

	UECFG0X = UECFG0XData;
     a2c:	80 93 ec 00 	sts	0x00EC, r24
     a30:	90 93 ed 00 	sts	0x00ED, r25
	UECFG1X = UECFG1XData;
     a34:	80 91 ee 00 	lds	r24, 0x00EE
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     a38:	f6 ce       	rjmp	.-532    	; 0x826 <main+0x2c4>
     a3a:	30 38       	cpi	r19, 0x80	; 128
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     a3c:	09 f0       	breq	.+2      	; 0xa40 <main+0x4de>
     a3e:	e4 ce       	rjmp	.-568    	; 0x808 <main+0x2a6>
     a40:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a44:	87 7f       	andi	r24, 0xF7	; 247
     a46:	80 93 e8 00 	sts	0x00E8, r24
     a4a:	80 91 1f 02 	lds	r24, 0x021F

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
     a4e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     a52:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a56:	8e 77       	andi	r24, 0x7E	; 126
     a58:	80 93 e8 00 	sts	0x00E8, r24
     a5c:	80 91 17 02 	lds	r24, 0x0217
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     a60:	87 ff       	sbrs	r24, 7
     a62:	05 c0       	rjmp	.+10     	; 0xa6e <main+0x50c>
     a64:	0a c1       	rjmp	.+532    	; 0xc7a <main+0x718>
     a66:	8e b3       	in	r24, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     a68:	88 23       	and	r24, r24
     a6a:	09 f4       	brne	.+2      	; 0xa6e <main+0x50c>
     a6c:	dc ce       	rjmp	.-584    	; 0x826 <main+0x2c4>
     a6e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     a72:	80 ff       	sbrs	r24, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     a74:	f8 cf       	rjmp	.-16     	; 0xa66 <main+0x504>
     a76:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a7a:	8e 77       	andi	r24, 0x7E	; 126
     a7c:	80 93 e8 00 	sts	0x00E8, r24
     a80:	d2 ce       	rjmp	.-604    	; 0x826 <main+0x2c4>
     a82:	80 e8       	ldi	r24, 0x80	; 128
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a84:	83 0f       	add	r24, r19
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	08 f0       	brcs	.+2      	; 0xa8c <main+0x52a>
     a8a:	be ce       	rjmp	.-644    	; 0x808 <main+0x2a6>
     a8c:	80 91 19 02 	lds	r24, 0x0219
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t  DescriptorAddressSpace;
	#endif
	
	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     a90:	90 91 1a 02 	lds	r25, 0x021A
     a94:	8c 3d       	cpi	r24, 0xDC	; 220
     a96:	53 e0       	ldi	r21, 0x03	; 3
     a98:	95 07       	cpc	r25, r21
     a9a:	09 f4       	brne	.+2      	; 0xa9e <main+0x53c>
     a9c:	38 c1       	rjmp	.+624    	; 0xd0e <main+0x7ac>
     a9e:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     aa0:	33 27       	eor	r19, r19
     aa2:	22 30       	cpi	r18, 0x02	; 2
     aa4:	31 05       	cpc	r19, r1
     aa6:	09 f4       	brne	.+2      	; 0xaaa <main+0x548>
     aa8:	24 c2       	rjmp	.+1096   	; 0xef2 <main+0x990>
     aaa:	23 30       	cpi	r18, 0x03	; 3
     aac:	31 05       	cpc	r19, r1
     aae:	09 f4       	brne	.+2      	; 0xab2 <main+0x550>
     ab0:	8a c2       	rjmp	.+1300   	; 0xfc6 <main+0xa64>
     ab2:	21 30       	cpi	r18, 0x01	; 1
     ab4:	31 05       	cpc	r19, r1
     ab6:	09 f0       	breq	.+2      	; 0xaba <main+0x558>
     ab8:	b6 ce       	rjmp	.-660    	; 0x826 <main+0x2c4>
     aba:	82 e1       	ldi	r24, 0x12	; 18
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	26 ec       	ldi	r18, 0xC6	; 198
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	1b c2       	rjmp	.+1078   	; 0xefa <main+0x998>
     ac4:	31 11       	cpse	r19, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ac6:	a0 ce       	rjmp	.-704    	; 0x808 <main+0x2a6>
     ac8:	90 91 19 02 	lds	r25, 0x0219
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     acc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ad0:	87 7f       	andi	r24, 0xF7	; 247
     ad2:	80 93 e8 00 	sts	0x00E8, r24
     ad6:	80 91 17 02 	lds	r24, 0x0217
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ada:	87 ff       	sbrs	r24, 7
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <main+0x584>
     ade:	a3 c0       	rjmp	.+326    	; 0xc26 <main+0x6c4>
     ae0:	8e b3       	in	r24, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ae2:	88 23       	and	r24, r24
     ae4:	89 f0       	breq	.+34     	; 0xb08 <main+0x5a6>
     ae6:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     aea:	80 ff       	sbrs	r24, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     aec:	f9 cf       	rjmp	.-14     	; 0xae0 <main+0x57e>
     aee:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     af2:	8e 77       	andi	r24, 0x7E	; 126
     af4:	80 93 e8 00 	sts	0x00E8, r24
     af8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     afc:	80 fd       	sbrc	r24, 0

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
     afe:	08 c0       	rjmp	.+16     	; 0xb10 <main+0x5ae>
     b00:	8e b3       	in	r24, 0x1e	; 30
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     b02:	88 23       	and	r24, r24
     b04:	09 f4       	brne	.+2      	; 0xb08 <main+0x5a6>
     b06:	8f ce       	rjmp	.-738    	; 0x826 <main+0x2c4>
     b08:	80 91 e8 00 	lds	r24, 0x00E8
     b0c:	80 ff       	sbrs	r24, 0

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
     b0e:	f8 cf       	rjmp	.-16     	; 0xb00 <main+0x59e>
     b10:	89 2f       	mov	r24, r25
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     b12:	8f 77       	andi	r24, 0x7F	; 127
     b14:	09 f4       	brne	.+2      	; 0xb18 <main+0x5b6>
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b16:	b6 c1       	rjmp	.+876    	; 0xe84 <main+0x922>
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	9e bb       	out	0x1e, r25	; 30
     b1c:	80 68       	ori	r24, 0x80	; 128
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
     b1e:	80 93 e3 00 	sts	0x00E3, r24
     b22:	81 ce       	rjmp	.-766    	; 0x826 <main+0x2c4>
     b24:	33 23       	and	r19, r19
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b26:	09 f4       	brne	.+2      	; 0xb2a <main+0x5c8>
     b28:	7e ce       	rjmp	.-772    	; 0x826 <main+0x2c4>
     b2a:	32 30       	cpi	r19, 0x02	; 2
     b2c:	09 f0       	breq	.+2      	; 0xb30 <main+0x5ce>
     b2e:	6c ce       	rjmp	.-808    	; 0x808 <main+0x2a6>
     b30:	80 91 19 02 	lds	r24, 0x0219
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
     b34:	81 11       	cpse	r24, r1
     b36:	26 c0       	rjmp	.+76     	; 0xb84 <main+0x622>
     b38:	80 91 1b 02 	lds	r24, 0x021B
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b3c:	87 70       	andi	r24, 0x07	; 7
     b3e:	09 f4       	brne	.+2      	; 0xb42 <main+0x5e0>
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b40:	72 ce       	rjmp	.-796    	; 0x826 <main+0x2c4>
     b42:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b46:	90 91 eb 00 	lds	r25, 0x00EB
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b4a:	90 ff       	sbrs	r25, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
     b4c:	6c ce       	rjmp	.-808    	; 0x826 <main+0x2c4>
     b4e:	90 91 18 02 	lds	r25, 0x0218
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b52:	93 30       	cpi	r25, 0x03	; 3
     b54:	09 f4       	brne	.+2      	; 0xb58 <main+0x5f6>
     b56:	2b c2       	rjmp	.+1110   	; 0xfae <main+0xa4c>
     b58:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b5c:	90 61       	ori	r25, 0x10	; 16
     b5e:	90 93 eb 00 	sts	0x00EB, r25
     b62:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	a9 01       	movw	r20, r18
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <main+0x60c>
     b6a:	44 0f       	add	r20, r20
     b6c:	55 1f       	adc	r21, r21
     b6e:	8a 95       	dec	r24
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <main+0x608>
     b72:	40 93 ea 00 	sts	0x00EA, r20
     b76:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     b7a:	80 91 eb 00 	lds	r24, 0x00EB
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b7e:	88 60       	ori	r24, 0x08	; 8
     b80:	80 93 eb 00 	sts	0x00EB, r24
     b84:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b88:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b8c:	87 7f       	andi	r24, 0xF7	; 247
     b8e:	80 93 e8 00 	sts	0x00E8, r24
     b92:	80 91 17 02 	lds	r24, 0x0217
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     b96:	87 ff       	sbrs	r24, 7
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <main+0x642>
     b9a:	61 c0       	rjmp	.+194    	; 0xc5e <main+0x6fc>
     b9c:	8e b3       	in	r24, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b9e:	88 23       	and	r24, r24
     ba0:	09 f4       	brne	.+2      	; 0xba4 <main+0x642>
     ba2:	41 ce       	rjmp	.-894    	; 0x826 <main+0x2c4>
     ba4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     ba8:	80 ff       	sbrs	r24, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     baa:	f8 cf       	rjmp	.-16     	; 0xb9c <main+0x63a>
     bac:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bb0:	8e 77       	andi	r24, 0x7E	; 126
     bb2:	80 93 e8 00 	sts	0x00E8, r24
     bb6:	37 ce       	rjmp	.-914    	; 0x826 <main+0x2c4>
     bb8:	30 38       	cpi	r19, 0x80	; 128
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
	
	switch (USB_ControlRequest.bRequest)
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bba:	09 f4       	brne	.+2      	; 0xbbe <main+0x65c>
     bbc:	34 ce       	rjmp	.-920    	; 0x826 <main+0x2c4>
     bbe:	32 38       	cpi	r19, 0x82	; 130
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <main+0x662>
     bc2:	22 ce       	rjmp	.-956    	; 0x808 <main+0x2a6>
     bc4:	80 91 1b 02 	lds	r24, 0x021B
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     bc8:	87 70       	andi	r24, 0x07	; 7
     bca:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bce:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     bd2:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     bd6:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bda:	97 7f       	andi	r25, 0xF7	; 247
     bdc:	90 93 e8 00 	sts	0x00E8, r25
     be0:	85 fb       	bst	r24, 5
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
     be2:	88 27       	eor	r24, r24
     be4:	80 f9       	bld	r24, 0
     be6:	80 93 f1 00 	sts	0x00F1, r24
     bea:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
     bee:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bf2:	8e 77       	andi	r24, 0x7E	; 126
     bf4:	80 93 e8 00 	sts	0x00E8, r24
     bf8:	80 91 17 02 	lds	r24, 0x0217
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     bfc:	87 ff       	sbrs	r24, 7
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <main+0x6a8>
     c00:	20 c0       	rjmp	.+64     	; 0xc42 <main+0x6e0>
     c02:	8e b3       	in	r24, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c04:	88 23       	and	r24, r24
     c06:	09 f4       	brne	.+2      	; 0xc0a <main+0x6a8>
     c08:	0e ce       	rjmp	.-996    	; 0x826 <main+0x2c4>
     c0a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     c0e:	80 ff       	sbrs	r24, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     c10:	f8 cf       	rjmp	.-16     	; 0xc02 <main+0x6a0>
     c12:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c16:	8e 77       	andi	r24, 0x7E	; 126
     c18:	80 93 e8 00 	sts	0x00E8, r24
     c1c:	04 ce       	rjmp	.-1016   	; 0x826 <main+0x2c4>
     c1e:	8e b3       	in	r24, 0x1e	; 30
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c20:	88 23       	and	r24, r24
     c22:	09 f4       	brne	.+2      	; 0xc26 <main+0x6c4>
     c24:	71 cf       	rjmp	.-286    	; 0xb08 <main+0x5a6>
     c26:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c2a:	82 ff       	sbrs	r24, 2

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     c2c:	f8 cf       	rjmp	.-16     	; 0xc1e <main+0x6bc>
     c2e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c32:	8b 77       	andi	r24, 0x7B	; 123
     c34:	80 93 e8 00 	sts	0x00E8, r24
     c38:	67 cf       	rjmp	.-306    	; 0xb08 <main+0x5a6>
     c3a:	8e b3       	in	r24, 0x1e	; 30
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c3c:	88 23       	and	r24, r24
     c3e:	09 f4       	brne	.+2      	; 0xc42 <main+0x6e0>
     c40:	f2 cd       	rjmp	.-1052   	; 0x826 <main+0x2c4>
     c42:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c46:	82 ff       	sbrs	r24, 2

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     c48:	f8 cf       	rjmp	.-16     	; 0xc3a <main+0x6d8>
     c4a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c4e:	8b 77       	andi	r24, 0x7B	; 123
     c50:	80 93 e8 00 	sts	0x00E8, r24
     c54:	e8 cd       	rjmp	.-1072   	; 0x826 <main+0x2c4>
     c56:	8e b3       	in	r24, 0x1e	; 30
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c58:	88 23       	and	r24, r24
     c5a:	09 f4       	brne	.+2      	; 0xc5e <main+0x6fc>
     c5c:	e4 cd       	rjmp	.-1080   	; 0x826 <main+0x2c4>
     c5e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c62:	82 ff       	sbrs	r24, 2

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     c64:	f8 cf       	rjmp	.-16     	; 0xc56 <main+0x6f4>
     c66:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c6a:	8b 77       	andi	r24, 0x7B	; 123
     c6c:	80 93 e8 00 	sts	0x00E8, r24
     c70:	da cd       	rjmp	.-1100   	; 0x826 <main+0x2c4>
     c72:	8e b3       	in	r24, 0x1e	; 30
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c74:	88 23       	and	r24, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <main+0x718>
     c78:	d6 cd       	rjmp	.-1108   	; 0x826 <main+0x2c4>
     c7a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c7e:	82 ff       	sbrs	r24, 2

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     c80:	f8 cf       	rjmp	.-16     	; 0xc72 <main+0x710>
     c82:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c86:	8b 77       	andi	r24, 0x7B	; 123
     c88:	80 93 e8 00 	sts	0x00E8, r24
     c8c:	cc cd       	rjmp	.-1128   	; 0x826 <main+0x2c4>
     c8e:	9e b3       	in	r25, 0x1e	; 30
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c90:	99 23       	and	r25, r25
     c92:	09 f4       	brne	.+2      	; 0xc96 <main+0x734>
     c94:	43 ce       	rjmp	.-890    	; 0x91c <main+0x3ba>
     c96:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c9a:	92 ff       	sbrs	r25, 2

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     c9c:	f8 cf       	rjmp	.-16     	; 0xc8e <main+0x72c>
     c9e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ca2:	8b 77       	andi	r24, 0x7B	; 123
     ca4:	80 93 e8 00 	sts	0x00E8, r24
     ca8:	80 91 1f 02 	lds	r24, 0x021F
     cac:	88 23       	and	r24, r24

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;

	Endpoint_ClearStatusStage();

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
     cae:	09 f4       	brne	.+2      	; 0xcb2 <main+0x750>
     cb0:	37 ce       	rjmp	.-914    	; 0x920 <main+0x3be>
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	36 ce       	rjmp	.-916    	; 0x922 <main+0x3c0>
     cb6:	80 91 e8 00 	lds	r24, 0x00E8
     cba:	8b 77       	andi	r24, 0x7B	; 123
     cbc:	80 93 e8 00 	sts	0x00E8, r24
     cc0:	70 cd       	rjmp	.-1312   	; 0x7a2 <main+0x240>
     cc2:	21 32       	cpi	r18, 0x21	; 33
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <main+0x766>
     cc6:	e0 c0       	rjmp	.+448    	; 0xe88 <main+0x926>
     cc8:	08 f4       	brcc	.+2      	; 0xccc <main+0x76a>
     cca:	5b c0       	rjmp	.+182    	; 0xd82 <main+0x820>
     ccc:	22 32       	cpi	r18, 0x22	; 34
     cce:	09 f4       	brne	.+2      	; 0xcd2 <main+0x770>
     cd0:	ee c0       	rjmp	.+476    	; 0xeae <main+0x94c>
     cd2:	23 32       	cpi	r18, 0x23	; 35
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <main+0x776>
     cd6:	a7 cd       	rjmp	.-1202   	; 0x826 <main+0x2c4>
     cd8:	31 32       	cpi	r19, 0x21	; 33
				Endpoint_ClearStatusStage();
			}
	
			break;
		case REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     cda:	09 f0       	breq	.+2      	; 0xcde <main+0x77c>
     cdc:	a4 cd       	rjmp	.-1208   	; 0x826 <main+0x2c4>
     cde:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ce2:	87 7f       	andi	r24, 0xF7	; 247
     ce4:	80 93 e8 00 	sts	0x00E8, r24
     ce8:	80 91 17 02 	lds	r24, 0x0217
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     cec:	87 ff       	sbrs	r24, 7
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <main+0x798>
     cf0:	80 c2       	rjmp	.+1280   	; 0x11f2 <main+0xc90>
     cf2:	8e b3       	in	r24, 0x1e	; 30
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     cf4:	88 23       	and	r24, r24
     cf6:	09 f4       	brne	.+2      	; 0xcfa <main+0x798>
     cf8:	96 cd       	rjmp	.-1236   	; 0x826 <main+0x2c4>
     cfa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     cfe:	80 ff       	sbrs	r24, 0

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d00:	f8 cf       	rjmp	.-16     	; 0xcf2 <main+0x790>
     d02:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d06:	8e 77       	andi	r24, 0x7E	; 126
     d08:	80 93 e8 00 	sts	0x00E8, r24
     d0c:	8c cd       	rjmp	.-1256   	; 0x826 <main+0x2c4>
     d0e:	83 e0       	ldi	r24, 0x03	; 3
	{
		USB_Descriptor_Header_t Header;
		int16_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d10:	8a 83       	std	Y+2, r24	; 0x02
     d12:	8a e2       	ldi	r24, 0x2A	; 42
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
     d14:	89 83       	std	Y+1, r24	; 0x01
     d16:	4f b7       	in	r20, 0x3f	; 63
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     d18:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d1a:	de 01       	movw	r26, r28
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	2e e0       	ldi	r18, 0x0E	; 14
     d22:	31 e2       	ldi	r19, 0x21	; 33
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d24:	07 c0       	rjmp	.+14     	; 0xd34 <main+0x7d2>
     d26:	e9 5c       	subi	r30, 0xC9	; 201

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static char USB_Device_NibbleToASCII(uint8_t Nibble)
{
	Nibble = ((Nibble & 0x0F) + '0');
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
     d28:	f0 e0       	ldi	r31, 0x00	; 0
			{
				SerialByte >>= 4;
				SigReadAddress++;
			}
			
			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
     d2a:	ed 93       	st	X+, r30
     d2c:	fd 93       	st	X+, r31
     d2e:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
     d30:	94 31       	cpi	r25, 0x14	; 20
     d32:	b1 f0       	breq	.+44     	; 0xd60 <main+0x7fe>
     d34:	e2 2f       	mov	r30, r18
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	30 93 57 00 	sts	0x0057, r19
     d3c:	e4 91       	lpm	r30, Z
     d3e:	90 ff       	sbrs	r25, 0
			
			if (SerialCharNum & 0x01)
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <main+0x7e6>
     d42:	e2 95       	swap	r30
			{
				SerialByte >>= 4;
     d44:	ef 70       	andi	r30, 0x0F	; 15
     d46:	2f 5f       	subi	r18, 0xFF	; 255
				SigReadAddress++;
     d48:	ef 70       	andi	r30, 0x0F	; 15
}

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static char USB_Device_NibbleToASCII(uint8_t Nibble)
{
	Nibble = ((Nibble & 0x0F) + '0');
     d4a:	80 e3       	ldi	r24, 0x30	; 48
     d4c:	8e 0f       	add	r24, r30
     d4e:	8a 33       	cpi	r24, 0x3A	; 58
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
     d50:	50 f7       	brcc	.-44     	; 0xd26 <main+0x7c4>
     d52:	e8 2f       	mov	r30, r24
     d54:	f0 e0       	ldi	r31, 0x00	; 0
			{
				SerialByte >>= 4;
				SigReadAddress++;
			}
			
			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
     d56:	ed 93       	st	X+, r30
     d58:	fd 93       	st	X+, r31
     d5a:	9f 5f       	subi	r25, 0xFF	; 255
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
     d5c:	94 31       	cpi	r25, 0x14	; 20
     d5e:	51 f7       	brne	.-44     	; 0xd34 <main+0x7d2>
     d60:	4f bf       	out	0x3f, r20	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d62:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d66:	87 7f       	andi	r24, 0xF7	; 247
     d68:	80 93 e8 00 	sts	0x00E8, r24
     d6c:	6a e2       	ldi	r22, 0x2A	; 42
		}
	}
	
	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	ce 01       	movw	r24, r28
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	f7 d9       	rcall	.-3090   	; 0x164 <Endpoint_Write_Control_Stream_LE>
     d76:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d7a:	8b 77       	andi	r24, 0x7B	; 123
     d7c:	80 93 e8 00 	sts	0x00E8, r24
     d80:	52 cd       	rjmp	.-1372   	; 0x826 <main+0x2c4>
     d82:	20 32       	cpi	r18, 0x20	; 32
     d84:	09 f0       	breq	.+2      	; 0xd88 <main+0x826>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
     d86:	4f cd       	rjmp	.-1378   	; 0x826 <main+0x2c4>
     d88:	31 32       	cpi	r19, 0x21	; 33
     d8a:	09 f0       	breq	.+2      	; 0xd8e <main+0x82c>
				Endpoint_ClearOUT();
			}
			
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     d8c:	4c cd       	rjmp	.-1384   	; 0x826 <main+0x2c4>
     d8e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d92:	87 7f       	andi	r24, 0xF7	; 247
     d94:	80 93 e8 00 	sts	0x00E8, r24
     d98:	2f e0       	ldi	r18, 0x0F	; 15
     d9a:	32 e0       	ldi	r19, 0x02	; 2
     d9c:	87 e0       	ldi	r24, 0x07	; 7
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0a c0       	rjmp	.+20     	; 0xdb6 <main+0x854>
     da2:	4e b3       	in	r20, 0x1e	; 30
     da4:	44 23       	and	r20, r20
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
     da6:	59 f0       	breq	.+22     	; 0xdbe <main+0x85c>
     da8:	4e b3       	in	r20, 0x1e	; 30
     daa:	45 30       	cpi	r20, 0x05	; 5
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     dac:	41 f0       	breq	.+16     	; 0xdbe <main+0x85c>
     dae:	40 91 e8 00 	lds	r20, 0x00E8
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     db2:	42 fd       	sbrc	r20, 2
     db4:	38 c1       	rjmp	.+624    	; 0x1026 <main+0xac4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
     db6:	40 91 e8 00 	lds	r20, 0x00E8
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dba:	43 ff       	sbrs	r20, 3
     dbc:	f2 cf       	rjmp	.-28     	; 0xda2 <main+0x840>
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
     dbe:	80 91 14 02 	lds	r24, 0x0214
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <main+0x866>
     dc6:	4d c1       	rjmp	.+666    	; 0x1062 <main+0xb00>
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	09 f4       	brne	.+2      	; 0xdce <main+0x86c>
     dcc:	41 c1       	rjmp	.+642    	; 0x1050 <main+0xaee>
     dce:	76 e0       	ldi	r23, 0x06	; 6
     dd0:	64 e0       	ldi	r22, 0x04	; 4
     dd2:	52 e0       	ldi	r21, 0x02	; 2
     dd4:	8e e0       	ldi	r24, 0x0E	; 14
     dd6:	9c e0       	ldi	r25, 0x0C	; 12
     dd8:	3a e0       	ldi	r19, 0x0A	; 10
     dda:	28 e0       	ldi	r18, 0x08	; 8
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	e0 91 13 02 	lds	r30, 0x0213
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     de2:	e2 30       	cpi	r30, 0x02	; 2
     de4:	09 f4       	brne	.+2      	; 0xde8 <main+0x886>
     de6:	32 c1       	rjmp	.+612    	; 0x104c <main+0xaea>
     de8:	87 2f       	mov	r24, r23
     dea:	96 2f       	mov	r25, r22
     dec:	e5 2e       	mov	r14, r21
     dee:	24 2f       	mov	r18, r20
     df0:	30 91 15 02 	lds	r19, 0x0215
	  ConfigMask |= (1 << USBS1);

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     df4:	37 30       	cpi	r19, 0x07	; 7
     df6:	09 f4       	brne	.+2      	; 0xdfa <main+0x898>
     df8:	22 c1       	rjmp	.+580    	; 0x103e <main+0xadc>
     dfa:	38 30       	cpi	r19, 0x08	; 8
     dfc:	09 f4       	brne	.+2      	; 0xe00 <main+0x89e>
     dfe:	1d c1       	rjmp	.+570    	; 0x103a <main+0xad8>
     e00:	36 30       	cpi	r19, 0x06	; 6
     e02:	09 f0       	breq	.+2      	; 0xe06 <main+0x8a4>
     e04:	e2 2e       	mov	r14, r18
     e06:	10 92 c9 00 	sts	0x00C9, r1
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     e0a:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1A = 0;
     e0e:	10 92 ca 00 	sts	0x00CA, r1
	UCSR1C = 0;
     e12:	80 90 0f 02 	lds	r8, 0x020F

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     e16:	90 90 10 02 	lds	r9, 0x0210
     e1a:	a0 90 11 02 	lds	r10, 0x0211
     e1e:	b0 90 12 02 	lds	r11, 0x0212
     e22:	81 14       	cp	r8, r1
     e24:	f1 ee       	ldi	r31, 0xE1	; 225
     e26:	9f 06       	cpc	r9, r31
     e28:	a1 04       	cpc	r10, r1
     e2a:	b1 04       	cpc	r11, r1
     e2c:	09 f4       	brne	.+2      	; 0xe30 <main+0x8ce>
     e2e:	0b c1       	rjmp	.+534    	; 0x1046 <main+0xae4>
     e30:	d5 01       	movw	r26, r10
     e32:	c4 01       	movw	r24, r8
     e34:	b6 95       	lsr	r27
     e36:	a7 95       	ror	r26
     e38:	97 95       	ror	r25
     e3a:	87 95       	ror	r24
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	60 58       	subi	r22, 0x80	; 128
     e42:	7b 47       	sbci	r23, 0x7B	; 123
     e44:	81 4e       	sbci	r24, 0xE1	; 225
     e46:	9f 4f       	sbci	r25, 0xFF	; 255
     e48:	a5 01       	movw	r20, r10
     e4a:	94 01       	movw	r18, r8
     e4c:	ef d1       	rcall	.+990    	; 0x122c <__udivmodsi4>
     e4e:	21 50       	subi	r18, 0x01	; 1
     e50:	31 09       	sbc	r19, r1
     e52:	30 93 cd 00 	sts	0x00CD, r19
     e56:	20 93 cc 00 	sts	0x00CC, r18
     e5a:	e0 92 ca 00 	sts	0x00CA, r14
     e5e:	81 14       	cp	r8, r1
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
     e60:	21 ee       	ldi	r18, 0xE1	; 225
     e62:	92 06       	cpc	r9, r18
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
     e64:	a1 04       	cpc	r10, r1
     e66:	b1 04       	cpc	r11, r1
     e68:	09 f4       	brne	.+2      	; 0xe6c <main+0x90a>
     e6a:	eb c0       	rjmp	.+470    	; 0x1042 <main+0xae0>
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	80 93 c8 00 	sts	0x00C8, r24
     e72:	88 e9       	ldi	r24, 0x98	; 152
     e74:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     e78:	80 91 e8 00 	lds	r24, 0x00E8
     e7c:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e7e:	80 93 e8 00 	sts	0x00E8, r24
     e82:	d1 cc       	rjmp	.-1630   	; 0x826 <main+0x2c4>
     e84:	92 e0       	ldi	r25, 0x02	; 2
     e86:	49 ce       	rjmp	.-878    	; 0xb1a <main+0x5b8>
     e88:	31 3a       	cpi	r19, 0xA1	; 161
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     e8a:	09 f0       	breq	.+2      	; 0xe8e <main+0x92c>
     e8c:	cc cc       	rjmp	.-1640   	; 0x826 <main+0x2c4>
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e8e:	80 91 e8 00 	lds	r24, 0x00E8
     e92:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e94:	80 93 e8 00 	sts	0x00E8, r24
     e98:	67 e0       	ldi	r22, 0x07	; 7
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	8f e0       	ldi	r24, 0x0F	; 15
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	61 d9       	rcall	.-3390   	; 0x164 <Endpoint_Write_Control_Stream_LE>
     ea2:	80 91 e8 00 	lds	r24, 0x00E8
     ea6:	8b 77       	andi	r24, 0x7B	; 123
     ea8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     eac:	bc cc       	rjmp	.-1672   	; 0x826 <main+0x2c4>
     eae:	31 32       	cpi	r19, 0x21	; 33
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <main+0x952>
     eb2:	b9 cc       	rjmp	.-1678   	; 0x826 <main+0x2c4>
     eb4:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearIN();
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     eb8:	87 7f       	andi	r24, 0xF7	; 247
     eba:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ebe:	80 91 19 02 	lds	r24, 0x0219
     ec2:	80 93 0d 02 	sts	0x020D, r24
			{				
				Endpoint_ClearSETUP();
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     ec6:	80 fd       	sbrc	r24, 0
     ec8:	72 c1       	rjmp	.+740    	; 0x11ae <main+0xc4c>
     eca:	5f 9a       	sbi	0x0b, 7	; 11
     ecc:	80 91 17 02 	lds	r24, 0x0217
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);

	if (CurrentDTRState)
     ed0:	87 ff       	sbrs	r24, 7
	  AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
	else
	  AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
     ed2:	05 c0       	rjmp	.+10     	; 0xede <main+0x97c>
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ed4:	62 c1       	rjmp	.+708    	; 0x119a <main+0xc38>
     ed6:	8e b3       	in	r24, 0x1e	; 30
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <main+0x97c>
     edc:	a4 cc       	rjmp	.-1720   	; 0x826 <main+0x2c4>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ede:	80 91 e8 00 	lds	r24, 0x00E8
     ee2:	80 ff       	sbrs	r24, 0
     ee4:	f8 cf       	rjmp	.-16     	; 0xed6 <main+0x974>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     ee6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     eea:	8e 77       	andi	r24, 0x7E	; 126
     eec:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ef0:	9a cc       	rjmp	.-1740   	; 0x826 <main+0x2c4>
     ef2:	8e e3       	ldi	r24, 0x3E	; 62
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	28 e8       	ldi	r18, 0x88	; 136
     ef8:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     efa:	40 91 e8 00 	lds	r20, 0x00E8
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
     efe:	47 7f       	andi	r20, 0xF7	; 247
     f00:	40 93 e8 00 	sts	0x00E8, r20
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f04:	40 91 1d 02 	lds	r20, 0x021D
     f08:	50 91 1e 02 	lds	r21, 0x021E
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     f0c:	84 17       	cp	r24, r20
     f0e:	95 07       	cpc	r25, r21
     f10:	08 f4       	brcc	.+2      	; 0xf14 <main+0x9b2>
     f12:	ac 01       	movw	r20, r24
     f14:	a0 e0       	ldi	r26, 0x00	; 0
     f16:	41 15       	cp	r20, r1
     f18:	51 05       	cpc	r21, r1
     f1a:	69 f5       	brne	.+90     	; 0xf76 <main+0xa14>
     f1c:	a1 11       	cpse	r26, r1
     f1e:	11 c0       	rjmp	.+34     	; 0xf42 <main+0x9e0>
     f20:	3c c0       	rjmp	.+120    	; 0xf9a <main+0xa38>
     f22:	80 91 e8 00 	lds	r24, 0x00E8
     f26:	82 fd       	sbrc	r24, 2
     f28:	38 c0       	rjmp	.+112    	; 0xf9a <main+0xa38>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f2a:	8e b3       	in	r24, 0x1e	; 30
     f2c:	88 23       	and	r24, r24
	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     f2e:	09 f4       	brne	.+2      	; 0xf32 <main+0x9d0>
     f30:	8c ce       	rjmp	.-744    	; 0xc4a <main+0x6e8>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     f32:	8e b3       	in	r24, 0x1e	; 30
     f34:	85 30       	cpi	r24, 0x05	; 5
     f36:	09 f4       	brne	.+2      	; 0xf3a <main+0x9d8>
     f38:	88 ce       	rjmp	.-752    	; 0xc4a <main+0x6e8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     f3a:	80 91 e8 00 	lds	r24, 0x00E8
     f3e:	80 fd       	sbrc	r24, 0
     f40:	99 c0       	rjmp	.+306    	; 0x1074 <main+0xb12>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     f42:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     f46:	83 ff       	sbrs	r24, 3
     f48:	ec cf       	rjmp	.-40     	; 0xf22 <main+0x9c0>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f4a:	80 91 e8 00 	lds	r24, 0x00E8
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     f4e:	8b 77       	andi	r24, 0x7B	; 123
     f50:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f54:	68 cc       	rjmp	.-1840   	; 0x826 <main+0x2c4>
     f56:	80 91 e8 00 	lds	r24, 0x00E8
     f5a:	82 fd       	sbrc	r24, 2
     f5c:	1e c0       	rjmp	.+60     	; 0xf9a <main+0xa38>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f5e:	8e b3       	in	r24, 0x1e	; 30
     f60:	88 23       	and	r24, r24
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     f62:	09 f4       	brne	.+2      	; 0xf66 <main+0xa04>
     f64:	72 ce       	rjmp	.-796    	; 0xc4a <main+0x6e8>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     f66:	8e b3       	in	r24, 0x1e	; 30
     f68:	85 30       	cpi	r24, 0x05	; 5
     f6a:	09 f4       	brne	.+2      	; 0xf6e <main+0xa0c>
     f6c:	6e ce       	rjmp	.-804    	; 0xc4a <main+0x6e8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     f6e:	80 91 e8 00 	lds	r24, 0x00E8
     f72:	80 fd       	sbrc	r24, 0
     f74:	90 c0       	rjmp	.+288    	; 0x1096 <main+0xb34>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     f76:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     f7a:	83 ff       	sbrs	r24, 3
     f7c:	ec cf       	rjmp	.-40     	; 0xf56 <main+0x9f4>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f7e:	80 91 e8 00 	lds	r24, 0x00E8
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     f82:	8b 77       	andi	r24, 0x7B	; 123
     f84:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f88:	4e cc       	rjmp	.-1892   	; 0x826 <main+0x2c4>
     f8a:	8e b3       	in	r24, 0x1e	; 30
     f8c:	88 23       	and	r24, r24
     f8e:	09 f4       	brne	.+2      	; 0xf92 <main+0xa30>
     f90:	5c ce       	rjmp	.-840    	; 0xc4a <main+0x6e8>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     f92:	8e b3       	in	r24, 0x1e	; 30
     f94:	85 30       	cpi	r24, 0x05	; 5
     f96:	09 f4       	brne	.+2      	; 0xf9a <main+0xa38>
     f98:	58 ce       	rjmp	.-848    	; 0xc4a <main+0x6e8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     f9a:	80 91 e8 00 	lds	r24, 0x00E8
     f9e:	82 ff       	sbrs	r24, 2
     fa0:	f4 cf       	rjmp	.-24     	; 0xf8a <main+0xa28>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fa2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     fa6:	8b 77       	andi	r24, 0x7B	; 123
     fa8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fac:	3c cc       	rjmp	.-1928   	; 0x826 <main+0x2c4>
     fae:	80 91 eb 00 	lds	r24, 0x00EB
     fb2:	80 62       	ori	r24, 0x20	; 32
     fb4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     fb8:	e5 cd       	rjmp	.-1078   	; 0xb84 <main+0x622>
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	c2 cc       	rjmp	.-1660   	; 0x942 <main+0x3e0>
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	e9 cc       	rjmp	.-1582   	; 0x994 <main+0x432>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
     fc2:	92 e0       	ldi	r25, 0x02	; 2
     fc4:	14 cd       	rjmp	.-1496   	; 0x9ee <main+0x48c>
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
     fc6:	99 27       	eor	r25, r25
     fc8:	81 30       	cpi	r24, 0x01	; 1
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
     fca:	91 05       	cpc	r25, r1
     fcc:	c9 f0       	breq	.+50     	; 0x1000 <main+0xa9e>
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
     fce:	78 f0       	brcs	.+30     	; 0xfee <main+0xa8c>
     fd0:	02 97       	sbiw	r24, 0x02	; 2
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <main+0xa74>
     fd4:	28 cc       	rjmp	.-1968   	; 0x826 <main+0x2c4>
     fd6:	f3 01       	movw	r30, r6
     fd8:	84 91       	lpm	r24, Z
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a8 ed       	ldi	r26, 0xD8	; 216
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     fde:	6a 2e       	mov	r6, r26
     fe0:	a0 e0       	ldi	r26, 0x00	; 0
     fe2:	7a 2e       	mov	r7, r26
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
     fe4:	93 01       	movw	r18, r6
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	09 f4       	brne	.+2      	; 0xfec <main+0xa8a>
     fea:	1d cc       	rjmp	.-1990   	; 0x826 <main+0x2c4>
     fec:	86 cf       	rjmp	.-244    	; 0xefa <main+0x998>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     fee:	f1 01       	movw	r30, r2
     ff0:	84 91       	lpm	r24, Z
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	26 e2       	ldi	r18, 0x26	; 38
		case DTYPE_String: 
			switch (DescriptorNumber)
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     ff6:	22 2e       	mov	r2, r18
     ff8:	21 e0       	ldi	r18, 0x01	; 1
     ffa:	32 2e       	mov	r3, r18
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
			{
				case 0x00: 
					Address = (void*)&LanguageString;
     ffc:	91 01       	movw	r18, r2
     ffe:	f3 cf       	rjmp	.-26     	; 0xfe6 <main+0xa84>
    1000:	f2 01       	movw	r30, r4
    1002:	84 91       	lpm	r24, Z
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	b2 ef       	ldi	r27, 0xF2	; 242
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1008:	4b 2e       	mov	r4, r27
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	5b 2e       	mov	r5, r27
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
    100e:	92 01       	movw	r18, r4
    1010:	ea cf       	rjmp	.-44     	; 0xfe6 <main+0xa84>
    1012:	2f 5f       	subi	r18, 0xFF	; 255
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
    1016:	40 91 f1 00 	lds	r20, 0x00F1
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    101a:	f9 01       	movw	r30, r18
    101c:	31 97       	sbiw	r30, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    101e:	40 83       	st	Z, r20
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	09 f4       	brne	.+2      	; 0x1026 <main+0xac4>
    1024:	f0 c0       	rjmp	.+480    	; 0x1206 <main+0xca4>
    1026:	40 91 f2 00 	lds	r20, 0x00F2
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    102a:	41 11       	cpse	r20, r1
    102c:	f2 cf       	rjmp	.-28     	; 0x1012 <main+0xab0>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    102e:	40 91 e8 00 	lds	r20, 0x00E8
    1032:	4b 77       	andi	r20, 0x7B	; 123
    1034:	40 93 e8 00 	sts	0x00E8, r20
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1038:	be ce       	rjmp	.-644    	; 0xdb6 <main+0x854>
    103a:	e8 2e       	mov	r14, r24
    103c:	e4 ce       	rjmp	.-568    	; 0xe06 <main+0x8a4>
    103e:	e9 2e       	mov	r14, r25
    1040:	e2 ce       	rjmp	.-572    	; 0xe06 <main+0x8a4>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	14 cf       	rjmp	.-472    	; 0xe6e <main+0x90c>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
    1046:	20 e1       	ldi	r18, 0x10	; 16
    1048:	30 e0       	ldi	r19, 0x00	; 0
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);

	UCSR1C = ConfigMask;
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
    104a:	03 cf       	rjmp	.-506    	; 0xe52 <main+0x8f0>
    104c:	e3 2e       	mov	r14, r19
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
    104e:	d0 ce       	rjmp	.-608    	; 0xdf0 <main+0x88e>
    1050:	76 e2       	ldi	r23, 0x26	; 38
    1052:	64 e2       	ldi	r22, 0x24	; 36
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
    1054:	52 e2       	ldi	r21, 0x22	; 34
    1056:	8e e2       	ldi	r24, 0x2E	; 46
    1058:	9c e2       	ldi	r25, 0x2C	; 44
    105a:	3a e2       	ldi	r19, 0x2A	; 42
    105c:	28 e2       	ldi	r18, 0x28	; 40
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	be ce       	rjmp	.-644    	; 0xdde <main+0x87c>
    1062:	76 e3       	ldi	r23, 0x36	; 54
    1064:	64 e3       	ldi	r22, 0x34	; 52
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));
			break;
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
    1066:	52 e3       	ldi	r21, 0x32	; 50
    1068:	8e e3       	ldi	r24, 0x3E	; 62
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
    106a:	9c e3       	ldi	r25, 0x3C	; 60
    106c:	3a e3       	ldi	r19, 0x3A	; 58
    106e:	28 e3       	ldi	r18, 0x38	; 56
    1070:	40 e3       	ldi	r20, 0x30	; 48
    1072:	b5 ce       	rjmp	.-662    	; 0xdde <main+0x87c>
    1074:	80 91 f2 00 	lds	r24, 0x00F2
	{
		case CDC_PARITY_Odd:
			ConfigMask = ((1 << UPM11) | (1 << UPM10));
    1078:	a1 e0       	ldi	r26, 0x01	; 1
    107a:	88 30       	cpi	r24, 0x08	; 8
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    107c:	09 f0       	breq	.+2      	; 0x1080 <main+0xb1e>
    107e:	a0 e0       	ldi	r26, 0x00	; 0
    1080:	e0 e0       	ldi	r30, 0x00	; 0
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	c9 01       	movw	r24, r18
    1086:	20 91 e8 00 	lds	r18, 0x00E8
    108a:	2e 77       	andi	r18, 0x7E	; 126
    108c:	20 93 e8 00 	sts	0x00E8, r18
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1090:	9c 01       	movw	r18, r24
    1092:	af 01       	movw	r20, r30
    1094:	40 cf       	rjmp	.-384    	; 0xf16 <main+0x9b4>
    1096:	b0 91 f2 00 	lds	r27, 0x00F2
    109a:	b8 30       	cpi	r27, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <main+0xb3e>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    109e:	9e c0       	rjmp	.+316    	; 0x11dc <main+0xc7a>
    10a0:	c9 01       	movw	r24, r18
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	f9 01       	movw	r30, r18
    10a6:	64 91       	lpm	r22, Z
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    10a8:	60 93 f1 00 	sts	0x00F1, r22
    10ac:	fa 01       	movw	r30, r20
    10ae:	31 97       	sbiw	r30, 0x01	; 1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	6b 0f       	add	r22, r27
				Length--;
    10b4:	30 97       	sbiw	r30, 0x00	; 0
    10b6:	09 f4       	brne	.+2      	; 0x10ba <main+0xb58>
				BytesInEndpoint++;
    10b8:	8d c0       	rjmp	.+282    	; 0x11d4 <main+0xc72>
    10ba:	68 30       	cpi	r22, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <main+0xb5e>
    10be:	88 c0       	rjmp	.+272    	; 0x11d0 <main+0xc6e>
    10c0:	b9 01       	movw	r22, r18
    10c2:	6e 5f       	subi	r22, 0xFE	; 254
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	fc 01       	movw	r30, r24
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    10c8:	84 91       	lpm	r24, Z
    10ca:	80 93 f1 00 	sts	0x00F1, r24
    10ce:	fa 01       	movw	r30, r20
    10d0:	32 97       	sbiw	r30, 0x02	; 2
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	8b 0f       	add	r24, r27
				Length--;
    10d6:	30 97       	sbiw	r30, 0x00	; 0
    10d8:	09 f4       	brne	.+2      	; 0x10dc <main+0xb7a>
				BytesInEndpoint++;
    10da:	74 c0       	rjmp	.+232    	; 0x11c4 <main+0xc62>
    10dc:	88 30       	cpi	r24, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    10de:	09 f4       	brne	.+2      	; 0x10e2 <main+0xb80>
    10e0:	6e c0       	rjmp	.+220    	; 0x11be <main+0xc5c>
    10e2:	c9 01       	movw	r24, r18
    10e4:	03 96       	adiw	r24, 0x03	; 3
    10e6:	fb 01       	movw	r30, r22
    10e8:	64 91       	lpm	r22, Z
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    10ea:	60 93 f1 00 	sts	0x00F1, r22
    10ee:	fa 01       	movw	r30, r20
    10f0:	33 97       	sbiw	r30, 0x03	; 3
    10f2:	63 e0       	ldi	r22, 0x03	; 3
    10f4:	6b 0f       	add	r22, r27
				Length--;
    10f6:	30 97       	sbiw	r30, 0x00	; 0
    10f8:	09 f4       	brne	.+2      	; 0x10fc <main+0xb9a>
				BytesInEndpoint++;
    10fa:	6c c0       	rjmp	.+216    	; 0x11d4 <main+0xc72>
    10fc:	68 30       	cpi	r22, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    10fe:	09 f4       	brne	.+2      	; 0x1102 <main+0xba0>
    1100:	67 c0       	rjmp	.+206    	; 0x11d0 <main+0xc6e>
    1102:	b9 01       	movw	r22, r18
    1104:	6c 5f       	subi	r22, 0xFC	; 252
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	fc 01       	movw	r30, r24
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    110a:	84 91       	lpm	r24, Z
    110c:	80 93 f1 00 	sts	0x00F1, r24
    1110:	fa 01       	movw	r30, r20
    1112:	34 97       	sbiw	r30, 0x04	; 4
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	8b 0f       	add	r24, r27
				Length--;
    1118:	30 97       	sbiw	r30, 0x00	; 0
    111a:	09 f4       	brne	.+2      	; 0x111e <main+0xbbc>
				BytesInEndpoint++;
    111c:	53 c0       	rjmp	.+166    	; 0x11c4 <main+0xc62>
    111e:	88 30       	cpi	r24, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1120:	09 f4       	brne	.+2      	; 0x1124 <main+0xbc2>
    1122:	4d c0       	rjmp	.+154    	; 0x11be <main+0xc5c>
    1124:	c9 01       	movw	r24, r18
    1126:	05 96       	adiw	r24, 0x05	; 5
    1128:	fb 01       	movw	r30, r22
    112a:	64 91       	lpm	r22, Z
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    112c:	60 93 f1 00 	sts	0x00F1, r22
    1130:	fa 01       	movw	r30, r20
    1132:	35 97       	sbiw	r30, 0x05	; 5
    1134:	65 e0       	ldi	r22, 0x05	; 5
    1136:	6b 0f       	add	r22, r27
				Length--;
    1138:	30 97       	sbiw	r30, 0x00	; 0
    113a:	09 f4       	brne	.+2      	; 0x113e <main+0xbdc>
				BytesInEndpoint++;
    113c:	4b c0       	rjmp	.+150    	; 0x11d4 <main+0xc72>
    113e:	68 30       	cpi	r22, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1140:	09 f4       	brne	.+2      	; 0x1144 <main+0xbe2>
    1142:	46 c0       	rjmp	.+140    	; 0x11d0 <main+0xc6e>
    1144:	b9 01       	movw	r22, r18
    1146:	6a 5f       	subi	r22, 0xFA	; 250
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	fc 01       	movw	r30, r24
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    114c:	84 91       	lpm	r24, Z
    114e:	80 93 f1 00 	sts	0x00F1, r24
    1152:	fa 01       	movw	r30, r20
    1154:	36 97       	sbiw	r30, 0x06	; 6
    1156:	86 e0       	ldi	r24, 0x06	; 6
    1158:	8b 0f       	add	r24, r27
				Length--;
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	99 f1       	breq	.+102    	; 0x11c4 <main+0xc62>
				BytesInEndpoint++;
    115e:	88 30       	cpi	r24, 0x08	; 8
    1160:	71 f1       	breq	.+92     	; 0x11be <main+0xc5c>
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    1162:	c9 01       	movw	r24, r18
    1164:	07 96       	adiw	r24, 0x07	; 7
    1166:	fb 01       	movw	r30, r22
    1168:	64 91       	lpm	r22, Z
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    116a:	60 93 f1 00 	sts	0x00F1, r22
    116e:	fa 01       	movw	r30, r20
    1170:	37 97       	sbiw	r30, 0x07	; 7
    1172:	b9 5f       	subi	r27, 0xF9	; 249
    1174:	30 97       	sbiw	r30, 0x00	; 0
				Length--;
    1176:	e9 f0       	breq	.+58     	; 0x11b2 <main+0xc50>
    1178:	b7 30       	cpi	r27, 0x07	; 7
				BytesInEndpoint++;
    117a:	51 f5       	brne	.+84     	; 0x11d0 <main+0xc6e>
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    117c:	28 5f       	subi	r18, 0xF8	; 248
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	fc 01       	movw	r30, r24
    1182:	84 91       	lpm	r24, Z
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1184:	80 93 f1 00 	sts	0x00F1, r24
    1188:	fa 01       	movw	r30, r20
    118a:	38 97       	sbiw	r30, 0x08	; 8
    118c:	c9 01       	movw	r24, r18
    118e:	a1 e0       	ldi	r26, 0x01	; 1
				Length--;
    1190:	7a cf       	rjmp	.-268    	; 0x1086 <main+0xb24>
    1192:	8e b3       	in	r24, 0x1e	; 30
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1194:	88 23       	and	r24, r24
				Length--;
    1196:	09 f4       	brne	.+2      	; 0x119a <main+0xc38>
    1198:	46 cb       	rjmp	.-2420   	; 0x826 <main+0x2c4>
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    119a:	80 91 e8 00 	lds	r24, 0x00E8
    119e:	82 ff       	sbrs	r24, 2
    11a0:	f8 cf       	rjmp	.-16     	; 0x1192 <main+0xc30>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11a2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    11a6:	8b 77       	andi	r24, 0x7B	; 123
    11a8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11ac:	3c cb       	rjmp	.-2440   	; 0x826 <main+0x2c4>
    11ae:	5f 98       	cbi	0x0b, 7	; 11
    11b0:	8d ce       	rjmp	.-742    	; 0xecc <main+0x96a>
    11b2:	a1 e0       	ldi	r26, 0x01	; 1
    11b4:	b8 30       	cpi	r27, 0x08	; 8
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);

	if (CurrentDTRState)
	  AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
    11b6:	09 f4       	brne	.+2      	; 0x11ba <main+0xc58>
    11b8:	66 cf       	rjmp	.-308    	; 0x1086 <main+0xb24>
    11ba:	a0 e0       	ldi	r26, 0x00	; 0
    11bc:	64 cf       	rjmp	.-312    	; 0x1086 <main+0xb24>
    11be:	cb 01       	movw	r24, r22
    11c0:	a1 e0       	ldi	r26, 0x01	; 1
    11c2:	61 cf       	rjmp	.-318    	; 0x1086 <main+0xb24>
    11c4:	a1 e0       	ldi	r26, 0x01	; 1
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    11c6:	88 30       	cpi	r24, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    11c8:	09 f0       	breq	.+2      	; 0x11cc <main+0xc6a>
    11ca:	a0 e0       	ldi	r26, 0x00	; 0
    11cc:	cb 01       	movw	r24, r22
    11ce:	5b cf       	rjmp	.-330    	; 0x1086 <main+0xb24>
    11d0:	a1 e0       	ldi	r26, 0x01	; 1
    11d2:	59 cf       	rjmp	.-334    	; 0x1086 <main+0xb24>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    11d4:	a1 e0       	ldi	r26, 0x01	; 1
    11d6:	68 30       	cpi	r22, 0x08	; 8
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    11d8:	81 f7       	brne	.-32     	; 0x11ba <main+0xc58>
    11da:	55 cf       	rjmp	.-342    	; 0x1086 <main+0xb24>
    11dc:	a1 e0       	ldi	r26, 0x01	; 1
    11de:	b8 30       	cpi	r27, 0x08	; 8
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <main+0xc82>
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	fa 01       	movw	r30, r20
    11e6:	c9 01       	movw	r24, r18
    11e8:	4e cf       	rjmp	.-356    	; 0x1086 <main+0xb24>
    11ea:	8e b3       	in	r24, 0x1e	; 30
    11ec:	88 23       	and	r24, r24
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <main+0xc90>
    11f0:	1a cb       	rjmp	.-2508   	; 0x826 <main+0x2c4>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    11f2:	80 91 e8 00 	lds	r24, 0x00E8
    11f6:	82 ff       	sbrs	r24, 2
    11f8:	f8 cf       	rjmp	.-16     	; 0x11ea <main+0xc88>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11fa:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    11fe:	8b 77       	andi	r24, 0x7B	; 123
    1200:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1204:	10 cb       	rjmp	.-2528   	; 0x826 <main+0x2c4>
    1206:	80 91 e8 00 	lds	r24, 0x00E8
    120a:	8b 77       	andi	r24, 0x7B	; 123
    120c:	80 93 e8 00 	sts	0x00E8, r24
    1210:	08 c0       	rjmp	.+16     	; 0x1222 <main+0xcc0>
    1212:	8e b3       	in	r24, 0x1e	; 30
    1214:	88 23       	and	r24, r24
    1216:	09 f4       	brne	.+2      	; 0x121a <main+0xcb8>
    1218:	d2 cd       	rjmp	.-1116   	; 0xdbe <main+0x85c>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    121a:	8e b3       	in	r24, 0x1e	; 30
    121c:	85 30       	cpi	r24, 0x05	; 5
    121e:	09 f4       	brne	.+2      	; 0x1222 <main+0xcc0>
    1220:	ce cd       	rjmp	.-1124   	; 0xdbe <main+0x85c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
    1222:	80 91 e8 00 	lds	r24, 0x00E8
    1226:	80 ff       	sbrs	r24, 0
    1228:	f4 cf       	rjmp	.-24     	; 0x1212 <main+0xcb0>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
    122a:	c9 cd       	rjmp	.-1134   	; 0xdbe <main+0x85c>

0000122c <__udivmodsi4>:
	
#define	r_cnt __zero_reg__  /* loop count (0 after the loop!) */

#if defined (L_udivmodsi4)
DEFUN __udivmodsi4
	ldi	r_remL, 33	; init loop counter
    122c:	a1 e2       	ldi	r26, 0x21	; 33
	mov	r_cnt, r_remL
    122e:	1a 2e       	mov	r1, r26
	sub	r_remL,r_remL
    1230:	aa 1b       	sub	r26, r26
	sub	r_remH,r_remH	; clear remainder and carry
    1232:	bb 1b       	sub	r27, r27
	mov_l	r_remHL, r_remL
    1234:	fd 01       	movw	r30, r26
	mov_h	r_remHH, r_remH
	rjmp	__udivmodsi4_ep	; jump to entry point
    1236:	0d c0       	rjmp	.+26     	; 0x1252 <__udivmodsi4_ep>

00001238 <__udivmodsi4_loop>:
__udivmodsi4_loop:
        rol	r_remL		; shift dividend into remainder
    1238:	aa 1f       	adc	r26, r26
	rol	r_remH
    123a:	bb 1f       	adc	r27, r27
	rol	r_remHL
    123c:	ee 1f       	adc	r30, r30
	rol	r_remHH
    123e:	ff 1f       	adc	r31, r31
        cp	r_remL,r_arg2L	; compare remainder & divisor
    1240:	a2 17       	cp	r26, r18
	cpc	r_remH,r_arg2H
    1242:	b3 07       	cpc	r27, r19
	cpc	r_remHL,r_arg2HL
    1244:	e4 07       	cpc	r30, r20
	cpc	r_remHH,r_arg2HH
    1246:	f5 07       	cpc	r31, r21
	brcs	__udivmodsi4_ep	; remainder <= divisor
    1248:	20 f0       	brcs	.+8      	; 0x1252 <__udivmodsi4_ep>
        sub	r_remL,r_arg2L	; restore remainder
    124a:	a2 1b       	sub	r26, r18
        sbc	r_remH,r_arg2H
    124c:	b3 0b       	sbc	r27, r19
        sbc	r_remHL,r_arg2HL
    124e:	e4 0b       	sbc	r30, r20
        sbc	r_remHH,r_arg2HH
    1250:	f5 0b       	sbc	r31, r21

00001252 <__udivmodsi4_ep>:
__udivmodsi4_ep:
        rol	r_arg1L		; shift dividend (with CARRY)
    1252:	66 1f       	adc	r22, r22
        rol	r_arg1H
    1254:	77 1f       	adc	r23, r23
        rol	r_arg1HL
    1256:	88 1f       	adc	r24, r24
        rol	r_arg1HH
    1258:	99 1f       	adc	r25, r25
        dec	r_cnt		; decrement loop counter
    125a:	1a 94       	dec	r1
        brne	__udivmodsi4_loop
    125c:	69 f7       	brne	.-38     	; 0x1238 <__udivmodsi4_loop>
				; __zero_reg__ now restored (r_cnt == 0)
	com	r_arg1L
    125e:	60 95       	com	r22
	com	r_arg1H
    1260:	70 95       	com	r23
	com	r_arg1HL
    1262:	80 95       	com	r24
	com	r_arg1HH
    1264:	90 95       	com	r25
; div/mod results to return registers, as for the ldiv() function
	mov_l	r_arg2L,  r_arg1L	; quotient
    1266:	9b 01       	movw	r18, r22
	mov_h	r_arg2H,  r_arg1H
	mov_l	r_arg2HL, r_arg1HL
    1268:	ac 01       	movw	r20, r24
	mov_h	r_arg2HH, r_arg1HH
	mov_l	r_arg1L,  r_remL	; remainder
    126a:	bd 01       	movw	r22, r26
	mov_h	r_arg1H,  r_remH
	mov_l	r_arg1HL, r_remHL
    126c:	cf 01       	movw	r24, r30
	mov_h	r_arg1HH, r_remHH
	ret
    126e:	08 95       	ret

00001270 <__tablejump2__>:

.section .text.libgcc, "ax", @progbits

#ifdef L_tablejump2
DEFUN __tablejump2__
    lsl     r30
    1270:	ee 0f       	add	r30, r30
    rol     r31
    1272:	ff 1f       	adc	r31, r31
    adiw    r30, 1
    elpm
    push    r0
    ret
#elif defined (__AVR_HAVE_LPMX__)
    lpm     __tmp_reg__, Z+
    1274:	05 90       	lpm	r0, Z+
    lpm     r31, Z
    1276:	f4 91       	lpm	r31, Z
    mov     r30, __tmp_reg__
    1278:	e0 2d       	mov	r30, r0
    ijmp
    127a:	09 94       	ijmp

0000127c <_exit>:
ENDF _exit

	/* Code from .fini8 ... .fini1 sections inserted by ld script.  */

	.section .fini0,"ax",@progbits
	cli
    127c:	f8 94       	cli

0000127e <__stop_program>:
__stop_program:
	rjmp	__stop_program
    127e:	ff cf       	rjmp	.-2      	; 0x127e <__stop_program>
